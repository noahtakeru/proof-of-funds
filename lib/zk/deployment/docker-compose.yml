version: '3.8'

services:
  # ZK System API Service
  zk-api:
    build:
      context: ../../..
      dockerfile: lib/zk/deployment/Dockerfile
      target: production
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
      - MONGODB_URI=mongodb://mongodb:27017/zksystem
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - mongodb
      - redis
    volumes:
      - zk-logs:/app/logs
    networks:
      - zk-network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3000/health" ]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

  # ZK Worker Service for Proof Generation
  zk-worker:
    build:
      context: ../../..
      dockerfile: lib/zk/deployment/Dockerfile
      target: production
    restart: unless-stopped
    command: [ "node", "dist/worker.js" ]
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://mongodb:27017/zksystem
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - WORKER_CONCURRENCY=2
    depends_on:
      - mongodb
      - redis
    volumes:
      - zk-data:/app/data
    networks:
      - zk-network

  # MongoDB Database
  mongodb:
    image: mongo:5
    restart: unless-stopped
    volumes:
      - mongodb-data:/data/db
      - mongodb-config:/data/configdb
    networks:
      - zk-network
    ports:
      - "27017:27017"
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongo localhost:27017/zksystem --quiet
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

  # Redis for Caching and Message Queue
  redis:
    image: redis:6-alpine
    restart: unless-stopped
    volumes:
      - redis-data:/data
    networks:
      - zk-network
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 3

  # Admin Dashboard (Optional)
  admin-dashboard:
    build:
      context: ../../..
      dockerfile: lib/zk/deployment/Dockerfile
      target: production
    restart: unless-stopped
    command: [ "node", "dist/admin-dashboard.js" ]
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=production
      - PORT=3001
      - API_URL=http://zk-api:3000
      - MONGODB_URI=mongodb://mongodb:27017/zksystem
    depends_on:
      - zk-api
      - mongodb
    networks:
      - zk-network

  # System Monitoring Service
  monitoring:
    build:
      context: ../../..
      dockerfile: lib/zk/deployment/Dockerfile
      target: production
    restart: unless-stopped
    command: [ "node", "dist/monitoring/system-monitor.js" ]
    environment:
      - NODE_ENV=production
      - MONGODB_URI=mongodb://mongodb:27017/zksystem
      - ALERT_EMAIL=alerts@example.com
    depends_on:
      - mongodb
      - zk-api
    networks:
      - zk-network

networks:
  zk-network:
    driver: bridge

volumes:
  zk-logs:
  zk-data:
  mongodb-data:
  mongodb-config:
  redis-data:
