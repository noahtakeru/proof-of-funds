name: ZK System CI/CD Pipeline

# Trigger workflow on push or pull request to main branch
# or manual trigger from the Actions tab
on:
  push:
    branches: [ main, develop ]
    paths:
      - 'lib/zk/**'
      - '.github/workflows/zk-ci.yml'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'lib/zk/**'
      - '.github/workflows/zk-ci.yml'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production
      skip_tests:
        description: 'Skip tests'
        required: false
        default: false
        type: boolean
      feature_flags:
        description: 'Feature flags to enable (comma-separated)'
        required: false
        type: string

# Set environment variables
env:
  NODE_VERSION: '16.x'
  CACHE_KEY_PREFIX: 'zk-system-v1'
  BUILD_DIR: 'lib/zk/dist'
  TEST_TIMEOUT: 300000
  
# Define jobs to run in parallel stages
jobs:
  # Stage 1: Validate and Lint
  validate:
    name: Validate and Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'lib/zk/package-lock.json'
          
      - name: Install dependencies
        run: |
          cd lib/zk
          npm ci
      
      - name: Lint JavaScript/TypeScript
        run: |
          cd lib/zk
          npm run lint
      
      - name: Check for security vulnerabilities
        run: |
          cd lib/zk
          npm audit --production --audit-level=high
      
      - name: Check code formatting
        run: |
          cd lib/zk
          npm run format:check
          
      - name: Validate module system compatibility
        run: |
          cd lib/zk
          npm run validate:modules
      
      - name: Generate static code analysis report
        run: |
          cd lib/zk
          npm run analyze
          
      - name: Archive code analysis results
        uses: actions/upload-artifact@v3
        with:
          name: code-analysis-report
          path: lib/zk/analysis-report.html
          retention-days: 14

  # Stage 2: Build
  build:
    name: Build
    needs: validate
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'lib/zk/package-lock.json'
          
      - name: Install dependencies
        run: |
          cd lib/zk
          npm ci
          
      - name: Build modules (ESM)
        run: |
          cd lib/zk
          npm run build:esm
          
      - name: Build modules (CommonJS)
        run: |
          cd lib/zk
          npm run build:cjs
          
      - name: Build browser bundles
        run: |
          cd lib/zk
          npm run build:browser
          
      - name: Generate TypeScript declarations
        run: |
          cd lib/zk
          npm run build:types
          
      - name: Generate source maps
        run: |
          cd lib/zk
          npm run build:sourcemaps
          
      - name: Run post-build validation
        run: |
          cd lib/zk
          npm run validate:build
          
      - name: Archive build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: ${{ env.BUILD_DIR }}
          retention-days: 14

  # Stage 3: Test
  test:
    name: Test
    needs: build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node: ['14.x', '16.x', '18.x']
      fail-fast: false
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Node.js ${{ matrix.node }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node }}
          cache: 'npm'
          cache-dependency-path: 'lib/zk/package-lock.json'
          
      - name: Install dependencies
        run: |
          cd lib/zk
          npm ci
          
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: ${{ env.BUILD_DIR }}
          
      - name: Run unit tests
        if: ${{ !github.event.inputs.skip_tests || github.event.inputs.skip_tests == 'false' }}
        run: |
          cd lib/zk
          npm run test:unit
        env:
          JEST_TIMEOUT: ${{ env.TEST_TIMEOUT }}
          
      - name: Run integration tests
        if: ${{ !github.event.inputs.skip_tests || github.event.inputs.skip_tests == 'false' }}
        run: |
          cd lib/zk
          npm run test:integration
        env:
          JEST_TIMEOUT: ${{ env.TEST_TIMEOUT }}
          
      - name: Run regression tests
        if: ${{ !github.event.inputs.skip_tests || github.event.inputs.skip_tests == 'false' }}
        run: |
          cd lib/zk
          npm run test:regression
        env:
          JEST_TIMEOUT: ${{ env.TEST_TIMEOUT }}
          
      - name: Generate test coverage report
        if: matrix.os == 'ubuntu-latest' && matrix.node == '16.x'
        run: |
          cd lib/zk
          npm run test:coverage
          
      - name: Archive test results
        if: matrix.os == 'ubuntu-latest' && matrix.node == '16.x'
        uses: actions/upload-artifact@v3
        with:
          name: test-results
          path: lib/zk/coverage
          retention-days: 14

  # Stage 4: Security Testing
  security-test:
    name: Security Testing
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'lib/zk/package-lock.json'
          
      - name: Install dependencies
        run: |
          cd lib/zk
          npm ci
          
      - name: Run dependency vulnerability scan
        run: |
          cd lib/zk
          npm audit --production
          
      - name: Run SAST analysis
        run: |
          cd lib/zk
          npm run security:sast
          
      - name: Check for secrets
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Run cryptographic verification
        run: |
          cd lib/zk
          npm run security:crypto-verify
          
      - name: Archive security scan results
        uses: actions/upload-artifact@v3
        with:
          name: security-scan-results
          path: lib/zk/security-reports
          retention-days: 14

  # Stage 5: Performance Benchmarking
  performance-test:
    name: Performance Testing
    needs: [build, test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'lib/zk/package-lock.json'
          
      - name: Install dependencies
        run: |
          cd lib/zk
          npm ci
          
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: ${{ env.BUILD_DIR }}
          
      - name: Run performance benchmarks
        run: |
          cd lib/zk
          npm run benchmark
          
      - name: Compare with baseline
        run: |
          cd lib/zk
          npm run benchmark:compare
          
      - name: Archive benchmark results
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-results
          path: lib/zk/benchmark-results
          retention-days: 14

  # Stage 6: Create Package
  package:
    name: Create Package
    needs: [test, security-test, performance-test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: 'lib/zk/package-lock.json'
          
      - name: Install dependencies
        run: |
          cd lib/zk
          npm ci
          
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifacts
          path: ${{ env.BUILD_DIR }}
          
      - name: Create release package
        run: |
          cd lib/zk
          npm pack
          
      - name: Create SBOM
        run: |
          cd lib/zk
          npm i -g @cyclonedx/cyclonedx-npm
          cyclonedx-npm --output-file sbom.json
          
      - name: Archive release package
        uses: actions/upload-artifact@v3
        with:
          name: release-package
          path: |
            lib/zk/*.tgz
            lib/zk/sbom.json
          retention-days: 14

  # Stage 7: Deploy to Development
  deploy-dev:
    name: Deploy to Development
    needs: package
    if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'development'
    runs-on: ubuntu-latest
    environment:
      name: development
      url: https://dev-zk.example.com
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'
          
      - name: Download release package
        uses: actions/download-artifact@v3
        with:
          name: release-package
          path: lib/zk
          
      - name: Configure environment
        run: |
          cd lib/zk
          echo "NODE_ENV=development" >> .env
          echo "API_URL=${{ secrets.DEV_API_URL }}" >> .env
          echo "ZK_CONFIG=${{ secrets.DEV_ZK_CONFIG }}" >> .env
          
      - name: Apply feature flags
        if: ${{ github.event.inputs.feature_flags != '' }}
        run: |
          cd lib/zk
          echo "FEATURE_FLAGS=${{ github.event.inputs.feature_flags }}" >> .env
          
      - name: Deploy to development server
        run: |
          cd lib/zk
          npm run deploy:dev
        env:
          DEPLOY_TOKEN: ${{ secrets.DEV_DEPLOY_TOKEN }}
          
      - name: Run smoke tests
        run: |
          cd lib/zk
          npm run test:smoke -- --url=${{ secrets.DEV_API_URL }}
          
      - name: Notify deployment
        run: |
          curl -X POST -H "Content-Type: application/json" \
            -d '{"environment": "development", "status": "success", "version": "${{ github.sha }}"}' \
            ${{ secrets.NOTIFICATION_WEBHOOK_URL }}

  # Stage 8: Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    needs: package
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging'
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: https://staging-zk.example.com
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'
          
      - name: Download release package
        uses: actions/download-artifact@v3
        with:
          name: release-package
          path: lib/zk
          
      - name: Configure environment
        run: |
          cd lib/zk
          echo "NODE_ENV=staging" >> .env
          echo "API_URL=${{ secrets.STAGING_API_URL }}" >> .env
          echo "ZK_CONFIG=${{ secrets.STAGING_ZK_CONFIG }}" >> .env
          
      - name: Apply feature flags
        if: ${{ github.event.inputs.feature_flags != '' }}
        run: |
          cd lib/zk
          echo "FEATURE_FLAGS=${{ github.event.inputs.feature_flags }}" >> .env
          
      - name: Deploy to staging server
        run: |
          cd lib/zk
          npm run deploy:staging
        env:
          DEPLOY_TOKEN: ${{ secrets.STAGING_DEPLOY_TOKEN }}
          
      - name: Run integration tests on staging
        run: |
          cd lib/zk
          npm run test:e2e -- --url=${{ secrets.STAGING_API_URL }}
          
      - name: Create deployment record
        run: |
          cd lib/zk
          echo "Deployed version: ${{ github.sha }}" > deployment-record.txt
          echo "Deployed at: $(date)" >> deployment-record.txt
          echo "Deployed by: ${{ github.actor }}" >> deployment-record.txt
          
      - name: Archive deployment record
        uses: actions/upload-artifact@v3
        with:
          name: staging-deployment-record
          path: lib/zk/deployment-record.txt
          retention-days: 90

  # Stage 9: Deploy to Production
  deploy-production:
    name: Deploy to Production
    needs: deploy-staging
    if: github.event.inputs.environment == 'production'
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://zk.example.com
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'
          
      - name: Download release package
        uses: actions/download-artifact@v3
        with:
          name: release-package
          path: lib/zk
          
      - name: Configure environment
        run: |
          cd lib/zk
          echo "NODE_ENV=production" >> .env
          echo "API_URL=${{ secrets.PROD_API_URL }}" >> .env
          echo "ZK_CONFIG=${{ secrets.PROD_ZK_CONFIG }}" >> .env
          
      - name: Prepare deployment
        run: |
          cd lib/zk
          npm run predeploy:production
          
      - name: Create deployment approval
        id: approval_request
        run: |
          APPROVAL_ID=$(uuidgen)
          echo "approval_id=$APPROVAL_ID" >> $GITHUB_OUTPUT
          curl -X POST -H "Content-Type: application/json" \
            -d '{"approval_id": "'"$APPROVAL_ID"'", "environment": "production", "version": "${{ github.sha }}", "requester": "${{ github.actor }}"}' \
            ${{ secrets.APPROVAL_API_URL }}
            
      - name: Wait for approval
        run: |
          # Poll approval endpoint until approved or timeout
          TIMEOUT=1800  # 30 minutes
          INTERVAL=60   # Check every 60 seconds
          ELAPSED=0
          APPROVAL_ID=${{ steps.approval_request.outputs.approval_id }}
          
          while [ $ELAPSED -lt $TIMEOUT ]; do
            STATUS=$(curl -s ${{ secrets.APPROVAL_API_URL }}/status/$APPROVAL_ID)
            if [ "$STATUS" == "approved" ]; then
              echo "Deployment approved!"
              exit 0
            elif [ "$STATUS" == "rejected" ]; then
              echo "Deployment rejected by approver."
              exit 1
            fi
            
            echo "Waiting for approval... ($ELAPSED seconds elapsed)"
            sleep $INTERVAL
            ELAPSED=$((ELAPSED + INTERVAL))
          done
          
          echo "Approval timeout exceeded. Deployment aborted."
          exit 1
          
      - name: Deploy to production CDN
        run: |
          cd lib/zk
          npm run deploy:production
        env:
          DEPLOY_TOKEN: ${{ secrets.PROD_DEPLOY_TOKEN }}
          
      - name: Configure rollback
        run: |
          cd lib/zk
          npm run configure:rollback
        env:
          PREVIOUS_VERSION: ${{ github.event.before }}
          
      - name: Verify deployment
        run: |
          cd lib/zk
          npm run verify:deployment -- --url=${{ secrets.PROD_API_URL }}
          
      - name: Create production deployment record
        run: |
          cd lib/zk
          echo "Deployed version: ${{ github.sha }}" > production-deployment-record.txt
          echo "Deployed at: $(date)" >> production-deployment-record.txt
          echo "Deployed by: ${{ github.actor }}" >> production-deployment-record.txt
          echo "Approved by: $APPROVER" >> production-deployment-record.txt
          
      - name: Archive production deployment record
        uses: actions/upload-artifact@v3
        with:
          name: production-deployment-record
          path: lib/zk/production-deployment-record.txt
          retention-days: 365
          
      - name: Send deployment notification
        run: |
          curl -X POST -H "Content-Type: application/json" \
            -d '{"environment": "production", "status": "success", "version": "${{ github.sha }}"}' \
            ${{ secrets.NOTIFICATION_WEBHOOK_URL }}

  # Stage 10: Post-Deployment Monitoring
  monitor-deployment:
    name: Monitor Deployment
    needs: [deploy-dev, deploy-staging, deploy-production]
    if: ${{ always() && (needs.deploy-dev.result == 'success' || needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success') }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Install dependencies
        run: |
          cd lib/zk
          npm ci
          
      - name: Monitor development deployment
        if: needs.deploy-dev.result == 'success'
        run: |
          cd lib/zk
          npm run monitor:deployment -- --environment=development --duration=300
        env:
          MONITOR_API_KEY: ${{ secrets.MONITOR_API_KEY }}
          
      - name: Monitor staging deployment
        if: needs.deploy-staging.result == 'success'
        run: |
          cd lib/zk
          npm run monitor:deployment -- --environment=staging --duration=600
        env:
          MONITOR_API_KEY: ${{ secrets.MONITOR_API_KEY }}
          
      - name: Monitor production deployment
        if: needs.deploy-production.result == 'success'
        run: |
          cd lib/zk
          npm run monitor:deployment -- --environment=production --duration=900
        env:
          MONITOR_API_KEY: ${{ secrets.MONITOR_API_KEY }}
          
      - name: Generate deployment report
        run: |
          cd lib/zk
          npm run generate:deployment-report
          
      - name: Archive monitoring results
        uses: actions/upload-artifact@v3
        with:
          name: deployment-monitoring-report
          path: lib/zk/monitoring-report
          retention-days: 30 