/**
 * @fileoverview Deployment Framework (CommonJS)
 * 
 * CommonJS version of the deployment framework for compatibility with non-ESM environments.
 * This file exports the same functionality as the ESM version but in CommonJS format.
 * 
 * The framework has been streamlined from multiple adapter classes and factory patterns
 * into a more direct implementation while maintaining cross-platform compatibility.
 * 
 * @author ZK Infrastructure Team
 */

'use strict';

// In a real implementation, these would be properly built CJS modules
// For this example, we'll create a compatibility layer
const deployment = require('./deployment.cjs');
const environmentUtils = require('./environment-utils.cjs');
const platformAdapters = require('./platform-adapters.cjs');

// Error classes for backward compatibility
class DeploymentError extends Error {
  constructor(message, options = {}) {
    super(message);
    this.name = 'DeploymentError';
    this.code = options.code || 'DEPLOYMENT_ERROR';
    this.recoverable = options.recoverable || false;
    this.component = options.component || 'deployment';
    this.details = options.details || {};
    this.timestamp = new Date().toISOString();
  }
}

class EnvironmentCompatibilityError extends DeploymentError {
  constructor(message, options = {}) {
    super(message, {
      code: 'ENVIRONMENT_COMPATIBILITY_ERROR',
      recoverable: false,
      component: 'environment-detection',
      ...options
    });
    this.name = 'EnvironmentCompatibilityError';
  }
}

class ConfigurationError extends DeploymentError {
  constructor(message, options = {}) {
    super(message, {
      code: 'CONFIGURATION_ERROR',
      recoverable: true,
      component: 'deployment-configuration',
      ...options
    });
    this.name = 'ConfigurationError';
  }
}

class DeploymentProcessError extends DeploymentError {
  constructor(message, options = {}) {
    super(message, {
      code: 'DEPLOYMENT_PROCESS_ERROR',
      recoverable: false,
      component: 'deployment-process',
      ...options
    });
    this.name = 'DeploymentProcessError';
  }
}

// Legacy strategy type mapping
const DeploymentStrategyType = {
  FullLocal: deployment.StrategyType.FULL_LOCAL,
  ServerSide: deployment.StrategyType.SERVER_SIDE,
  Hybrid: deployment.StrategyType.HYBRID,
  HighPerformance: deployment.StrategyType.HIGH_PERFORMANCE,
  LowResource: deployment.StrategyType.LOW_RESOURCE
};

// Legacy adapter factories
function getDeploymentAdapter(config = {}) {
  return platformAdapters.createAdapter({ config });
}

function createDeploymentAdapter(environment, config = {}) {
  return platformAdapters.createAdapter({ environment, config });
}

// Legacy optimization function
async function createOptimizedDeployment(options = {}) {
  const deploymentInstance = deployment.createDeployment(options);
  await deploymentInstance.initialize();
  return deploymentInstance;
}

// Legacy adapter mappings
const DeploymentManager = deployment.Deployment;
const PlatformAdapterFactory = { createAdapter: platformAdapters.createAdapter };
const BaseDeploymentAdapter = platformAdapters.PlatformAdapter;
const NodeDeploymentAdapter = platformAdapters.NodeAdapter;
const BrowserDeploymentAdapter = platformAdapters.BrowserAdapter;
const PlatformConfigurator = { getRecommendedConfiguration: environmentUtils.getRecommendedConfiguration };

// Export everything
module.exports = {
  // Default export
  default: deployment.createDeployment,
  
  // Error classes
  DeploymentError,
  EnvironmentCompatibilityError,
  ConfigurationError,
  DeploymentProcessError,
  
  // Strategy types
  DeploymentStrategyType,
  StrategyType: deployment.StrategyType,
  predefinedStrategies: deployment.predefinedStrategies,
  
  // Legacy adapter factories
  getDeploymentAdapter,
  createDeploymentAdapter,
  createOptimizedDeployment,
  
  // Legacy class mappings
  DeploymentManager,
  PlatformAdapterFactory,
  BaseDeploymentAdapter,
  NodeDeploymentAdapter,
  BrowserDeploymentAdapter,
  PlatformConfigurator,
  
  // Main deployment class and factory
  Deployment: deployment.Deployment,
  createDeployment: deployment.createDeployment,
  
  // Environment utilities
  EnvironmentType: environmentUtils.EnvironmentType,
  DeviceCapabilityLevel: environmentUtils.DeviceCapabilityLevel,
  detectEnvironment: environmentUtils.detectEnvironment,
  detectFeatures: environmentUtils.detectFeatures,
  getRecommendedConfiguration: environmentUtils.getRecommendedConfiguration,
  isMobileDevice: environmentUtils.isMobileDevice,
  
  // Platform adapters
  PlatformAdapter: platformAdapters.PlatformAdapter,
  BrowserAdapter: platformAdapters.BrowserAdapter,
  NodeAdapter: platformAdapters.NodeAdapter,
  MobileAdapter: platformAdapters.MobileAdapter,
  WorkerAdapter: platformAdapters.WorkerAdapter,
  FallbackAdapter: platformAdapters.FallbackAdapter,
  createAdapter: platformAdapters.createAdapter
};