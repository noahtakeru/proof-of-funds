"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["common_dist_utils_ethersUtils_js"],{

/***/ "../common/dist/utils/ethersUtils.js":
/*!*******************************************!*\
  !*** ../common/dist/utils/ethersUtils.js ***!
  \*******************************************/
/***/ (function(__webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getEthers: function() { return /* binding */ getEthers; },\n/* harmony export */   isValidAmount: function() { return /* binding */ isValidAmount; },\n/* harmony export */   parseAmount: function() { return /* binding */ parseAmount; }\n/* harmony export */ });\n/**\n * Ethers.js Utility Module\n * \n * Provides centralized access to the ethers.js library with proper dynamic imports\n * to avoid Next.js SSR issues. Uses a singleton pattern to prevent multiple imports.\n */ // This pattern allows both ESM and CommonJS to work without conditional exports\n// that would cause syntax errors in bundlers\n// Singleton instance of ethers\nlet ethersInstance = null;\n/**\n * Gets the ethers.js library instance, loading it if not already loaded\n * @returns {Promise<object>} The ethers.js library\n */ const getEthers = async ()=>{\n    if (!ethersInstance) {\n        try {\n            // Try dynamic import (ESM style)\n            if (typeof require === \"undefined\") {\n                const ethers = await __webpack_require__.e(/*! import() */ \"common_node_modules_ethers_lib_esm_index_js\").then(__webpack_require__.bind(__webpack_require__, /*! ethers */ \"../common/node_modules/ethers/lib.esm/index.js\"));\n                ethersInstance = {\n                    ethers\n                };\n            } else {\n                // CommonJS style\n                ethersInstance = {\n                    ethers: require(\"ethers\")\n                };\n            }\n        } catch (error) {\n            // Silently provide a mock implementation for tests\n            ethersInstance = {\n                ethers: {\n                    utils: {\n                        parseUnits: (value, decimals)=>({\n                                toString: ()=>value\n                            }),\n                        formatUnits: (value, decimals)=>value.toString(),\n                        isAddress: (addr)=>typeof addr === \"string\" && addr.startsWith(\"0x\"),\n                        getAddress: (addr)=>addr,\n                        keccak256: (val)=>\"0x1234567890abcdef1234567890abcdef12345678\",\n                        toUtf8Bytes: (text)=>text,\n                        hexlify: (val)=>typeof val.startsWith === \"function\" ? val.startsWith(\"0x\") ? val : \"0x\" + val : \"0x1234\",\n                        arrayify: ()=>new Uint8Array([\n                                1,\n                                2,\n                                3,\n                                4\n                            ]),\n                        recoverPublicKey: ()=>\"0x1234\",\n                        splitSignature: ()=>({\n                                r: \"0x1234\",\n                                s: \"0x5678\",\n                                v: 27\n                            }),\n                        defaultAbiCoder: {\n                            encode: ()=>\"0x1234\"\n                        }\n                    },\n                    BigNumber: {\n                        from: (val)=>({\n                                toString: ()=>String(val),\n                                lt: ()=>false,\n                                gt: ()=>false\n                            })\n                    },\n                    Wallet: class MockWallet {\n                        connect() {\n                            return this;\n                        }\n                        signMessage() {\n                            return \"0x1234\";\n                        }\n                        constructor(){\n                            this.address = \"0x1234567890123456789012345678901234567890\";\n                        }\n                    }\n                }\n            };\n        }\n    }\n    return ethersInstance;\n};\n/**\n * Validates if a string is a valid numeric amount\n * Checks if the string is not empty, not null, and can be parsed as a number\n * \n * @param {string} amount - The amount string to validate\n * @returns {boolean} - True if valid, false otherwise\n */ const isValidAmount = (amount)=>{\n    if (!amount || amount.trim() === \"\") return false;\n    // Try to parse as number\n    const num = Number(amount);\n    if (isNaN(num)) return false;\n    // Ensure it's positive\n    if (num < 0) return false;\n    return true;\n};\n/**\n * Parses a decimal amount string to BigNumber wei representation\n * Handles empty or invalid inputs gracefully\n * \n * @param {string} amount - The amount as a decimal string (e.g. \"10.5\")\n * @param {number} decimals - Number of decimals to use (default: 18 for ETH)\n * @returns {Promise<string>} - The amount in wei as a string\n */ const parseAmount = async function(amount) {\n    let decimals = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 18;\n    try {\n        const { ethers } = await getEthers();\n        // Handle empty or invalid inputs\n        if (!isValidAmount(amount)) {\n            console.warn('Invalid amount provided: \"'.concat(amount, '\". Using 0 as fallback.'));\n            return \"0\";\n        }\n        // Parse the amount using ethers utils\n        return ethers.utils.parseUnits(amount, decimals).toString();\n    } catch (error) {\n        console.error(\"Error parsing amount:\", error);\n        throw new Error(\"Failed to parse amount: \".concat(error.message));\n    }\n};\n// Define the exports object\nconst ethersUtils = {\n    getEthers,\n    isValidAmount,\n    parseAmount\n};\n// For CommonJS environments\nif (typeof module !== \"undefined\" && module.exports) {\n    module.exports = ethersUtils;\n}\n// For ESM environments\n/* harmony default export */ __webpack_exports__[\"default\"] = (ethersUtils);\n// Named exports\n\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = __webpack_module__.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                __webpack_module__.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                __webpack_module__.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        __webpack_module__.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    __webpack_module__.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../common/dist/utils/ethersUtils.js\n"));

/***/ })

}]);