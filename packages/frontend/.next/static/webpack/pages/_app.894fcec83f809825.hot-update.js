"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/_app",{

/***/ "../common/dist/PhantomMultiWalletContext.js":
/*!***************************************************!*\
  !*** ../common/dist/PhantomMultiWalletContext.js ***!
  \***************************************************/
/***/ (function(__webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PhantomMultiWalletProvider: function() { return /* binding */ PhantomMultiWalletProvider; },\n/* harmony export */   usePhantomMultiWallet: function() { return /* binding */ usePhantomMultiWallet; }\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"../../node_modules/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"../../node_modules/react/index.js\");\n/**\n * PhantomMultiWalletContext\n * \n * A React context for managing multiple Phantom wallet connections.\n */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n// Create context\nconst PhantomMultiWalletContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)({\n    connectedWallets: [],\n    connect: async ()=>{},\n    disconnect: ()=>{},\n    isConnecting: false,\n    error: null\n});\n// Provider component\nfunction PhantomMultiWalletProvider(param) {\n    let { children } = param;\n    _s();\n    const [connectedWallets, setConnectedWallets] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [isConnecting, setIsConnecting] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [error, setError] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    // Load saved wallet connections on component mount and listen for changes\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)(()=>{\n        const loadWallets = ()=>{\n            try {\n                if (typeof localStorage !== \"undefined\") {\n                    // Try to get wallets from the main wallet storage\n                    const walletData = localStorage.getItem(\"walletData\");\n                    if (walletData) {\n                        const parsedData = JSON.parse(walletData);\n                        if (parsedData && parsedData.wallets && parsedData.wallets.phantom && Array.isArray(parsedData.wallets.phantom)) {\n                            // Convert wallet objects to our expected format\n                            const phantomWallets = parsedData.wallets.phantom.map((wallet)=>{\n                                // If it's already a wallet object\n                                if (typeof wallet === \"object\" && wallet !== null && wallet.address) {\n                                    return {\n                                        address: wallet.address,\n                                        publicKey: wallet.address,\n                                        chain: wallet.chain || \"solana\",\n                                        type: \"phantom\",\n                                        connectedAt: wallet.connectedAt || new Date().toISOString()\n                                    };\n                                } else if (typeof wallet === \"string\") {\n                                    return {\n                                        address: wallet,\n                                        publicKey: wallet,\n                                        chain: \"solana\",\n                                        type: \"phantom\",\n                                        connectedAt: new Date().toISOString()\n                                    };\n                                }\n                                return null;\n                            }).filter(Boolean); // Remove any null entries\n                            console.log(\"Loaded Phantom wallets from central storage:\", phantomWallets);\n                            setConnectedWallets(phantomWallets);\n                        } else {\n                            // Fallback to legacy storage\n                            const legacyWallets = localStorage.getItem(\"phantomWallets\");\n                            if (legacyWallets) {\n                                console.log(\"Using legacy Phantom wallet storage\");\n                                setConnectedWallets(JSON.parse(legacyWallets));\n                            }\n                        }\n                    }\n                }\n            } catch (err) {\n                console.error(\"Error loading saved Phantom wallets:\", err);\n            }\n        };\n        // Load wallets initially\n        loadWallets();\n        // Listen for wallet connection changes\n        const handleStorageChange = (e)=>{\n            if (e.key === \"walletData\" || e.key === \"wallet-connection-changed\") {\n                console.log(\"Wallet storage changed, updating Phantom wallet list\");\n                loadWallets();\n            }\n        };\n        window.addEventListener(\"storage\", handleStorageChange);\n        window.addEventListener(\"wallet-connection-changed\", handleStorageChange);\n        return ()=>{\n            window.removeEventListener(\"storage\", handleStorageChange);\n            window.removeEventListener(\"wallet-connection-changed\", handleStorageChange);\n        };\n    }, []);\n    // Connect to a Phantom wallet\n    const connect = async ()=>{\n        setIsConnecting(true);\n        setError(null);\n        try {\n            // Check if Phantom is available\n            if (false) {}\n            if (!window.solana || !window.solana.isPhantom) {\n                throw new Error(\"Phantom wallet is not installed\");\n            }\n            // Try to connect to Phantom\n            const solanaProvider = window.solana;\n            // Request connection\n            await solanaProvider.connect();\n            if (!solanaProvider.isConnected) {\n                throw new Error(\"Failed to connect to Phantom wallet\");\n            }\n            if (!solanaProvider.publicKey) {\n                throw new Error(\"No public key available from Phantom wallet\");\n            }\n            // Create wallet object\n            const wallet = {\n                address: solanaProvider.publicKey.toString(),\n                publicKey: solanaProvider.publicKey.toString(),\n                chain: \"solana\",\n                type: \"phantom\",\n                connectedAt: new Date().toISOString()\n            };\n            // Update state\n            const updatedWallets = [\n                ...connectedWallets,\n                wallet\n            ];\n            setConnectedWallets(updatedWallets);\n            // Save to localStorage using both formats for compatibility\n            if (typeof localStorage !== \"undefined\") {\n                // Update legacy storage\n                localStorage.setItem(\"phantomWallets\", JSON.stringify(updatedWallets));\n                // Update central wallet storage\n                try {\n                    const walletData = localStorage.getItem(\"walletData\");\n                    let parsedData = walletData ? JSON.parse(walletData) : {\n                        wallets: {}\n                    };\n                    // Ensure wallets object exists\n                    if (!parsedData.wallets) {\n                        parsedData.wallets = {};\n                    }\n                    // Ensure phantom wallets array exists\n                    if (!parsedData.wallets.phantom || !Array.isArray(parsedData.wallets.phantom)) {\n                        parsedData.wallets.phantom = [];\n                    }\n                    // Add the new wallet if it doesn't exist\n                    const walletAddress = wallet.address;\n                    const existingIndex = parsedData.wallets.phantom.findIndex((w)=>typeof w === \"string\" && w === walletAddress || typeof w === \"object\" && w && w.address === walletAddress);\n                    if (existingIndex === -1) {\n                        parsedData.wallets.phantom.push({\n                            id: \"phantom-\".concat(walletAddress.substring(0, 8)),\n                            address: walletAddress,\n                            displayAddress: \"\".concat(walletAddress.substring(0, 6), \"...\").concat(walletAddress.substring(walletAddress.length - 4)),\n                            fullAddress: walletAddress,\n                            type: \"phantom\",\n                            chain: \"solana\",\n                            name: \"Phantom \".concat(walletAddress.substring(0, 6), \"...\"),\n                            connected: true,\n                            connectedAt: new Date().toISOString()\n                        });\n                    }\n                    // Save updated data\n                    localStorage.setItem(\"walletData\", JSON.stringify(parsedData));\n                    // Trigger wallet connection change event\n                    const walletChangeEvent = new CustomEvent(\"wallet-connection-changed\", {\n                        detail: {\n                            timestamp: Date.now(),\n                            walletType: \"phantom\"\n                        }\n                    });\n                    window.dispatchEvent(walletChangeEvent);\n                } catch (e) {\n                    console.error(\"Error updating central wallet storage:\", e);\n                }\n            }\n            return wallet;\n        } catch (err) {\n            const errorMessage = err.message || \"Failed to connect to Phantom wallet\";\n            setError(errorMessage);\n            console.error(\"Phantom wallet connection error:\", err);\n            throw new Error(errorMessage);\n        } finally{\n            setIsConnecting(false);\n        }\n    };\n    // Disconnect a Phantom wallet\n    const disconnect = (walletAddress)=>{\n        try {\n            const updatedWallets = connectedWallets.filter((wallet)=>wallet.address !== walletAddress);\n            setConnectedWallets(updatedWallets);\n            // Save to localStorage - update both formats\n            if (typeof localStorage !== \"undefined\") {\n                // Update legacy storage\n                localStorage.setItem(\"phantomWallets\", JSON.stringify(updatedWallets));\n                // Update central wallet storage\n                try {\n                    const walletData = localStorage.getItem(\"walletData\");\n                    if (walletData) {\n                        const parsedData = JSON.parse(walletData);\n                        // If wallet structure exists\n                        if (parsedData.wallets && parsedData.wallets.phantom && Array.isArray(parsedData.wallets.phantom)) {\n                            // Filter out the disconnected wallet\n                            parsedData.wallets.phantom = parsedData.wallets.phantom.filter((w)=>{\n                                if (typeof w === \"string\") {\n                                    return w !== walletAddress;\n                                } else if (typeof w === \"object\" && w) {\n                                    return w.address !== walletAddress;\n                                }\n                                return true;\n                            });\n                            // Save updated data\n                            localStorage.setItem(\"walletData\", JSON.stringify(parsedData));\n                            // Trigger wallet connection change event\n                            const walletChangeEvent = new CustomEvent(\"wallet-connection-changed\", {\n                                detail: {\n                                    timestamp: Date.now(),\n                                    walletType: \"phantom\",\n                                    disconnected: true\n                                }\n                            });\n                            window.dispatchEvent(walletChangeEvent);\n                        }\n                    }\n                } catch (e) {\n                    console.error(\"Error updating central wallet storage during disconnect:\", e);\n                }\n            }\n        } catch (err) {\n            console.error(\"Error disconnecting Phantom wallet:\", err);\n        }\n    };\n    const value = {\n        connectedWallets,\n        connect,\n        disconnect,\n        isConnecting,\n        error\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(PhantomMultiWalletContext.Provider, {\n        value: value,\n        children: children\n    }, void 0, false, {\n        fileName: \"/Users/karpel/Documents/GitHub/proof-of-funds/packages/common/dist/PhantomMultiWalletContext.js\",\n        lineNumber: 261,\n        columnNumber: 5\n    }, this);\n}\n_s(PhantomMultiWalletProvider, \"9hgEHRnd9RViIdC8j20UwZJHzBs=\");\n_c = PhantomMultiWalletProvider;\n// Custom hook to use the context\nfunction usePhantomMultiWallet() {\n    _s1();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(PhantomMultiWalletContext);\n    if (!context) {\n        throw new Error(\"usePhantomMultiWallet must be used within a PhantomMultiWalletProvider\");\n    }\n    return context;\n}\n_s1(usePhantomMultiWallet, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"PhantomMultiWalletProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = __webpack_module__.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                __webpack_module__.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                __webpack_module__.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        __webpack_module__.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    __webpack_module__.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../common/dist/PhantomMultiWalletContext.js\n"));

/***/ })

});