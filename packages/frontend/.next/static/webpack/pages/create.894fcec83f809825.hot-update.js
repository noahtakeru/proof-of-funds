"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("pages/create",{

/***/ "../common/dist/utils/walletHelpers.js":
/*!*********************************************!*\
  !*** ../common/dist/utils/walletHelpers.js ***!
  \*********************************************/
/***/ (function(__webpack_module__, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   connectMetaMask: function() { return /* binding */ connectMetaMask; },\n/* harmony export */   convertAssetsToUSD: function() { return /* binding */ convertAssetsToUSD; },\n/* harmony export */   disconnectWallet: function() { return /* binding */ disconnectWallet; },\n/* harmony export */   generateProofHash: function() { return /* binding */ generateProofHash; },\n/* harmony export */   generateTemporaryWallet: function() { return /* binding */ generateTemporaryWallet; },\n/* harmony export */   getConnectedWallets: function() { return /* binding */ getConnectedWallets; },\n/* harmony export */   isMetaMaskAvailable: function() { return /* binding */ isMetaMaskAvailable; },\n/* harmony export */   saveWalletConnection: function() { return /* binding */ saveWalletConnection; },\n/* harmony export */   scanMultiChainAssets: function() { return /* binding */ scanMultiChainAssets; }\n/* harmony export */ });\n/**\n * Wallet Helpers Module\n * \n * This module provides utility functions for interacting with cryptocurrency wallets.\n */ /**\n * Get a list of all connected wallets\n * @returns {Array} Array of connected wallet objects\n */ function getConnectedWallets() {\n    if (typeof localStorage !== \"undefined\") {\n        try {\n            const walletData = localStorage.getItem(\"walletData\");\n            if (walletData) {\n                const parsedData = JSON.parse(walletData);\n                // Handle different data formats\n                if (Array.isArray(parsedData)) {\n                    // Direct array format (old format)\n                    return parsedData;\n                } else if (parsedData && typeof parsedData === \"object\") {\n                    if (parsedData.wallets) {\n                        // New format with wallets grouped by type\n                        const result = [];\n                        // Extract all wallet objects from each wallet type\n                        Object.keys(parsedData.wallets).forEach((walletType)=>{\n                            const typeWallets = parsedData.wallets[walletType];\n                            if (Array.isArray(typeWallets)) {\n                                typeWallets.forEach((wallet)=>{\n                                    // If wallet is just an address string, convert it to a wallet object\n                                    if (typeof wallet === \"string\") {\n                                        const address = wallet;\n                                        const displayAddress = address.length > 10 ? \"\".concat(address.substring(0, 6), \"...\").concat(address.substring(address.length - 4)) : address;\n                                        result.push({\n                                            id: \"\".concat(walletType, \"-\").concat(address.substring(2, 10)),\n                                            address: address,\n                                            displayAddress: displayAddress,\n                                            fullAddress: address,\n                                            type: walletType === \"metamask\" ? \"evm\" : walletType,\n                                            name: \"\".concat(walletType === \"metamask\" ? \"MetaMask\" : \"Wallet\", \" \").concat(displayAddress),\n                                            chain: walletType === \"metamask\" ? \"ethereum\" : \"unknown\",\n                                            connected: true\n                                        });\n                                    } else if (typeof wallet === \"object\" && wallet !== null) {\n                                        // Already a wallet object\n                                        result.push(wallet);\n                                    }\n                                });\n                            }\n                        });\n                        return result;\n                    }\n                }\n            }\n        } catch (error) {\n            console.error(\"Error getting connected wallets:\", error);\n        }\n    }\n    // Default empty array if no wallets are found\n    return [];\n}\n/**\n * Save a wallet connection to localStorage\n * @param {string} walletType - Type of wallet ('metamask', 'phantom', etc.)\n * @param {Array|Object} accounts - Array of wallet addresses or single wallet object\n * @returns {Promise<boolean>} Success or failure\n * @throws {Error} If parameters are invalid\n */ async function saveWalletConnection(walletType, accounts) {\n    if (!walletType) {\n        throw new Error(\"Missing wallet type\");\n    }\n    // Fix issues with non-array inputs\n    let accountsArray;\n    // Handle different inputs to make the function more robust\n    if (!accounts) {\n        throw new Error(\"Missing accounts parameter\");\n    } else if (Array.isArray(accounts)) {\n        // Normal case: accounts is already an array\n        accountsArray = accounts;\n    } else if (typeof accounts === \"object\" && accounts.address) {\n        // Handle case where a single wallet object is passed\n        accountsArray = [\n            accounts.address\n        ];\n    } else if (typeof accounts === \"object\" && accounts.accounts && Array.isArray(accounts.accounts)) {\n        // Handle case where accounts is wrapped in an object\n        accountsArray = accounts.accounts;\n    } else if (typeof accounts === \"string\") {\n        // Handle case where a single address string is passed\n        accountsArray = [\n            accounts\n        ];\n    } else {\n        console.error(\"Invalid accounts parameter:\", accounts);\n        throw new Error(\"Invalid accounts parameter format\");\n    }\n    // Final validation after normalization\n    if (accountsArray.length === 0) {\n        throw new Error(\"Empty accounts array after normalization\");\n    }\n    if (typeof localStorage === \"undefined\") {\n        throw new Error(\"Local storage is not available in this environment\");\n    }\n    try {\n        // Get existing wallet data\n        let walletData;\n        try {\n            const storedData = localStorage.getItem(\"walletData\");\n            walletData = storedData ? JSON.parse(storedData) : {};\n        } catch (e) {\n            console.warn(\"Failed to parse existing wallet data, initializing new structure\", e);\n            walletData = {};\n        }\n        // Initialize wallets object if it doesn't exist\n        if (!walletData.wallets) {\n            walletData.wallets = {};\n        }\n        // Initialize wallet type array if it doesn't exist\n        if (!walletData.wallets[walletType] || !Array.isArray(walletData.wallets[walletType])) {\n            walletData.wallets[walletType] = [];\n        }\n        // Each account needs to be a proper wallet object\n        accountsArray.forEach((account)=>{\n            if (!account) return; // Skip null/undefined entries\n            // Handle various account formats\n            const accountStr = typeof account === \"string\" ? account : account.address || account.publicKey || account.toString();\n            // Normalize address format\n            const address = String(accountStr).toLowerCase();\n            // Create a displayAddress for UI\n            const displayAddress = address.length > 10 ? \"\".concat(address.substring(0, 6), \"...\").concat(address.substring(address.length - 4)) : address;\n            // Check if wallet already exists\n            const existingIndex = walletData.wallets[walletType] ? walletData.wallets[walletType].findIndex((wallet)=>wallet && typeof wallet === \"object\" && wallet.address && wallet.address.toLowerCase() === address.toLowerCase()) : -1;\n            // If wallet doesn't exist, create a new wallet object with all required properties\n            if (existingIndex === -1) {\n                // Generate a unique ID\n                const uniqueId = \"\".concat(walletType, \"-\").concat(address.substring(2, 10));\n                // Create a proper wallet object with all required fields\n                const walletObj = {\n                    id: uniqueId,\n                    address: address,\n                    displayAddress: displayAddress,\n                    fullAddress: address,\n                    type: walletType === \"metamask\" ? \"evm\" : walletType,\n                    name: \"\".concat(walletType === \"metamask\" ? \"MetaMask\" : \"Wallet\", \" \").concat(displayAddress),\n                    chain: walletType === \"metamask\" ? \"ethereum\" : \"unknown\",\n                    connected: true,\n                    connectedAt: new Date().toISOString()\n                };\n                // Initialize the array if needed\n                if (!Array.isArray(walletData.wallets[walletType])) {\n                    walletData.wallets[walletType] = [];\n                }\n                // Add the wallet object\n                walletData.wallets[walletType].push(walletObj);\n            }\n        });\n        // Update timestamp\n        walletData.timestamp = Date.now();\n        // Save to localStorage\n        localStorage.setItem(\"walletData\", JSON.stringify(walletData));\n        console.log(\"Saved wallet connection:\", walletType, accountsArray, walletData);\n        return true;\n    } catch (error) {\n        const enhancedError = new Error(\"Failed to save wallet connection: \".concat(error.message));\n        enhancedError.originalError = error;\n        enhancedError.walletType = walletType;\n        enhancedError.accounts = accountsArray;\n        throw enhancedError;\n    }\n}\n/**\n * Connect to MetaMask wallet\n * @returns {Promise<Object>} Connected wallet info\n * @throws {Error} If MetaMask is not installed or connection fails\n */ async function connectMetaMask() {\n    var _window_ethereum, _window_ethereum1, _window_ethereum_providers, _window_ethereum2;\n    if (false) {}\n    // Detect browser environment\n    const isSafari = /^((?!chrome|android).)*safari/i.test(navigator.userAgent);\n    const isMobile = /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);\n    // Log ethereum provider details to help with debugging\n    console.log(\"Environment check:\", {\n        hasEthereum: !!window.ethereum,\n        isMetaMask: (_window_ethereum = window.ethereum) === null || _window_ethereum === void 0 ? void 0 : _window_ethereum.isMetaMask,\n        hasProviders: !!((_window_ethereum1 = window.ethereum) === null || _window_ethereum1 === void 0 ? void 0 : _window_ethereum1.providers),\n        providerCount: (_window_ethereum2 = window.ethereum) === null || _window_ethereum2 === void 0 ? void 0 : (_window_ethereum_providers = _window_ethereum2.providers) === null || _window_ethereum_providers === void 0 ? void 0 : _window_ethereum_providers.length,\n        userAgent: navigator.userAgent,\n        isSafari,\n        isMobile\n    });\n    if (!window.ethereum) {\n        if (isMobile) {\n            throw new Error(\"MetaMask not detected. On mobile, please use the MetaMask mobile app browser.\");\n        } else {\n            throw new Error(\"MetaMask is not installed. Please install the MetaMask browser extension to use this feature.\");\n        }\n    }\n    // If we have multiple providers (common with multiple wallets installed)\n    // explicitly try to find MetaMask\n    let provider = window.ethereum;\n    if (window.ethereum.providers) {\n        const metaMaskProvider = window.ethereum.providers.find((p)=>p.isMetaMask);\n        if (metaMaskProvider) {\n            console.log(\"Using dedicated MetaMask provider from multiple providers\");\n            provider = metaMaskProvider;\n        }\n    }\n    try {\n        console.log(\"Requesting MetaMask accounts...\");\n        // First, try to force disconnect to ensure we get a fresh connection popup\n        try {\n            // Force disconnect from MetaMask to ensure the popup shows\n            if (provider.isConnected && provider.isConnected()) {\n                console.log(\"Provider already connected, disconnecting first to force re-auth...\");\n                try {\n                    // Try wallet-specific disconnection methods\n                    if (provider.disconnect && typeof provider.disconnect === \"function\") {\n                        await provider.disconnect();\n                    }\n                } catch (disconnectError) {\n                    console.log(\"Disconnect attempt before connect (expected):\", disconnectError);\n                }\n            }\n            // Clear any existing permissions from MetaMask\n            try {\n                // Request to clear permissions, which forces a new popup\n                await provider.request({\n                    method: \"wallet_revokePermissions\",\n                    params: [\n                        {\n                            eth_accounts: {}\n                        }\n                    ]\n                });\n            } catch (permError) {\n                console.log(\"Permission revocation attempt (expected):\", permError);\n            }\n        } catch (preConnectErr) {\n            console.log(\"Pre-connection cleanup (non-critical):\", preConnectErr);\n        }\n        // Force MetaMask to show popup by using specific params\n        const requestAccountsOptions = {\n            method: \"eth_requestAccounts\",\n            params: [\n                {\n                    force: true\n                }\n            ] // Try to force approval screen\n        };\n        // Add a delay to ensure browser processes user interaction\n        await new Promise((resolve)=>setTimeout(resolve, 200));\n        // Request account access with forceApproval parameter to always show the popup\n        console.log(\"Calling ethereum.request with provider to force auth popup\");\n        const accounts = await provider.request(requestAccountsOptions);\n        console.log(\"MetaMask returned accounts:\", accounts);\n        if (!accounts || accounts.length === 0) {\n            throw new Error(\"No accounts found. Please unlock MetaMask and try again.\");\n        }\n        // Get the connected wallet address\n        const address = accounts[0];\n        if (!address) {\n            throw new Error(\"Failed to get wallet address\");\n        }\n        // Get the current chain ID\n        const chainIdHex = await provider.request({\n            method: \"eth_chainId\"\n        });\n        const chainId = parseInt(chainIdHex, 16);\n        let chainName = \"unknown\";\n        // Map chain ID to name\n        const chainMap = {\n            1: \"ethereum\",\n            5: \"goerli\",\n            11155111: \"sepolia\",\n            137: \"polygon\",\n            80001: \"mumbai\",\n            42161: \"arbitrum\",\n            421613: \"arbitrum-goerli\"\n        };\n        if (chainMap[chainId]) {\n            chainName = chainMap[chainId];\n        }\n        // Create wallet object for return value and storage\n        const displayAddress = address.length > 10 ? \"\".concat(address.substring(0, 6), \"...\").concat(address.substring(address.length - 4)) : address;\n        const wallet = {\n            id: \"metamask-\".concat(address.substring(2, 10)),\n            address: address,\n            displayAddress: displayAddress,\n            fullAddress: address,\n            type: \"evm\",\n            provider: \"metamask\",\n            name: \"MetaMask \".concat(displayAddress),\n            chain: chainName,\n            chainId,\n            connected: true,\n            connectedAt: new Date().toISOString()\n        };\n        // Save a full wallet object instead of just the address\n        await saveWalletConnection(\"metamask\", [\n            wallet\n        ]);\n        return wallet;\n    } catch (error) {\n        console.error(\"MetaMask connection error:\", error);\n        // Handle specific MetaMask errors\n        if (error.code === 4001) {\n            // User rejected the request\n            throw new Error(\"Connection rejected by user. Please try again.\");\n        } else if (error.code === -32002) {\n            // Request already pending\n            throw new Error(\"A connection request is already pending. Please check MetaMask.\");\n        } else if (error.code === -32603) {\n            // Internal error\n            throw new Error(\"MetaMask encountered an internal error. Please try reloading the page.\");\n        } else if (error.message && error.message.includes(\"Already processing\")) {\n            // Another common MetaMask error\n            throw new Error(\"MetaMask is busy. Please wait and try again in a few moments.\");\n        }\n        const enhancedError = new Error(\"Failed to connect to MetaMask: \".concat(error.message || \"Unknown error\"));\n        enhancedError.originalError = error;\n        enhancedError.code = error.code;\n        throw enhancedError;\n    }\n}\n/**\n * Disconnect a wallet by type and address\n * @param {string} walletType - Type of wallet (evm, solana)\n * @param {string} address - Wallet address to disconnect\n * @returns {Promise<boolean>} Success or failure\n * @throws {Error} If parameters are invalid or disconnection fails\n */ async function disconnectWallet(walletType, address) {\n    if (!walletType) {\n        throw new Error(\"walletType is required\");\n    }\n    if (!address) {\n        throw new Error(\"address is required\");\n    }\n    // Handle different wallet types\n    if (walletType === \"evm\") {\n        // Disconnect EVM wallet (MetaMask, etc.)\n        if ( true && window.ethereum) {\n            try {\n                // Some providers have a disconnect method\n                if (window.ethereum.disconnect && typeof window.ethereum.disconnect === \"function\") {\n                    await window.ethereum.disconnect();\n                }\n                // For wagmi integration\n                if (window.wagmiDisconnect && typeof window.wagmiDisconnect === \"function\") {\n                    await window.wagmiDisconnect();\n                }\n            } catch (error) {\n                console.warn(\"Could not disconnect from provider directly:\", error.message);\n            // Continue to remove from local storage even if provider disconnect fails\n            }\n        }\n    } else if (walletType === \"solana\") {\n        // Disconnect Solana wallet (Phantom, etc.)\n        if ( true && window.solana) {\n            try {\n                // Try to disconnect if the wallet supports it\n                if (window.solana.disconnect && typeof window.solana.disconnect === \"function\") {\n                    await window.solana.disconnect();\n                }\n            } catch (error) {\n                console.warn(\"Could not disconnect Solana wallet:\", error.message);\n            // Continue to remove from local storage even if wallet disconnect fails\n            }\n        }\n    }\n    // Update localStorage regardless of provider disconnect result\n    if (typeof localStorage === \"undefined\") {\n        throw new Error(\"Local storage is not available in this environment\");\n    }\n    try {\n        const walletDataStr = localStorage.getItem(\"walletData\");\n        if (walletDataStr) {\n            const walletData = JSON.parse(walletDataStr);\n            // Handle both old and new formats\n            if (Array.isArray(walletData)) {\n                // Old format - direct array of wallets\n                const updatedWallets = walletData.filter((wallet)=>!(wallet.type === walletType && (wallet.address === address || wallet.fullAddress === address)));\n                localStorage.setItem(\"walletData\", JSON.stringify(updatedWallets));\n            } else if (walletData && typeof walletData === \"object\" && walletData.wallets) {\n                // New format - wallets organized by wallet type\n                const normalizedAddress = address.toLowerCase();\n                // Find the wallet type that might contain this address\n                Object.keys(walletData.wallets).forEach((type)=>{\n                    if (Array.isArray(walletData.wallets[type])) {\n                        // Remove matching wallet objects or addresses\n                        walletData.wallets[type] = walletData.wallets[type].filter((wallet)=>{\n                            if (typeof wallet === \"string\") {\n                                return wallet.toLowerCase() !== normalizedAddress;\n                            } else if (wallet && typeof wallet === \"object\") {\n                                const walletAddr = (wallet.address || wallet.fullAddress || \"\").toLowerCase();\n                                return !(walletAddr === normalizedAddress || wallet.type === walletType && walletAddr === normalizedAddress);\n                            }\n                            return true;\n                        });\n                    }\n                });\n                localStorage.setItem(\"walletData\", JSON.stringify(walletData));\n            }\n        }\n        // Clear other wallet-related localStorage flags to prevent auto-reconnect\n        if (walletType === \"metamask\" || walletType === \"evm\") {\n            // Clear wagmi connection data to prevent auto-reconnect\n            localStorage.removeItem(\"wagmi.connected\");\n            localStorage.removeItem(\"wagmi.connectors\");\n            localStorage.removeItem(\"wagmi.injected.shimDisconnect\");\n            localStorage.removeItem(\"wagmi.store\");\n            localStorage.removeItem(\"wagmi.wallet\");\n            // Remove the userInitiatedConnection flag to prevent re-scanning\n            localStorage.removeItem(\"userInitiatedConnection\");\n            // Remove MetaMask-specific local storage data\n            localStorage.removeItem(\"WALLETCONNECT_DEEPLINK_CHOICE\");\n            localStorage.removeItem(\"metamask-disconnected\");\n            // Set flag to indicate user has explicitly disconnected wallets\n            // This prevents auto-reconnection on page refresh\n            localStorage.setItem(\"user_disconnected_wallets\", \"true\");\n        } else if (walletType === \"phantom\" || walletType === \"solana\") {\n            // Remove Phantom-specific storage\n            localStorage.removeItem(\"phantomDiscoveredWallets\");\n            localStorage.removeItem(\"phantomWalletState\");\n            // Set disconnection flag for Solana wallets too\n            localStorage.setItem(\"user_disconnected_wallets\", \"true\");\n        }\n        console.log(\"Disconnected wallet: \".concat(walletType, \" - \").concat(address));\n        return true;\n    } catch (error) {\n        const enhancedError = new Error(\"Failed to update wallet data: \".concat(error.message));\n        enhancedError.originalError = error;\n        enhancedError.walletType = walletType;\n        enhancedError.address = address;\n        throw enhancedError;\n    }\n}\n/**\n * Scan for assets across multiple blockchains\n * @returns {Promise<Array>} Array of found assets\n * @throws {Error} If scanning fails\n */ async function scanMultiChainAssets() {\n    throw new Error(\"scanMultiChainAssets function not implemented\");\n}\n/**\n * Convert cryptocurrency asset values to USD\n * @param {Object} assets - Assets to convert\n * @returns {Promise<Object>} USD values for assets\n * @throws {Error} If conversion fails\n */ async function convertAssetsToUSD(assets) {\n    if (!assets) {\n        throw new Error(\"Assets parameter is required\");\n    }\n    throw new Error(\"convertAssetsToUSD function not implemented\");\n}\n/**\n * Generate a proof hash for verification\n * @param {Object} data - Data to hash\n * @returns {string} Generated hash\n * @throws {Error} If hash generation fails\n */ function generateProofHash(data) {\n    if (!data) {\n        throw new Error(\"Data parameter is required\");\n    }\n    throw new Error(\"generateProofHash function not implemented\");\n}\n/**\n * Check if MetaMask is available and working\n * @returns {Promise<boolean>} true if MetaMask is available and responding\n */ async function isMetaMaskAvailable() {\n    if (false) {}\n    // Check for ethereum object\n    if (!window.ethereum) {\n        return false;\n    }\n    // Find the MetaMask provider if we have multiple providers\n    let provider = window.ethereum;\n    if (window.ethereum.providers) {\n        const metaMaskProvider = window.ethereum.providers.find((p)=>p.isMetaMask);\n        if (metaMaskProvider) {\n            provider = metaMaskProvider;\n        } else if (!window.ethereum.isMetaMask) {\n            return false; // No MetaMask provider found\n        }\n    } else if (!window.ethereum.isMetaMask) {\n        return false; // Not MetaMask\n    }\n    // Test if the provider is responding\n    try {\n        await provider.request({\n            method: \"eth_chainId\"\n        });\n        return true;\n    } catch (err) {\n        console.warn(\"MetaMask health check failed:\", err);\n        return false;\n    }\n}\n/**\n * Generate a temporary wallet for proof submission\n * @returns {Promise<Object>} Temporary wallet\n * @throws {Error} If wallet generation fails\n */ async function generateTemporaryWallet() {\n    throw new Error(\"generateTemporaryWallet function not implemented\");\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = __webpack_module__.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                __webpack_module__.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                __webpack_module__.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        __webpack_module__.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    __webpack_module__.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///../common/dist/utils/walletHelpers.js\n"));

/***/ })

});