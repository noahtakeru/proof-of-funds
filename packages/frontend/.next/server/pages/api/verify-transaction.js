"use strict";(()=>{var e={};e.id=296,e.ids=[296],e.modules={145:e=>{e.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},6835:(e,t)=>{Object.defineProperty(t,"l",{enumerable:!0,get:function(){return function e(t,n){return n in t?t[n]:"then"in t&&"function"==typeof t.then?t.then(t=>e(t,n)):"function"==typeof t&&"default"===n?t:void 0}}})},6167:(e,t,n)=>{n.r(t),n.d(t,{config:()=>d,default:()=>m,routeModule:()=>c});var o={};n.r(o),n.d(o,{default:()=>y});var r=n(9150),a=n(1631),s=n(6835);let i=require("ethers"),l="0xD6bd1eFCE3A2c4737856724f96F39037a3564890",u=[{inputs:[{internalType:"enum ProofOfFunds.ProofType",name:"_proofType",type:"uint8"},{internalType:"bytes32",name:"_proofHash",type:"bytes32"},{internalType:"uint256",name:"_expiryTime",type:"uint256"},{internalType:"uint256",name:"_thresholdAmount",type:"uint256"},{internalType:"string",name:"_signatureMessage",type:"string"},{internalType:"bytes",name:"_signature",type:"bytes"}],name:"submitProof",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"_user",type:"address"}],name:"getProof",outputs:[{internalType:"address",name:"user",type:"address"},{internalType:"uint256",name:"timestamp",type:"uint256"},{internalType:"uint256",name:"expiryTime",type:"uint256"},{internalType:"bytes32",name:"proofHash",type:"bytes32"},{internalType:"enum ProofOfFunds.ProofType",name:"proofType",type:"uint8"},{internalType:"uint256",name:"thresholdAmount",type:"uint256"},{internalType:"bool",name:"isRevoked",type:"bool"},{internalType:"string",name:"signatureMessage",type:"string"},{internalType:"bytes",name:"signature",type:"bytes"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"_user",type:"address"},{internalType:"uint256",name:"_claimedAmount",type:"uint256"}],name:"verifyStandardProof",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"_user",type:"address"},{internalType:"uint256",name:"_minimumAmount",type:"uint256"}],name:"verifyThresholdProof",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"_user",type:"address"},{internalType:"uint256",name:"_maximumAmount",type:"uint256"}],name:"verifyMaximumProof",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"_user",type:"address"},{internalType:"uint256",name:"_amount",type:"uint256"},{internalType:"enum ProofOfFunds.ProofType",name:"_proofType",type:"uint8"}],name:"generateProofHash",outputs:[{internalType:"bytes32",name:"",type:"bytes32"}],stateMutability:"pure",type:"function"},{inputs:[{internalType:"string",name:"_reason",type:"string"}],name:"revokeProof",outputs:[],stateMutability:"nonpayable",type:"function"},{inputs:[{internalType:"address",name:"_user",type:"address"}],name:"isProofValid",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"},{inputs:[{internalType:"address",name:"_user",type:"address"},{internalType:"string",name:"_message",type:"string"}],name:"verifySignature",outputs:[{internalType:"bool",name:"",type:"bool"}],stateMutability:"view",type:"function"}],p=["https://polygon-amoy.g.alchemy.com/v2/demo","https://polygon-amoy.infura.io/v3/9aa3d95b3bc440fa88ea12eaa4456161","https://polygon-amoy-api.gateway.fm/v4/2ce4fdf25cca5a5b8c59756d98fe6b42","https://rpc-amoy.polygon.technology"];async function y(e,t){if("POST"!==e.method)return t.status(405).json({error:"Method not allowed"});let{txHash:n}=e.body;if(!n)return t.status(400).json({error:"Transaction hash is required"});console.log("API: Verifying transaction:",n);let o=null;for(let e of p)try{let r;console.log(`API: Trying RPC URL: ${e}`);let a=new i.ethers.providers.JsonRpcProvider(e);await a.getNetwork();let s=await a.getTransactionReceipt(n);if(!s){console.log(`API: Transaction not found using ${e}`),o=`Transaction not found using ${e}`;continue}if(console.log(`API: Transaction found with ${s.logs?.length||0} logs`),1!==s.status)return t.status(400).json({error:"Transaction failed on the blockchain"});let p=await a.getTransaction(n),y=new i.ethers.utils.Interface(u),m=new i.ethers.Contract(l,u,a),d=s.logs.filter(e=>e.address.toLowerCase()===l.toLowerCase());console.log(`API: Found ${d.length} logs for contract ${l}`);let c=l,f=m;if(0===d.length){let e=[...new Set(s.logs.map(e=>e.address.toLowerCase()))];if(console.log("API: Unique addresses in logs:",e),e.length>0){let t=s.logs.filter(t=>t.address.toLowerCase()===e[0].toLowerCase());if(t.length>0)try{let n=y.parseLog(t[0]);console.log("API: Successfully parsed log with alternate address:",n.name),c=e[0],f=new i.ethers.Contract(c,u,a),d.push(...t)}catch(e){console.log("API: Could not parse logs from alternate contract:",e.message)}}if(0===d.length){console.log("API: No logs could be parsed with our ABI"),s.logs.forEach((e,t)=>{console.log(`API: Log ${t} from ${e.address}: Topics: ${JSON.stringify(e.topics)}`)}),o="No logs found for the proof contract - CONTRACT_ADDRESS may be incorrect";continue}}let g=[];d.forEach(e=>{try{let t=y.parseLog(e);console.log("API: Found event:",t.name),g.push({log:e,parsedLog:t})}catch(e){console.log("API: Couldn't parse log:",e.message)}});let h=g.find(e=>"ProofSubmitted"===e.parsedLog.name||e.parsedLog.name.includes("Proof"));if(!h){console.log("API: No ProofSubmitted event found"),o="No proof submission found in this transaction";continue}let T=h.parsedLog;for(let e in console.log("API: Found proof event:",T.name),console.log("API: Event arguments:"),T.args)if(isNaN(parseInt(e))){let t=T.args[e],n=t&&t._isBigNumber?t.toString():t;console.log(`  ${e}: ${n}`)}let P=T.args.user||T.args.wallet||T.args.owner,b=T.args.proofType?T.args.proofType._isBigNumber?T.args.proofType.toNumber():T.args.proofType:0,A=T.args.proofHash||T.args.hash;if(!P){o="Could not find user address in event data";continue}let v="0",w="ETH";if(p&&p.data)try{let e=y.parseTransaction({data:p.data});console.log("API: Decoded function call:",e.name),e.args&&e.args.thresholdAmount?v=i.ethers.utils.formatEther(e.args.thresholdAmount):e.args&&e.args.amount&&(v=i.ethers.utils.formatEther(e.args.amount)),e.args&&e.args.tokenSymbol&&(w=e.args.tokenSymbol)}catch(e){console.log("API: Could not decode transaction input:",e.message)}try{r=await f.getProof(P),console.log("API: Proof data from contract:",r)}catch(e){console.error("API: Error getting proof data from contract:",e),r={thresholdAmount:i.ethers.BigNumber.from(0),timestamp:null,expiryTime:null}}let _=null;r.timestamp&&r.timestamp._isBigNumber&&(_=new Date(1e3*r.timestamp.toNumber()).toLocaleString());let I=null;r.expiryTime&&r.expiryTime._isBigNumber&&(I=new Date(1e3*r.expiryTime.toNumber()).toLocaleString());let S="0";r.thresholdAmount&&r.thresholdAmount._isBigNumber&&(S=i.ethers.utils.formatEther(r.thresholdAmount));let E={user:P,proofType:b,proofHash:A,thresholdAmount:"0"!==S?S:"0",amount:"0"!==v?v:S,tokenSymbol:w,timestamp:_,expiryTime:I,txHash:n,contractAddress:c};return t.status(200).json({success:!0,proofDetails:E})}catch(t){console.error(`API Error with ${e}:`,t.message),o=t.message}return console.error("All API RPC connections failed. Last error:",o),t.status(500).json({error:o||"An error occurred while verifying the transaction",message:"Could not connect to any blockchain providers. Please try again later."})}let m=(0,s.l)(o,"default"),d=(0,s.l)(o,"config"),c=new r.PagesAPIRouteModule({definition:{kind:a.x.PAGES_API,page:"/api/verify-transaction",pathname:"/api/verify-transaction",bundlePath:"",filename:""},userland:o})},1631:(e,t)=>{var n;Object.defineProperty(t,"x",{enumerable:!0,get:function(){return n}}),function(e){e.PAGES="PAGES",e.PAGES_API="PAGES_API",e.APP_PAGE="APP_PAGE",e.APP_ROUTE="APP_ROUTE"}(n||(n={}))},9150:(e,t,n)=>{e.exports=n(145)}};var t=require("../../webpack-api-runtime.js");t.C(e);var n=t(t.s=6167);module.exports=n})();