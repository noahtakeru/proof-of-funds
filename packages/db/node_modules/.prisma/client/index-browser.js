
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 4.16.2
 * Query Engine version: 4bc8b6e1b66cb932731fb1bdbbc550d1e010de81
 */
Prisma.prismaVersion = {
  client: "4.16.2",
  engine: "4bc8b6e1b66cb932731fb1bdbbc550d1e010de81"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  throw new Error(`Extensions.getExtensionContext is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.defineExtension = () => {
  throw new Error(`Extensions.defineExtension is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  address: 'address',
  createdAt: 'createdAt',
  lastLoginAt: 'lastLoginAt',
  isActive: 'isActive',
  permissions: 'permissions',
  settings: 'settings'
};

exports.Prisma.WalletScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  address: 'address',
  chainId: 'chainId',
  type: 'type',
  encryptedPrivateKey: 'encryptedPrivateKey',
  keyId: 'keyId',
  createdAt: 'createdAt',
  lastUsedAt: 'lastUsedAt',
  isArchived: 'isArchived',
  balance: 'balance',
  nonce: 'nonce'
};

exports.Prisma.ProofScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  referenceId: 'referenceId',
  createdAt: 'createdAt',
  expiresAt: 'expiresAt',
  proofType: 'proofType',
  isRevoked: 'isRevoked',
  revokedAt: 'revokedAt',
  revocationReason: 'revocationReason',
  encryptedData: 'encryptedData',
  encryptionKeyId: 'encryptionKeyId',
  tempWalletId: 'tempWalletId',
  transactionHash: 'transactionHash',
  merkleRoot: 'merkleRoot',
  merklePath: 'merklePath',
  batchId: 'batchId',
  warningFlags: 'warningFlags',
  originalWallets: 'originalWallets',
  status: 'status'
};

exports.Prisma.VerificationScalarFieldEnum = {
  id: 'id',
  proofId: 'proofId',
  referenceId: 'referenceId',
  verifierAddress: 'verifierAddress',
  verifiedAt: 'verifiedAt',
  isSuccessful: 'isSuccessful',
  failureReason: 'failureReason',
  verificationResult: 'verificationResult'
};

exports.Prisma.BatchScalarFieldEnum = {
  id: 'id',
  createdAt: 'createdAt',
  processedAt: 'processedAt',
  status: 'status',
  merkleRoot: 'merkleRoot',
  transactionHash: 'transactionHash',
  tempWalletId: 'tempWalletId',
  gasUsed: 'gasUsed',
  gasPrice: 'gasPrice',
  totalCost: 'totalCost',
  retryCount: 'retryCount',
  maxRetries: 'maxRetries'
};

exports.Prisma.OrganizationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  apiKey: 'apiKey',
  settings: 'settings'
};

exports.Prisma.OrganizationUserScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  organizationId: 'organizationId',
  role: 'role',
  joinedAt: 'joinedAt'
};

exports.Prisma.ProofTemplateScalarFieldEnum = {
  id: 'id',
  organizationId: 'organizationId',
  name: 'name',
  description: 'description',
  proofType: 'proofType',
  threshold: 'threshold',
  expiryPeriod: 'expiryPeriod',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  isActive: 'isActive',
  settings: 'settings'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  action: 'action',
  entityType: 'entityType',
  entityId: 'entityId',
  userId: 'userId',
  ipAddress: 'ipAddress',
  userAgent: 'userAgent',
  metadata: 'metadata',
  timestamp: 'timestamp'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.WalletType = {
  USER_CONNECTED: 'USER_CONNECTED',
  TEMPORARY: 'TEMPORARY'
};

exports.ProofType = {
  STANDARD: 'STANDARD',
  THRESHOLD: 'THRESHOLD',
  MAXIMUM: 'MAXIMUM',
  ZERO_KNOWLEDGE: 'ZERO_KNOWLEDGE'
};

exports.ProofStatus = {
  PENDING: 'PENDING',
  SUBMITTED: 'SUBMITTED',
  CONFIRMED: 'CONFIRMED',
  FAILED: 'FAILED',
  EXPIRED: 'EXPIRED',
  REVOKED: 'REVOKED'
};

exports.BatchStatus = {
  PENDING: 'PENDING',
  PROCESSING: 'PROCESSING',
  CONFIRMED: 'CONFIRMED',
  FAILED: 'FAILED'
};

exports.OrgRole = {
  OWNER: 'OWNER',
  ADMIN: 'ADMIN',
  MEMBER: 'MEMBER'
};

exports.Prisma.ModelName = {
  User: 'User',
  Wallet: 'Wallet',
  Proof: 'Proof',
  Verification: 'Verification',
  Batch: 'Batch',
  Organization: 'Organization',
  OrganizationUser: 'OrganizationUser',
  ProofTemplate: 'ProofTemplate',
  AuditLog: 'AuditLog'
};

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
