
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions

export type PrismaPromise<T> = $Public.PrismaPromise<T>


export type UserPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "User"
  objects: {
    wallets: WalletPayload<ExtArgs>[]
    proofs: ProofPayload<ExtArgs>[]
    organizationUsers: OrganizationUserPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    address: string
    createdAt: Date
    lastLoginAt: Date | null
    isActive: boolean
    permissions: string[]
    settings: Prisma.JsonValue
  }, ExtArgs["result"]["user"]>
  composites: {}
}

/**
 * Model User
 * 
 */
export type User = runtime.Types.DefaultSelection<UserPayload>
export type WalletPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Wallet"
  objects: {
    user: UserPayload<ExtArgs>
    proofs: ProofPayload<ExtArgs>[]
    batches: BatchPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    userId: string
    address: string
    chainId: number
    type: WalletType
    encryptedPrivateKey: string | null
    keyId: string | null
    createdAt: Date
    lastUsedAt: Date
    isArchived: boolean
    balance: string | null
    nonce: number | null
  }, ExtArgs["result"]["wallet"]>
  composites: {}
}

/**
 * Model Wallet
 * 
 */
export type Wallet = runtime.Types.DefaultSelection<WalletPayload>
export type ProofPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Proof"
  objects: {
    user: UserPayload<ExtArgs>
    tempWallet: WalletPayload<ExtArgs>
    batch: BatchPayload<ExtArgs> | null
    verifications: VerificationPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    userId: string
    referenceId: string
    createdAt: Date
    expiresAt: Date
    proofType: ProofType
    isRevoked: boolean
    revokedAt: Date | null
    revocationReason: string | null
    encryptedData: string
    encryptionKeyId: string
    tempWalletId: string
    transactionHash: string | null
    merkleRoot: string | null
    merklePath: Prisma.JsonValue | null
    batchId: string | null
    warningFlags: string[]
    originalWallets: string[]
    status: ProofStatus
  }, ExtArgs["result"]["proof"]>
  composites: {}
}

/**
 * Model Proof
 * 
 */
export type Proof = runtime.Types.DefaultSelection<ProofPayload>
export type VerificationPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Verification"
  objects: {
    proof: ProofPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: string
    proofId: string
    referenceId: string
    verifierAddress: string | null
    verifiedAt: Date
    isSuccessful: boolean
    failureReason: string | null
    verificationResult: Prisma.JsonValue
  }, ExtArgs["result"]["verification"]>
  composites: {}
}

/**
 * Model Verification
 * 
 */
export type Verification = runtime.Types.DefaultSelection<VerificationPayload>
export type BatchPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Batch"
  objects: {
    tempWallet: WalletPayload<ExtArgs>
    proofs: ProofPayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    createdAt: Date
    processedAt: Date | null
    status: BatchStatus
    merkleRoot: string
    transactionHash: string | null
    tempWalletId: string
    gasUsed: string | null
    gasPrice: string | null
    totalCost: string | null
    retryCount: number
    maxRetries: number
  }, ExtArgs["result"]["batch"]>
  composites: {}
}

/**
 * Model Batch
 * 
 */
export type Batch = runtime.Types.DefaultSelection<BatchPayload>
export type OrganizationPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "Organization"
  objects: {
    members: OrganizationUserPayload<ExtArgs>[]
    templates: ProofTemplatePayload<ExtArgs>[]
  }
  scalars: $Extensions.GetResult<{
    id: string
    name: string
    createdAt: Date
    updatedAt: Date
    apiKey: string | null
    settings: Prisma.JsonValue
  }, ExtArgs["result"]["organization"]>
  composites: {}
}

/**
 * Model Organization
 * 
 */
export type Organization = runtime.Types.DefaultSelection<OrganizationPayload>
export type OrganizationUserPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "OrganizationUser"
  objects: {
    user: UserPayload<ExtArgs>
    organization: OrganizationPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: string
    userId: string
    organizationId: string
    role: OrgRole
    joinedAt: Date
  }, ExtArgs["result"]["organizationUser"]>
  composites: {}
}

/**
 * Model OrganizationUser
 * 
 */
export type OrganizationUser = runtime.Types.DefaultSelection<OrganizationUserPayload>
export type ProofTemplatePayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "ProofTemplate"
  objects: {
    organization: OrganizationPayload<ExtArgs>
  }
  scalars: $Extensions.GetResult<{
    id: string
    organizationId: string
    name: string
    description: string | null
    proofType: ProofType
    threshold: string
    expiryPeriod: number
    createdAt: Date
    updatedAt: Date
    isActive: boolean
    settings: Prisma.JsonValue
  }, ExtArgs["result"]["proofTemplate"]>
  composites: {}
}

/**
 * Model ProofTemplate
 * 
 */
export type ProofTemplate = runtime.Types.DefaultSelection<ProofTemplatePayload>
export type AuditLogPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
  name: "AuditLog"
  objects: {}
  scalars: $Extensions.GetResult<{
    id: string
    action: string
    entityType: string
    entityId: string | null
    userId: string | null
    ipAddress: string | null
    userAgent: string | null
    metadata: Prisma.JsonValue | null
    timestamp: Date
  }, ExtArgs["result"]["auditLog"]>
  composites: {}
}

/**
 * Model AuditLog
 * 
 */
export type AuditLog = runtime.Types.DefaultSelection<AuditLogPayload>

/**
 * Enums
 */

export const WalletType: {
  USER_CONNECTED: 'USER_CONNECTED',
  TEMPORARY: 'TEMPORARY'
};

export type WalletType = (typeof WalletType)[keyof typeof WalletType]


export const ProofType: {
  STANDARD: 'STANDARD',
  THRESHOLD: 'THRESHOLD',
  MAXIMUM: 'MAXIMUM',
  ZERO_KNOWLEDGE: 'ZERO_KNOWLEDGE'
};

export type ProofType = (typeof ProofType)[keyof typeof ProofType]


export const ProofStatus: {
  PENDING: 'PENDING',
  SUBMITTED: 'SUBMITTED',
  CONFIRMED: 'CONFIRMED',
  FAILED: 'FAILED',
  EXPIRED: 'EXPIRED',
  REVOKED: 'REVOKED'
};

export type ProofStatus = (typeof ProofStatus)[keyof typeof ProofStatus]


export const BatchStatus: {
  PENDING: 'PENDING',
  PROCESSING: 'PROCESSING',
  CONFIRMED: 'CONFIRMED',
  FAILED: 'FAILED'
};

export type BatchStatus = (typeof BatchStatus)[keyof typeof BatchStatus]


export const OrgRole: {
  OWNER: 'OWNER',
  ADMIN: 'ADMIN',
  MEMBER: 'MEMBER'
};

export type OrgRole = (typeof OrgRole)[keyof typeof OrgRole]


/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  GlobalReject extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined = 'rejectOnNotFound' extends keyof T
    ? T['rejectOnNotFound']
    : false,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => Promise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): Promise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): Promise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => Promise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): Promise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.wallet`: Exposes CRUD operations for the **Wallet** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Wallets
    * const wallets = await prisma.wallet.findMany()
    * ```
    */
  get wallet(): Prisma.WalletDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.proof`: Exposes CRUD operations for the **Proof** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Proofs
    * const proofs = await prisma.proof.findMany()
    * ```
    */
  get proof(): Prisma.ProofDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.verification`: Exposes CRUD operations for the **Verification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Verifications
    * const verifications = await prisma.verification.findMany()
    * ```
    */
  get verification(): Prisma.VerificationDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.batch`: Exposes CRUD operations for the **Batch** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Batches
    * const batches = await prisma.batch.findMany()
    * ```
    */
  get batch(): Prisma.BatchDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.organization`: Exposes CRUD operations for the **Organization** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Organizations
    * const organizations = await prisma.organization.findMany()
    * ```
    */
  get organization(): Prisma.OrganizationDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.organizationUser`: Exposes CRUD operations for the **OrganizationUser** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OrganizationUsers
    * const organizationUsers = await prisma.organizationUser.findMany()
    * ```
    */
  get organizationUser(): Prisma.OrganizationUserDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.proofTemplate`: Exposes CRUD operations for the **ProofTemplate** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProofTemplates
    * const proofTemplates = await prisma.proofTemplate.findMany()
    * ```
    */
  get proofTemplate(): Prisma.ProofTemplateDelegate<GlobalReject, ExtArgs>;

  /**
   * `prisma.auditLog`: Exposes CRUD operations for the **AuditLog** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more AuditLogs
    * const auditLogs = await prisma.auditLog.findMany()
    * ```
    */
  get auditLog(): Prisma.AuditLogDelegate<GlobalReject, ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export type Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export type Args<T, F extends $Public.Operation> = $Public.Args<T, F>
  export type Payload<T, F extends $Public.Operation> = $Public.Payload<T, F>
  export type Result<T, A, F extends $Public.Operation> = $Public.Result<T, A, F>
  export type Exact<T, W> = $Public.Exact<T, W>

  /**
   * Prisma Client JS version: 4.16.2
   * Query Engine version: 4bc8b6e1b66cb932731fb1bdbbc550d1e010de81
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }
  type HasSelect = {
    select: any
  }
  type HasInclude = {
    include: any
  }
  type CheckSelect<T, S, U> = T extends SelectAndInclude
    ? 'Please either choose `select` or `include`'
    : T extends HasSelect
    ? U
    : T extends HasInclude
    ? U
    : S

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => Promise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but with an array
   */
  type PickArray<T, K extends Array<keyof T>> = Prisma__Pick<T, TupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Wallet: 'Wallet',
    Proof: 'Proof',
    Verification: 'Verification',
    Batch: 'Batch',
    Organization: 'Organization',
    OrganizationUser: 'OrganizationUser',
    ProofTemplate: 'ProofTemplate',
    AuditLog: 'AuditLog'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'wallet' | 'proof' | 'verification' | 'batch' | 'organization' | 'organizationUser' | 'proofTemplate' | 'auditLog'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: UserPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Wallet: {
        payload: WalletPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.WalletFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<WalletPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.WalletFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<WalletPayload>
          }
          findFirst: {
            args: Prisma.WalletFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<WalletPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.WalletFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<WalletPayload>
          }
          findMany: {
            args: Prisma.WalletFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<WalletPayload>[]
          }
          create: {
            args: Prisma.WalletCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<WalletPayload>
          }
          createMany: {
            args: Prisma.WalletCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.WalletDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<WalletPayload>
          }
          update: {
            args: Prisma.WalletUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<WalletPayload>
          }
          deleteMany: {
            args: Prisma.WalletDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.WalletUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.WalletUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<WalletPayload>
          }
          aggregate: {
            args: Prisma.WalletAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateWallet>
          }
          groupBy: {
            args: Prisma.WalletGroupByArgs<ExtArgs>,
            result: $Utils.Optional<WalletGroupByOutputType>[]
          }
          count: {
            args: Prisma.WalletCountArgs<ExtArgs>,
            result: $Utils.Optional<WalletCountAggregateOutputType> | number
          }
        }
      }
      Proof: {
        payload: ProofPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.ProofFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProofPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProofFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProofPayload>
          }
          findFirst: {
            args: Prisma.ProofFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProofPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProofFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProofPayload>
          }
          findMany: {
            args: Prisma.ProofFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProofPayload>[]
          }
          create: {
            args: Prisma.ProofCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProofPayload>
          }
          createMany: {
            args: Prisma.ProofCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ProofDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProofPayload>
          }
          update: {
            args: Prisma.ProofUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProofPayload>
          }
          deleteMany: {
            args: Prisma.ProofDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ProofUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ProofUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProofPayload>
          }
          aggregate: {
            args: Prisma.ProofAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProof>
          }
          groupBy: {
            args: Prisma.ProofGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProofGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProofCountArgs<ExtArgs>,
            result: $Utils.Optional<ProofCountAggregateOutputType> | number
          }
        }
      }
      Verification: {
        payload: VerificationPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.VerificationFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VerificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VerificationFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VerificationPayload>
          }
          findFirst: {
            args: Prisma.VerificationFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VerificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VerificationFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VerificationPayload>
          }
          findMany: {
            args: Prisma.VerificationFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VerificationPayload>[]
          }
          create: {
            args: Prisma.VerificationCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VerificationPayload>
          }
          createMany: {
            args: Prisma.VerificationCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.VerificationDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VerificationPayload>
          }
          update: {
            args: Prisma.VerificationUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VerificationPayload>
          }
          deleteMany: {
            args: Prisma.VerificationDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.VerificationUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.VerificationUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<VerificationPayload>
          }
          aggregate: {
            args: Prisma.VerificationAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateVerification>
          }
          groupBy: {
            args: Prisma.VerificationGroupByArgs<ExtArgs>,
            result: $Utils.Optional<VerificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.VerificationCountArgs<ExtArgs>,
            result: $Utils.Optional<VerificationCountAggregateOutputType> | number
          }
        }
      }
      Batch: {
        payload: BatchPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.BatchFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<BatchPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BatchFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<BatchPayload>
          }
          findFirst: {
            args: Prisma.BatchFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<BatchPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BatchFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<BatchPayload>
          }
          findMany: {
            args: Prisma.BatchFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<BatchPayload>[]
          }
          create: {
            args: Prisma.BatchCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<BatchPayload>
          }
          createMany: {
            args: Prisma.BatchCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.BatchDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<BatchPayload>
          }
          update: {
            args: Prisma.BatchUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<BatchPayload>
          }
          deleteMany: {
            args: Prisma.BatchDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.BatchUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.BatchUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<BatchPayload>
          }
          aggregate: {
            args: Prisma.BatchAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateBatch>
          }
          groupBy: {
            args: Prisma.BatchGroupByArgs<ExtArgs>,
            result: $Utils.Optional<BatchGroupByOutputType>[]
          }
          count: {
            args: Prisma.BatchCountArgs<ExtArgs>,
            result: $Utils.Optional<BatchCountAggregateOutputType> | number
          }
        }
      }
      Organization: {
        payload: OrganizationPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.OrganizationFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<OrganizationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrganizationFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<OrganizationPayload>
          }
          findFirst: {
            args: Prisma.OrganizationFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<OrganizationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrganizationFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<OrganizationPayload>
          }
          findMany: {
            args: Prisma.OrganizationFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<OrganizationPayload>[]
          }
          create: {
            args: Prisma.OrganizationCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<OrganizationPayload>
          }
          createMany: {
            args: Prisma.OrganizationCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.OrganizationDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<OrganizationPayload>
          }
          update: {
            args: Prisma.OrganizationUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<OrganizationPayload>
          }
          deleteMany: {
            args: Prisma.OrganizationDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.OrganizationUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.OrganizationUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<OrganizationPayload>
          }
          aggregate: {
            args: Prisma.OrganizationAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateOrganization>
          }
          groupBy: {
            args: Prisma.OrganizationGroupByArgs<ExtArgs>,
            result: $Utils.Optional<OrganizationGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrganizationCountArgs<ExtArgs>,
            result: $Utils.Optional<OrganizationCountAggregateOutputType> | number
          }
        }
      }
      OrganizationUser: {
        payload: OrganizationUserPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.OrganizationUserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<OrganizationUserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrganizationUserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<OrganizationUserPayload>
          }
          findFirst: {
            args: Prisma.OrganizationUserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<OrganizationUserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrganizationUserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<OrganizationUserPayload>
          }
          findMany: {
            args: Prisma.OrganizationUserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<OrganizationUserPayload>[]
          }
          create: {
            args: Prisma.OrganizationUserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<OrganizationUserPayload>
          }
          createMany: {
            args: Prisma.OrganizationUserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.OrganizationUserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<OrganizationUserPayload>
          }
          update: {
            args: Prisma.OrganizationUserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<OrganizationUserPayload>
          }
          deleteMany: {
            args: Prisma.OrganizationUserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.OrganizationUserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.OrganizationUserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<OrganizationUserPayload>
          }
          aggregate: {
            args: Prisma.OrganizationUserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateOrganizationUser>
          }
          groupBy: {
            args: Prisma.OrganizationUserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<OrganizationUserGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrganizationUserCountArgs<ExtArgs>,
            result: $Utils.Optional<OrganizationUserCountAggregateOutputType> | number
          }
        }
      }
      ProofTemplate: {
        payload: ProofTemplatePayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.ProofTemplateFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProofTemplatePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProofTemplateFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProofTemplatePayload>
          }
          findFirst: {
            args: Prisma.ProofTemplateFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProofTemplatePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProofTemplateFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProofTemplatePayload>
          }
          findMany: {
            args: Prisma.ProofTemplateFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProofTemplatePayload>[]
          }
          create: {
            args: Prisma.ProofTemplateCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProofTemplatePayload>
          }
          createMany: {
            args: Prisma.ProofTemplateCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ProofTemplateDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProofTemplatePayload>
          }
          update: {
            args: Prisma.ProofTemplateUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProofTemplatePayload>
          }
          deleteMany: {
            args: Prisma.ProofTemplateDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ProofTemplateUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ProofTemplateUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<ProofTemplatePayload>
          }
          aggregate: {
            args: Prisma.ProofTemplateAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProofTemplate>
          }
          groupBy: {
            args: Prisma.ProofTemplateGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProofTemplateGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProofTemplateCountArgs<ExtArgs>,
            result: $Utils.Optional<ProofTemplateCountAggregateOutputType> | number
          }
        }
      }
      AuditLog: {
        payload: AuditLogPayload<ExtArgs>
        operations: {
          findUnique: {
            args: Prisma.AuditLogFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AuditLogPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AuditLogFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AuditLogPayload>
          }
          findFirst: {
            args: Prisma.AuditLogFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AuditLogPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AuditLogFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AuditLogPayload>
          }
          findMany: {
            args: Prisma.AuditLogFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AuditLogPayload>[]
          }
          create: {
            args: Prisma.AuditLogCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AuditLogPayload>
          }
          createMany: {
            args: Prisma.AuditLogCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AuditLogDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AuditLogPayload>
          }
          update: {
            args: Prisma.AuditLogUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AuditLogPayload>
          }
          deleteMany: {
            args: Prisma.AuditLogDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AuditLogUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AuditLogUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<AuditLogPayload>
          }
          aggregate: {
            args: Prisma.AuditLogAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAuditLog>
          }
          groupBy: {
            args: Prisma.AuditLogGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AuditLogGroupByOutputType>[]
          }
          count: {
            args: Prisma.AuditLogCountArgs<ExtArgs>,
            result: $Utils.Optional<AuditLogCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type RejectOnNotFound = boolean | ((error: Error) => Error)
  export type RejectPerModel = { [P in ModelName]?: RejectOnNotFound }
  export type RejectPerOperation =  { [P in "findUnique" | "findFirst"]?: RejectPerModel | RejectOnNotFound } 
  type IsReject<T> = T extends true ? True : T extends (err: Error) => Error ? True : False
  export type HasReject<
    GlobalRejectSettings extends Prisma.PrismaClientOptions['rejectOnNotFound'],
    LocalRejectSettings,
    Action extends PrismaAction,
    Model extends ModelName
  > = LocalRejectSettings extends RejectOnNotFound
    ? IsReject<LocalRejectSettings>
    : GlobalRejectSettings extends RejectPerOperation
    ? Action extends keyof GlobalRejectSettings
      ? GlobalRejectSettings[Action] extends RejectOnNotFound
        ? IsReject<GlobalRejectSettings[Action]>
        : GlobalRejectSettings[Action] extends RejectPerModel
        ? Model extends keyof GlobalRejectSettings[Action]
          ? IsReject<GlobalRejectSettings[Action][Model]>
          : False
        : False
      : False
    : IsReject<GlobalRejectSettings>
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Configure findUnique/findFirst to throw an error if the query returns null. 
     * @deprecated since 4.0.0. Use `findUniqueOrThrow`/`findFirstOrThrow` methods instead.
     * @example
     * ```
     * // Reject on both findUnique/findFirst
     * rejectOnNotFound: true
     * // Reject only on findFirst with a custom error
     * rejectOnNotFound: { findFirst: (err) => new Error("Custom Error")}
     * // Reject on user.findUnique with a custom error
     * rejectOnNotFound: { findUnique: {User: (err) => new Error("User not found")}}
     * ```
     */
    rejectOnNotFound?: RejectOnNotFound | RejectPerOperation
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findMany'
    | 'findFirst'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => Promise<T>,
  ) => Promise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */


  export type UserCountOutputType = {
    wallets: number
    proofs: number
    organizationUsers: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    wallets?: boolean | UserCountOutputTypeCountWalletsArgs
    proofs?: boolean | UserCountOutputTypeCountProofsArgs
    organizationUsers?: boolean | UserCountOutputTypeCountOrganizationUsersArgs
  }

  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountWalletsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: WalletWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountProofsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ProofWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOrganizationUsersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: OrganizationUserWhereInput
  }



  /**
   * Count Type WalletCountOutputType
   */


  export type WalletCountOutputType = {
    proofs: number
    batches: number
  }

  export type WalletCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    proofs?: boolean | WalletCountOutputTypeCountProofsArgs
    batches?: boolean | WalletCountOutputTypeCountBatchesArgs
  }

  // Custom InputTypes

  /**
   * WalletCountOutputType without action
   */
  export type WalletCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the WalletCountOutputType
     */
    select?: WalletCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * WalletCountOutputType without action
   */
  export type WalletCountOutputTypeCountProofsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ProofWhereInput
  }


  /**
   * WalletCountOutputType without action
   */
  export type WalletCountOutputTypeCountBatchesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: BatchWhereInput
  }



  /**
   * Count Type ProofCountOutputType
   */


  export type ProofCountOutputType = {
    verifications: number
  }

  export type ProofCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    verifications?: boolean | ProofCountOutputTypeCountVerificationsArgs
  }

  // Custom InputTypes

  /**
   * ProofCountOutputType without action
   */
  export type ProofCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProofCountOutputType
     */
    select?: ProofCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ProofCountOutputType without action
   */
  export type ProofCountOutputTypeCountVerificationsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: VerificationWhereInput
  }



  /**
   * Count Type BatchCountOutputType
   */


  export type BatchCountOutputType = {
    proofs: number
  }

  export type BatchCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    proofs?: boolean | BatchCountOutputTypeCountProofsArgs
  }

  // Custom InputTypes

  /**
   * BatchCountOutputType without action
   */
  export type BatchCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the BatchCountOutputType
     */
    select?: BatchCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * BatchCountOutputType without action
   */
  export type BatchCountOutputTypeCountProofsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ProofWhereInput
  }



  /**
   * Count Type OrganizationCountOutputType
   */


  export type OrganizationCountOutputType = {
    members: number
    templates: number
  }

  export type OrganizationCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    members?: boolean | OrganizationCountOutputTypeCountMembersArgs
    templates?: boolean | OrganizationCountOutputTypeCountTemplatesArgs
  }

  // Custom InputTypes

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrganizationCountOutputType
     */
    select?: OrganizationCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountMembersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: OrganizationUserWhereInput
  }


  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountTemplatesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ProofTemplateWhereInput
  }



  /**
   * Models
   */

  /**
   * Model User
   */


  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    address: string | null
    createdAt: Date | null
    lastLoginAt: Date | null
    isActive: boolean | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    address: string | null
    createdAt: Date | null
    lastLoginAt: Date | null
    isActive: boolean | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    address: number
    createdAt: number
    lastLoginAt: number
    isActive: number
    permissions: number
    settings: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    address?: true
    createdAt?: true
    lastLoginAt?: true
    isActive?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    address?: true
    createdAt?: true
    lastLoginAt?: true
    isActive?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    address?: true
    createdAt?: true
    lastLoginAt?: true
    isActive?: true
    permissions?: true
    settings?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: Enumerable<UserOrderByWithAggregationInput>
    by: UserScalarFieldEnum[]
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }


  export type UserGroupByOutputType = {
    id: string
    address: string
    createdAt: Date
    lastLoginAt: Date | null
    isActive: boolean
    permissions: string[]
    settings: JsonValue
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    address?: boolean
    createdAt?: boolean
    lastLoginAt?: boolean
    isActive?: boolean
    permissions?: boolean
    settings?: boolean
    wallets?: boolean | User$walletsArgs<ExtArgs>
    proofs?: boolean | User$proofsArgs<ExtArgs>
    organizationUsers?: boolean | User$organizationUsersArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    address?: boolean
    createdAt?: boolean
    lastLoginAt?: boolean
    isActive?: boolean
    permissions?: boolean
    settings?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    wallets?: boolean | User$walletsArgs<ExtArgs>
    proofs?: boolean | User$proofsArgs<ExtArgs>
    organizationUsers?: boolean | User$organizationUsersArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeArgs<ExtArgs>
  }


  type UserGetPayload<S extends boolean | null | undefined | UserArgs> = $Types.GetResult<UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'User'> extends True ? Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'User'> extends True ? Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<UserPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    wallets<T extends User$walletsArgs<ExtArgs> = {}>(args?: Subset<T, User$walletsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<WalletPayload<ExtArgs>, T, 'findMany', never>| Null>;

    proofs<T extends User$proofsArgs<ExtArgs> = {}>(args?: Subset<T, User$proofsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<ProofPayload<ExtArgs>, T, 'findMany', never>| Null>;

    organizationUsers<T extends User$organizationUsersArgs<ExtArgs> = {}>(args?: Subset<T, User$organizationUsersArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<OrganizationUserPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * User base type for findUnique actions
   */
  export type UserFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUnique
   */
  export interface UserFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends UserFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User base type for findFirst actions
   */
  export type UserFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }

  /**
   * User findFirst
   */
  export interface UserFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends UserFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: Enumerable<UserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: Enumerable<UserScalarFieldEnum>
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: Enumerable<UserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.wallets
   */
  export type User$walletsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WalletInclude<ExtArgs> | null
    where?: WalletWhereInput
    orderBy?: Enumerable<WalletOrderByWithRelationInput>
    cursor?: WalletWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<WalletScalarFieldEnum>
  }


  /**
   * User.proofs
   */
  export type User$proofsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proof
     */
    select?: ProofSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProofInclude<ExtArgs> | null
    where?: ProofWhereInput
    orderBy?: Enumerable<ProofOrderByWithRelationInput>
    cursor?: ProofWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ProofScalarFieldEnum>
  }


  /**
   * User.organizationUsers
   */
  export type User$organizationUsersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrganizationUser
     */
    select?: OrganizationUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrganizationUserInclude<ExtArgs> | null
    where?: OrganizationUserWhereInput
    orderBy?: Enumerable<OrganizationUserOrderByWithRelationInput>
    cursor?: OrganizationUserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<OrganizationUserScalarFieldEnum>
  }


  /**
   * User without action
   */
  export type UserArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
  }



  /**
   * Model Wallet
   */


  export type AggregateWallet = {
    _count: WalletCountAggregateOutputType | null
    _avg: WalletAvgAggregateOutputType | null
    _sum: WalletSumAggregateOutputType | null
    _min: WalletMinAggregateOutputType | null
    _max: WalletMaxAggregateOutputType | null
  }

  export type WalletAvgAggregateOutputType = {
    chainId: number | null
    nonce: number | null
  }

  export type WalletSumAggregateOutputType = {
    chainId: number | null
    nonce: number | null
  }

  export type WalletMinAggregateOutputType = {
    id: string | null
    userId: string | null
    address: string | null
    chainId: number | null
    type: WalletType | null
    encryptedPrivateKey: string | null
    keyId: string | null
    createdAt: Date | null
    lastUsedAt: Date | null
    isArchived: boolean | null
    balance: string | null
    nonce: number | null
  }

  export type WalletMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    address: string | null
    chainId: number | null
    type: WalletType | null
    encryptedPrivateKey: string | null
    keyId: string | null
    createdAt: Date | null
    lastUsedAt: Date | null
    isArchived: boolean | null
    balance: string | null
    nonce: number | null
  }

  export type WalletCountAggregateOutputType = {
    id: number
    userId: number
    address: number
    chainId: number
    type: number
    encryptedPrivateKey: number
    keyId: number
    createdAt: number
    lastUsedAt: number
    isArchived: number
    balance: number
    nonce: number
    _all: number
  }


  export type WalletAvgAggregateInputType = {
    chainId?: true
    nonce?: true
  }

  export type WalletSumAggregateInputType = {
    chainId?: true
    nonce?: true
  }

  export type WalletMinAggregateInputType = {
    id?: true
    userId?: true
    address?: true
    chainId?: true
    type?: true
    encryptedPrivateKey?: true
    keyId?: true
    createdAt?: true
    lastUsedAt?: true
    isArchived?: true
    balance?: true
    nonce?: true
  }

  export type WalletMaxAggregateInputType = {
    id?: true
    userId?: true
    address?: true
    chainId?: true
    type?: true
    encryptedPrivateKey?: true
    keyId?: true
    createdAt?: true
    lastUsedAt?: true
    isArchived?: true
    balance?: true
    nonce?: true
  }

  export type WalletCountAggregateInputType = {
    id?: true
    userId?: true
    address?: true
    chainId?: true
    type?: true
    encryptedPrivateKey?: true
    keyId?: true
    createdAt?: true
    lastUsedAt?: true
    isArchived?: true
    balance?: true
    nonce?: true
    _all?: true
  }

  export type WalletAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Wallet to aggregate.
     */
    where?: WalletWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wallets to fetch.
     */
    orderBy?: Enumerable<WalletOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: WalletWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wallets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wallets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Wallets
    **/
    _count?: true | WalletCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: WalletAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: WalletSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: WalletMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: WalletMaxAggregateInputType
  }

  export type GetWalletAggregateType<T extends WalletAggregateArgs> = {
        [P in keyof T & keyof AggregateWallet]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateWallet[P]>
      : GetScalarType<T[P], AggregateWallet[P]>
  }




  export type WalletGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: WalletWhereInput
    orderBy?: Enumerable<WalletOrderByWithAggregationInput>
    by: WalletScalarFieldEnum[]
    having?: WalletScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: WalletCountAggregateInputType | true
    _avg?: WalletAvgAggregateInputType
    _sum?: WalletSumAggregateInputType
    _min?: WalletMinAggregateInputType
    _max?: WalletMaxAggregateInputType
  }


  export type WalletGroupByOutputType = {
    id: string
    userId: string
    address: string
    chainId: number
    type: WalletType
    encryptedPrivateKey: string | null
    keyId: string | null
    createdAt: Date
    lastUsedAt: Date
    isArchived: boolean
    balance: string | null
    nonce: number | null
    _count: WalletCountAggregateOutputType | null
    _avg: WalletAvgAggregateOutputType | null
    _sum: WalletSumAggregateOutputType | null
    _min: WalletMinAggregateOutputType | null
    _max: WalletMaxAggregateOutputType | null
  }

  type GetWalletGroupByPayload<T extends WalletGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<WalletGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof WalletGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], WalletGroupByOutputType[P]>
            : GetScalarType<T[P], WalletGroupByOutputType[P]>
        }
      >
    >


  export type WalletSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    address?: boolean
    chainId?: boolean
    type?: boolean
    encryptedPrivateKey?: boolean
    keyId?: boolean
    createdAt?: boolean
    lastUsedAt?: boolean
    isArchived?: boolean
    balance?: boolean
    nonce?: boolean
    user?: boolean | UserArgs<ExtArgs>
    proofs?: boolean | Wallet$proofsArgs<ExtArgs>
    batches?: boolean | Wallet$batchesArgs<ExtArgs>
    _count?: boolean | WalletCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["wallet"]>

  export type WalletSelectScalar = {
    id?: boolean
    userId?: boolean
    address?: boolean
    chainId?: boolean
    type?: boolean
    encryptedPrivateKey?: boolean
    keyId?: boolean
    createdAt?: boolean
    lastUsedAt?: boolean
    isArchived?: boolean
    balance?: boolean
    nonce?: boolean
  }

  export type WalletInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserArgs<ExtArgs>
    proofs?: boolean | Wallet$proofsArgs<ExtArgs>
    batches?: boolean | Wallet$batchesArgs<ExtArgs>
    _count?: boolean | WalletCountOutputTypeArgs<ExtArgs>
  }


  type WalletGetPayload<S extends boolean | null | undefined | WalletArgs> = $Types.GetResult<WalletPayload, S>

  type WalletCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<WalletFindManyArgs, 'select' | 'include'> & {
      select?: WalletCountAggregateInputType | true
    }

  export interface WalletDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Wallet'], meta: { name: 'Wallet' } }
    /**
     * Find zero or one Wallet that matches the filter.
     * @param {WalletFindUniqueArgs} args - Arguments to find a Wallet
     * @example
     * // Get one Wallet
     * const wallet = await prisma.wallet.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends WalletFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, WalletFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Wallet'> extends True ? Prisma__WalletClient<$Types.GetResult<WalletPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__WalletClient<$Types.GetResult<WalletPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Wallet that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {WalletFindUniqueOrThrowArgs} args - Arguments to find a Wallet
     * @example
     * // Get one Wallet
     * const wallet = await prisma.wallet.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends WalletFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, WalletFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__WalletClient<$Types.GetResult<WalletPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Wallet that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletFindFirstArgs} args - Arguments to find a Wallet
     * @example
     * // Get one Wallet
     * const wallet = await prisma.wallet.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends WalletFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, WalletFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Wallet'> extends True ? Prisma__WalletClient<$Types.GetResult<WalletPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__WalletClient<$Types.GetResult<WalletPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Wallet that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletFindFirstOrThrowArgs} args - Arguments to find a Wallet
     * @example
     * // Get one Wallet
     * const wallet = await prisma.wallet.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends WalletFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, WalletFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__WalletClient<$Types.GetResult<WalletPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Wallets that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Wallets
     * const wallets = await prisma.wallet.findMany()
     * 
     * // Get first 10 Wallets
     * const wallets = await prisma.wallet.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const walletWithIdOnly = await prisma.wallet.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends WalletFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WalletFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<WalletPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Wallet.
     * @param {WalletCreateArgs} args - Arguments to create a Wallet.
     * @example
     * // Create one Wallet
     * const Wallet = await prisma.wallet.create({
     *   data: {
     *     // ... data to create a Wallet
     *   }
     * })
     * 
    **/
    create<T extends WalletCreateArgs<ExtArgs>>(
      args: SelectSubset<T, WalletCreateArgs<ExtArgs>>
    ): Prisma__WalletClient<$Types.GetResult<WalletPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Wallets.
     *     @param {WalletCreateManyArgs} args - Arguments to create many Wallets.
     *     @example
     *     // Create many Wallets
     *     const wallet = await prisma.wallet.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends WalletCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WalletCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Wallet.
     * @param {WalletDeleteArgs} args - Arguments to delete one Wallet.
     * @example
     * // Delete one Wallet
     * const Wallet = await prisma.wallet.delete({
     *   where: {
     *     // ... filter to delete one Wallet
     *   }
     * })
     * 
    **/
    delete<T extends WalletDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, WalletDeleteArgs<ExtArgs>>
    ): Prisma__WalletClient<$Types.GetResult<WalletPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Wallet.
     * @param {WalletUpdateArgs} args - Arguments to update one Wallet.
     * @example
     * // Update one Wallet
     * const wallet = await prisma.wallet.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends WalletUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, WalletUpdateArgs<ExtArgs>>
    ): Prisma__WalletClient<$Types.GetResult<WalletPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Wallets.
     * @param {WalletDeleteManyArgs} args - Arguments to filter Wallets to delete.
     * @example
     * // Delete a few Wallets
     * const { count } = await prisma.wallet.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends WalletDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, WalletDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Wallets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Wallets
     * const wallet = await prisma.wallet.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends WalletUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, WalletUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Wallet.
     * @param {WalletUpsertArgs} args - Arguments to update or create a Wallet.
     * @example
     * // Update or create a Wallet
     * const wallet = await prisma.wallet.upsert({
     *   create: {
     *     // ... data to create a Wallet
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Wallet we want to update
     *   }
     * })
    **/
    upsert<T extends WalletUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, WalletUpsertArgs<ExtArgs>>
    ): Prisma__WalletClient<$Types.GetResult<WalletPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Wallets.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletCountArgs} args - Arguments to filter Wallets to count.
     * @example
     * // Count the number of Wallets
     * const count = await prisma.wallet.count({
     *   where: {
     *     // ... the filter for the Wallets we want to count
     *   }
     * })
    **/
    count<T extends WalletCountArgs>(
      args?: Subset<T, WalletCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], WalletCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Wallet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends WalletAggregateArgs>(args: Subset<T, WalletAggregateArgs>): Prisma.PrismaPromise<GetWalletAggregateType<T>>

    /**
     * Group by Wallet.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {WalletGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends WalletGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: WalletGroupByArgs['orderBy'] }
        : { orderBy?: WalletGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, WalletGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetWalletGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Wallet.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__WalletClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    proofs<T extends Wallet$proofsArgs<ExtArgs> = {}>(args?: Subset<T, Wallet$proofsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<ProofPayload<ExtArgs>, T, 'findMany', never>| Null>;

    batches<T extends Wallet$batchesArgs<ExtArgs> = {}>(args?: Subset<T, Wallet$batchesArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<BatchPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Wallet base type for findUnique actions
   */
  export type WalletFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WalletInclude<ExtArgs> | null
    /**
     * Filter, which Wallet to fetch.
     */
    where: WalletWhereUniqueInput
  }

  /**
   * Wallet findUnique
   */
  export interface WalletFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends WalletFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Wallet findUniqueOrThrow
   */
  export type WalletFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WalletInclude<ExtArgs> | null
    /**
     * Filter, which Wallet to fetch.
     */
    where: WalletWhereUniqueInput
  }


  /**
   * Wallet base type for findFirst actions
   */
  export type WalletFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WalletInclude<ExtArgs> | null
    /**
     * Filter, which Wallet to fetch.
     */
    where?: WalletWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wallets to fetch.
     */
    orderBy?: Enumerable<WalletOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Wallets.
     */
    cursor?: WalletWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wallets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wallets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Wallets.
     */
    distinct?: Enumerable<WalletScalarFieldEnum>
  }

  /**
   * Wallet findFirst
   */
  export interface WalletFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends WalletFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Wallet findFirstOrThrow
   */
  export type WalletFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WalletInclude<ExtArgs> | null
    /**
     * Filter, which Wallet to fetch.
     */
    where?: WalletWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wallets to fetch.
     */
    orderBy?: Enumerable<WalletOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Wallets.
     */
    cursor?: WalletWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wallets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wallets.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Wallets.
     */
    distinct?: Enumerable<WalletScalarFieldEnum>
  }


  /**
   * Wallet findMany
   */
  export type WalletFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WalletInclude<ExtArgs> | null
    /**
     * Filter, which Wallets to fetch.
     */
    where?: WalletWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Wallets to fetch.
     */
    orderBy?: Enumerable<WalletOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Wallets.
     */
    cursor?: WalletWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Wallets from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Wallets.
     */
    skip?: number
    distinct?: Enumerable<WalletScalarFieldEnum>
  }


  /**
   * Wallet create
   */
  export type WalletCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WalletInclude<ExtArgs> | null
    /**
     * The data needed to create a Wallet.
     */
    data: XOR<WalletCreateInput, WalletUncheckedCreateInput>
  }


  /**
   * Wallet createMany
   */
  export type WalletCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Wallets.
     */
    data: Enumerable<WalletCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Wallet update
   */
  export type WalletUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WalletInclude<ExtArgs> | null
    /**
     * The data needed to update a Wallet.
     */
    data: XOR<WalletUpdateInput, WalletUncheckedUpdateInput>
    /**
     * Choose, which Wallet to update.
     */
    where: WalletWhereUniqueInput
  }


  /**
   * Wallet updateMany
   */
  export type WalletUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Wallets.
     */
    data: XOR<WalletUpdateManyMutationInput, WalletUncheckedUpdateManyInput>
    /**
     * Filter which Wallets to update
     */
    where?: WalletWhereInput
  }


  /**
   * Wallet upsert
   */
  export type WalletUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WalletInclude<ExtArgs> | null
    /**
     * The filter to search for the Wallet to update in case it exists.
     */
    where: WalletWhereUniqueInput
    /**
     * In case the Wallet found by the `where` argument doesn't exist, create a new Wallet with this data.
     */
    create: XOR<WalletCreateInput, WalletUncheckedCreateInput>
    /**
     * In case the Wallet was found with the provided `where` argument, update it with this data.
     */
    update: XOR<WalletUpdateInput, WalletUncheckedUpdateInput>
  }


  /**
   * Wallet delete
   */
  export type WalletDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WalletInclude<ExtArgs> | null
    /**
     * Filter which Wallet to delete.
     */
    where: WalletWhereUniqueInput
  }


  /**
   * Wallet deleteMany
   */
  export type WalletDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Wallets to delete
     */
    where?: WalletWhereInput
  }


  /**
   * Wallet.proofs
   */
  export type Wallet$proofsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proof
     */
    select?: ProofSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProofInclude<ExtArgs> | null
    where?: ProofWhereInput
    orderBy?: Enumerable<ProofOrderByWithRelationInput>
    cursor?: ProofWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ProofScalarFieldEnum>
  }


  /**
   * Wallet.batches
   */
  export type Wallet$batchesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Batch
     */
    select?: BatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BatchInclude<ExtArgs> | null
    where?: BatchWhereInput
    orderBy?: Enumerable<BatchOrderByWithRelationInput>
    cursor?: BatchWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<BatchScalarFieldEnum>
  }


  /**
   * Wallet without action
   */
  export type WalletArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Wallet
     */
    select?: WalletSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: WalletInclude<ExtArgs> | null
  }



  /**
   * Model Proof
   */


  export type AggregateProof = {
    _count: ProofCountAggregateOutputType | null
    _min: ProofMinAggregateOutputType | null
    _max: ProofMaxAggregateOutputType | null
  }

  export type ProofMinAggregateOutputType = {
    id: string | null
    userId: string | null
    referenceId: string | null
    createdAt: Date | null
    expiresAt: Date | null
    proofType: ProofType | null
    isRevoked: boolean | null
    revokedAt: Date | null
    revocationReason: string | null
    encryptedData: string | null
    encryptionKeyId: string | null
    tempWalletId: string | null
    transactionHash: string | null
    merkleRoot: string | null
    batchId: string | null
    status: ProofStatus | null
  }

  export type ProofMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    referenceId: string | null
    createdAt: Date | null
    expiresAt: Date | null
    proofType: ProofType | null
    isRevoked: boolean | null
    revokedAt: Date | null
    revocationReason: string | null
    encryptedData: string | null
    encryptionKeyId: string | null
    tempWalletId: string | null
    transactionHash: string | null
    merkleRoot: string | null
    batchId: string | null
    status: ProofStatus | null
  }

  export type ProofCountAggregateOutputType = {
    id: number
    userId: number
    referenceId: number
    createdAt: number
    expiresAt: number
    proofType: number
    isRevoked: number
    revokedAt: number
    revocationReason: number
    encryptedData: number
    encryptionKeyId: number
    tempWalletId: number
    transactionHash: number
    merkleRoot: number
    merklePath: number
    batchId: number
    warningFlags: number
    originalWallets: number
    status: number
    _all: number
  }


  export type ProofMinAggregateInputType = {
    id?: true
    userId?: true
    referenceId?: true
    createdAt?: true
    expiresAt?: true
    proofType?: true
    isRevoked?: true
    revokedAt?: true
    revocationReason?: true
    encryptedData?: true
    encryptionKeyId?: true
    tempWalletId?: true
    transactionHash?: true
    merkleRoot?: true
    batchId?: true
    status?: true
  }

  export type ProofMaxAggregateInputType = {
    id?: true
    userId?: true
    referenceId?: true
    createdAt?: true
    expiresAt?: true
    proofType?: true
    isRevoked?: true
    revokedAt?: true
    revocationReason?: true
    encryptedData?: true
    encryptionKeyId?: true
    tempWalletId?: true
    transactionHash?: true
    merkleRoot?: true
    batchId?: true
    status?: true
  }

  export type ProofCountAggregateInputType = {
    id?: true
    userId?: true
    referenceId?: true
    createdAt?: true
    expiresAt?: true
    proofType?: true
    isRevoked?: true
    revokedAt?: true
    revocationReason?: true
    encryptedData?: true
    encryptionKeyId?: true
    tempWalletId?: true
    transactionHash?: true
    merkleRoot?: true
    merklePath?: true
    batchId?: true
    warningFlags?: true
    originalWallets?: true
    status?: true
    _all?: true
  }

  export type ProofAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Proof to aggregate.
     */
    where?: ProofWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Proofs to fetch.
     */
    orderBy?: Enumerable<ProofOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProofWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Proofs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Proofs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Proofs
    **/
    _count?: true | ProofCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProofMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProofMaxAggregateInputType
  }

  export type GetProofAggregateType<T extends ProofAggregateArgs> = {
        [P in keyof T & keyof AggregateProof]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProof[P]>
      : GetScalarType<T[P], AggregateProof[P]>
  }




  export type ProofGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ProofWhereInput
    orderBy?: Enumerable<ProofOrderByWithAggregationInput>
    by: ProofScalarFieldEnum[]
    having?: ProofScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProofCountAggregateInputType | true
    _min?: ProofMinAggregateInputType
    _max?: ProofMaxAggregateInputType
  }


  export type ProofGroupByOutputType = {
    id: string
    userId: string
    referenceId: string
    createdAt: Date
    expiresAt: Date
    proofType: ProofType
    isRevoked: boolean
    revokedAt: Date | null
    revocationReason: string | null
    encryptedData: string
    encryptionKeyId: string
    tempWalletId: string
    transactionHash: string | null
    merkleRoot: string | null
    merklePath: JsonValue | null
    batchId: string | null
    warningFlags: string[]
    originalWallets: string[]
    status: ProofStatus
    _count: ProofCountAggregateOutputType | null
    _min: ProofMinAggregateOutputType | null
    _max: ProofMaxAggregateOutputType | null
  }

  type GetProofGroupByPayload<T extends ProofGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ProofGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProofGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProofGroupByOutputType[P]>
            : GetScalarType<T[P], ProofGroupByOutputType[P]>
        }
      >
    >


  export type ProofSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    referenceId?: boolean
    createdAt?: boolean
    expiresAt?: boolean
    proofType?: boolean
    isRevoked?: boolean
    revokedAt?: boolean
    revocationReason?: boolean
    encryptedData?: boolean
    encryptionKeyId?: boolean
    tempWalletId?: boolean
    transactionHash?: boolean
    merkleRoot?: boolean
    merklePath?: boolean
    batchId?: boolean
    warningFlags?: boolean
    originalWallets?: boolean
    status?: boolean
    user?: boolean | UserArgs<ExtArgs>
    tempWallet?: boolean | WalletArgs<ExtArgs>
    batch?: boolean | BatchArgs<ExtArgs>
    verifications?: boolean | Proof$verificationsArgs<ExtArgs>
    _count?: boolean | ProofCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["proof"]>

  export type ProofSelectScalar = {
    id?: boolean
    userId?: boolean
    referenceId?: boolean
    createdAt?: boolean
    expiresAt?: boolean
    proofType?: boolean
    isRevoked?: boolean
    revokedAt?: boolean
    revocationReason?: boolean
    encryptedData?: boolean
    encryptionKeyId?: boolean
    tempWalletId?: boolean
    transactionHash?: boolean
    merkleRoot?: boolean
    merklePath?: boolean
    batchId?: boolean
    warningFlags?: boolean
    originalWallets?: boolean
    status?: boolean
  }

  export type ProofInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserArgs<ExtArgs>
    tempWallet?: boolean | WalletArgs<ExtArgs>
    batch?: boolean | BatchArgs<ExtArgs>
    verifications?: boolean | Proof$verificationsArgs<ExtArgs>
    _count?: boolean | ProofCountOutputTypeArgs<ExtArgs>
  }


  type ProofGetPayload<S extends boolean | null | undefined | ProofArgs> = $Types.GetResult<ProofPayload, S>

  type ProofCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ProofFindManyArgs, 'select' | 'include'> & {
      select?: ProofCountAggregateInputType | true
    }

  export interface ProofDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Proof'], meta: { name: 'Proof' } }
    /**
     * Find zero or one Proof that matches the filter.
     * @param {ProofFindUniqueArgs} args - Arguments to find a Proof
     * @example
     * // Get one Proof
     * const proof = await prisma.proof.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProofFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ProofFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Proof'> extends True ? Prisma__ProofClient<$Types.GetResult<ProofPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__ProofClient<$Types.GetResult<ProofPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Proof that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProofFindUniqueOrThrowArgs} args - Arguments to find a Proof
     * @example
     * // Get one Proof
     * const proof = await prisma.proof.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProofFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProofFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ProofClient<$Types.GetResult<ProofPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Proof that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProofFindFirstArgs} args - Arguments to find a Proof
     * @example
     * // Get one Proof
     * const proof = await prisma.proof.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProofFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ProofFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Proof'> extends True ? Prisma__ProofClient<$Types.GetResult<ProofPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__ProofClient<$Types.GetResult<ProofPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Proof that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProofFindFirstOrThrowArgs} args - Arguments to find a Proof
     * @example
     * // Get one Proof
     * const proof = await prisma.proof.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProofFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProofFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ProofClient<$Types.GetResult<ProofPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Proofs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProofFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Proofs
     * const proofs = await prisma.proof.findMany()
     * 
     * // Get first 10 Proofs
     * const proofs = await prisma.proof.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const proofWithIdOnly = await prisma.proof.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProofFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProofFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<ProofPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Proof.
     * @param {ProofCreateArgs} args - Arguments to create a Proof.
     * @example
     * // Create one Proof
     * const Proof = await prisma.proof.create({
     *   data: {
     *     // ... data to create a Proof
     *   }
     * })
     * 
    **/
    create<T extends ProofCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ProofCreateArgs<ExtArgs>>
    ): Prisma__ProofClient<$Types.GetResult<ProofPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Proofs.
     *     @param {ProofCreateManyArgs} args - Arguments to create many Proofs.
     *     @example
     *     // Create many Proofs
     *     const proof = await prisma.proof.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProofCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProofCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Proof.
     * @param {ProofDeleteArgs} args - Arguments to delete one Proof.
     * @example
     * // Delete one Proof
     * const Proof = await prisma.proof.delete({
     *   where: {
     *     // ... filter to delete one Proof
     *   }
     * })
     * 
    **/
    delete<T extends ProofDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ProofDeleteArgs<ExtArgs>>
    ): Prisma__ProofClient<$Types.GetResult<ProofPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Proof.
     * @param {ProofUpdateArgs} args - Arguments to update one Proof.
     * @example
     * // Update one Proof
     * const proof = await prisma.proof.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProofUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ProofUpdateArgs<ExtArgs>>
    ): Prisma__ProofClient<$Types.GetResult<ProofPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Proofs.
     * @param {ProofDeleteManyArgs} args - Arguments to filter Proofs to delete.
     * @example
     * // Delete a few Proofs
     * const { count } = await prisma.proof.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProofDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProofDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Proofs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProofUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Proofs
     * const proof = await prisma.proof.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProofUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ProofUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Proof.
     * @param {ProofUpsertArgs} args - Arguments to update or create a Proof.
     * @example
     * // Update or create a Proof
     * const proof = await prisma.proof.upsert({
     *   create: {
     *     // ... data to create a Proof
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Proof we want to update
     *   }
     * })
    **/
    upsert<T extends ProofUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ProofUpsertArgs<ExtArgs>>
    ): Prisma__ProofClient<$Types.GetResult<ProofPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Proofs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProofCountArgs} args - Arguments to filter Proofs to count.
     * @example
     * // Count the number of Proofs
     * const count = await prisma.proof.count({
     *   where: {
     *     // ... the filter for the Proofs we want to count
     *   }
     * })
    **/
    count<T extends ProofCountArgs>(
      args?: Subset<T, ProofCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProofCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Proof.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProofAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProofAggregateArgs>(args: Subset<T, ProofAggregateArgs>): Prisma.PrismaPromise<GetProofAggregateType<T>>

    /**
     * Group by Proof.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProofGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProofGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProofGroupByArgs['orderBy'] }
        : { orderBy?: ProofGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProofGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProofGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Proof.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ProofClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    tempWallet<T extends WalletArgs<ExtArgs> = {}>(args?: Subset<T, WalletArgs<ExtArgs>>): Prisma__WalletClient<$Types.GetResult<WalletPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    batch<T extends BatchArgs<ExtArgs> = {}>(args?: Subset<T, BatchArgs<ExtArgs>>): Prisma__BatchClient<$Types.GetResult<BatchPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    verifications<T extends Proof$verificationsArgs<ExtArgs> = {}>(args?: Subset<T, Proof$verificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<VerificationPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Proof base type for findUnique actions
   */
  export type ProofFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proof
     */
    select?: ProofSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProofInclude<ExtArgs> | null
    /**
     * Filter, which Proof to fetch.
     */
    where: ProofWhereUniqueInput
  }

  /**
   * Proof findUnique
   */
  export interface ProofFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ProofFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Proof findUniqueOrThrow
   */
  export type ProofFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proof
     */
    select?: ProofSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProofInclude<ExtArgs> | null
    /**
     * Filter, which Proof to fetch.
     */
    where: ProofWhereUniqueInput
  }


  /**
   * Proof base type for findFirst actions
   */
  export type ProofFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proof
     */
    select?: ProofSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProofInclude<ExtArgs> | null
    /**
     * Filter, which Proof to fetch.
     */
    where?: ProofWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Proofs to fetch.
     */
    orderBy?: Enumerable<ProofOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Proofs.
     */
    cursor?: ProofWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Proofs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Proofs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Proofs.
     */
    distinct?: Enumerable<ProofScalarFieldEnum>
  }

  /**
   * Proof findFirst
   */
  export interface ProofFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ProofFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Proof findFirstOrThrow
   */
  export type ProofFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proof
     */
    select?: ProofSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProofInclude<ExtArgs> | null
    /**
     * Filter, which Proof to fetch.
     */
    where?: ProofWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Proofs to fetch.
     */
    orderBy?: Enumerable<ProofOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Proofs.
     */
    cursor?: ProofWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Proofs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Proofs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Proofs.
     */
    distinct?: Enumerable<ProofScalarFieldEnum>
  }


  /**
   * Proof findMany
   */
  export type ProofFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proof
     */
    select?: ProofSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProofInclude<ExtArgs> | null
    /**
     * Filter, which Proofs to fetch.
     */
    where?: ProofWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Proofs to fetch.
     */
    orderBy?: Enumerable<ProofOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Proofs.
     */
    cursor?: ProofWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Proofs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Proofs.
     */
    skip?: number
    distinct?: Enumerable<ProofScalarFieldEnum>
  }


  /**
   * Proof create
   */
  export type ProofCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proof
     */
    select?: ProofSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProofInclude<ExtArgs> | null
    /**
     * The data needed to create a Proof.
     */
    data: XOR<ProofCreateInput, ProofUncheckedCreateInput>
  }


  /**
   * Proof createMany
   */
  export type ProofCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Proofs.
     */
    data: Enumerable<ProofCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Proof update
   */
  export type ProofUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proof
     */
    select?: ProofSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProofInclude<ExtArgs> | null
    /**
     * The data needed to update a Proof.
     */
    data: XOR<ProofUpdateInput, ProofUncheckedUpdateInput>
    /**
     * Choose, which Proof to update.
     */
    where: ProofWhereUniqueInput
  }


  /**
   * Proof updateMany
   */
  export type ProofUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Proofs.
     */
    data: XOR<ProofUpdateManyMutationInput, ProofUncheckedUpdateManyInput>
    /**
     * Filter which Proofs to update
     */
    where?: ProofWhereInput
  }


  /**
   * Proof upsert
   */
  export type ProofUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proof
     */
    select?: ProofSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProofInclude<ExtArgs> | null
    /**
     * The filter to search for the Proof to update in case it exists.
     */
    where: ProofWhereUniqueInput
    /**
     * In case the Proof found by the `where` argument doesn't exist, create a new Proof with this data.
     */
    create: XOR<ProofCreateInput, ProofUncheckedCreateInput>
    /**
     * In case the Proof was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProofUpdateInput, ProofUncheckedUpdateInput>
  }


  /**
   * Proof delete
   */
  export type ProofDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proof
     */
    select?: ProofSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProofInclude<ExtArgs> | null
    /**
     * Filter which Proof to delete.
     */
    where: ProofWhereUniqueInput
  }


  /**
   * Proof deleteMany
   */
  export type ProofDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Proofs to delete
     */
    where?: ProofWhereInput
  }


  /**
   * Proof.verifications
   */
  export type Proof$verificationsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VerificationInclude<ExtArgs> | null
    where?: VerificationWhereInput
    orderBy?: Enumerable<VerificationOrderByWithRelationInput>
    cursor?: VerificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<VerificationScalarFieldEnum>
  }


  /**
   * Proof without action
   */
  export type ProofArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proof
     */
    select?: ProofSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProofInclude<ExtArgs> | null
  }



  /**
   * Model Verification
   */


  export type AggregateVerification = {
    _count: VerificationCountAggregateOutputType | null
    _min: VerificationMinAggregateOutputType | null
    _max: VerificationMaxAggregateOutputType | null
  }

  export type VerificationMinAggregateOutputType = {
    id: string | null
    proofId: string | null
    referenceId: string | null
    verifierAddress: string | null
    verifiedAt: Date | null
    isSuccessful: boolean | null
    failureReason: string | null
  }

  export type VerificationMaxAggregateOutputType = {
    id: string | null
    proofId: string | null
    referenceId: string | null
    verifierAddress: string | null
    verifiedAt: Date | null
    isSuccessful: boolean | null
    failureReason: string | null
  }

  export type VerificationCountAggregateOutputType = {
    id: number
    proofId: number
    referenceId: number
    verifierAddress: number
    verifiedAt: number
    isSuccessful: number
    failureReason: number
    verificationResult: number
    _all: number
  }


  export type VerificationMinAggregateInputType = {
    id?: true
    proofId?: true
    referenceId?: true
    verifierAddress?: true
    verifiedAt?: true
    isSuccessful?: true
    failureReason?: true
  }

  export type VerificationMaxAggregateInputType = {
    id?: true
    proofId?: true
    referenceId?: true
    verifierAddress?: true
    verifiedAt?: true
    isSuccessful?: true
    failureReason?: true
  }

  export type VerificationCountAggregateInputType = {
    id?: true
    proofId?: true
    referenceId?: true
    verifierAddress?: true
    verifiedAt?: true
    isSuccessful?: true
    failureReason?: true
    verificationResult?: true
    _all?: true
  }

  export type VerificationAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Verification to aggregate.
     */
    where?: VerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Verifications to fetch.
     */
    orderBy?: Enumerable<VerificationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Verifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Verifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Verifications
    **/
    _count?: true | VerificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VerificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VerificationMaxAggregateInputType
  }

  export type GetVerificationAggregateType<T extends VerificationAggregateArgs> = {
        [P in keyof T & keyof AggregateVerification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVerification[P]>
      : GetScalarType<T[P], AggregateVerification[P]>
  }




  export type VerificationGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: VerificationWhereInput
    orderBy?: Enumerable<VerificationOrderByWithAggregationInput>
    by: VerificationScalarFieldEnum[]
    having?: VerificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VerificationCountAggregateInputType | true
    _min?: VerificationMinAggregateInputType
    _max?: VerificationMaxAggregateInputType
  }


  export type VerificationGroupByOutputType = {
    id: string
    proofId: string
    referenceId: string
    verifierAddress: string | null
    verifiedAt: Date
    isSuccessful: boolean
    failureReason: string | null
    verificationResult: JsonValue
    _count: VerificationCountAggregateOutputType | null
    _min: VerificationMinAggregateOutputType | null
    _max: VerificationMaxAggregateOutputType | null
  }

  type GetVerificationGroupByPayload<T extends VerificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<VerificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VerificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VerificationGroupByOutputType[P]>
            : GetScalarType<T[P], VerificationGroupByOutputType[P]>
        }
      >
    >


  export type VerificationSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    proofId?: boolean
    referenceId?: boolean
    verifierAddress?: boolean
    verifiedAt?: boolean
    isSuccessful?: boolean
    failureReason?: boolean
    verificationResult?: boolean
    proof?: boolean | ProofArgs<ExtArgs>
  }, ExtArgs["result"]["verification"]>

  export type VerificationSelectScalar = {
    id?: boolean
    proofId?: boolean
    referenceId?: boolean
    verifierAddress?: boolean
    verifiedAt?: boolean
    isSuccessful?: boolean
    failureReason?: boolean
    verificationResult?: boolean
  }

  export type VerificationInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    proof?: boolean | ProofArgs<ExtArgs>
  }


  type VerificationGetPayload<S extends boolean | null | undefined | VerificationArgs> = $Types.GetResult<VerificationPayload, S>

  type VerificationCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<VerificationFindManyArgs, 'select' | 'include'> & {
      select?: VerificationCountAggregateInputType | true
    }

  export interface VerificationDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Verification'], meta: { name: 'Verification' } }
    /**
     * Find zero or one Verification that matches the filter.
     * @param {VerificationFindUniqueArgs} args - Arguments to find a Verification
     * @example
     * // Get one Verification
     * const verification = await prisma.verification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends VerificationFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, VerificationFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Verification'> extends True ? Prisma__VerificationClient<$Types.GetResult<VerificationPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__VerificationClient<$Types.GetResult<VerificationPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Verification that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {VerificationFindUniqueOrThrowArgs} args - Arguments to find a Verification
     * @example
     * // Get one Verification
     * const verification = await prisma.verification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends VerificationFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, VerificationFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__VerificationClient<$Types.GetResult<VerificationPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Verification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationFindFirstArgs} args - Arguments to find a Verification
     * @example
     * // Get one Verification
     * const verification = await prisma.verification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends VerificationFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, VerificationFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Verification'> extends True ? Prisma__VerificationClient<$Types.GetResult<VerificationPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__VerificationClient<$Types.GetResult<VerificationPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Verification that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationFindFirstOrThrowArgs} args - Arguments to find a Verification
     * @example
     * // Get one Verification
     * const verification = await prisma.verification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends VerificationFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, VerificationFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__VerificationClient<$Types.GetResult<VerificationPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Verifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Verifications
     * const verifications = await prisma.verification.findMany()
     * 
     * // Get first 10 Verifications
     * const verifications = await prisma.verification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const verificationWithIdOnly = await prisma.verification.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends VerificationFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VerificationFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<VerificationPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Verification.
     * @param {VerificationCreateArgs} args - Arguments to create a Verification.
     * @example
     * // Create one Verification
     * const Verification = await prisma.verification.create({
     *   data: {
     *     // ... data to create a Verification
     *   }
     * })
     * 
    **/
    create<T extends VerificationCreateArgs<ExtArgs>>(
      args: SelectSubset<T, VerificationCreateArgs<ExtArgs>>
    ): Prisma__VerificationClient<$Types.GetResult<VerificationPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Verifications.
     *     @param {VerificationCreateManyArgs} args - Arguments to create many Verifications.
     *     @example
     *     // Create many Verifications
     *     const verification = await prisma.verification.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends VerificationCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VerificationCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Verification.
     * @param {VerificationDeleteArgs} args - Arguments to delete one Verification.
     * @example
     * // Delete one Verification
     * const Verification = await prisma.verification.delete({
     *   where: {
     *     // ... filter to delete one Verification
     *   }
     * })
     * 
    **/
    delete<T extends VerificationDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, VerificationDeleteArgs<ExtArgs>>
    ): Prisma__VerificationClient<$Types.GetResult<VerificationPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Verification.
     * @param {VerificationUpdateArgs} args - Arguments to update one Verification.
     * @example
     * // Update one Verification
     * const verification = await prisma.verification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends VerificationUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, VerificationUpdateArgs<ExtArgs>>
    ): Prisma__VerificationClient<$Types.GetResult<VerificationPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Verifications.
     * @param {VerificationDeleteManyArgs} args - Arguments to filter Verifications to delete.
     * @example
     * // Delete a few Verifications
     * const { count } = await prisma.verification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends VerificationDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VerificationDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Verifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Verifications
     * const verification = await prisma.verification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends VerificationUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, VerificationUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Verification.
     * @param {VerificationUpsertArgs} args - Arguments to update or create a Verification.
     * @example
     * // Update or create a Verification
     * const verification = await prisma.verification.upsert({
     *   create: {
     *     // ... data to create a Verification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Verification we want to update
     *   }
     * })
    **/
    upsert<T extends VerificationUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, VerificationUpsertArgs<ExtArgs>>
    ): Prisma__VerificationClient<$Types.GetResult<VerificationPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Verifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationCountArgs} args - Arguments to filter Verifications to count.
     * @example
     * // Count the number of Verifications
     * const count = await prisma.verification.count({
     *   where: {
     *     // ... the filter for the Verifications we want to count
     *   }
     * })
    **/
    count<T extends VerificationCountArgs>(
      args?: Subset<T, VerificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VerificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Verification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VerificationAggregateArgs>(args: Subset<T, VerificationAggregateArgs>): Prisma.PrismaPromise<GetVerificationAggregateType<T>>

    /**
     * Group by Verification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VerificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VerificationGroupByArgs['orderBy'] }
        : { orderBy?: VerificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VerificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVerificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Verification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__VerificationClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    proof<T extends ProofArgs<ExtArgs> = {}>(args?: Subset<T, ProofArgs<ExtArgs>>): Prisma__ProofClient<$Types.GetResult<ProofPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Verification base type for findUnique actions
   */
  export type VerificationFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VerificationInclude<ExtArgs> | null
    /**
     * Filter, which Verification to fetch.
     */
    where: VerificationWhereUniqueInput
  }

  /**
   * Verification findUnique
   */
  export interface VerificationFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends VerificationFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Verification findUniqueOrThrow
   */
  export type VerificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VerificationInclude<ExtArgs> | null
    /**
     * Filter, which Verification to fetch.
     */
    where: VerificationWhereUniqueInput
  }


  /**
   * Verification base type for findFirst actions
   */
  export type VerificationFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VerificationInclude<ExtArgs> | null
    /**
     * Filter, which Verification to fetch.
     */
    where?: VerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Verifications to fetch.
     */
    orderBy?: Enumerable<VerificationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Verifications.
     */
    cursor?: VerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Verifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Verifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Verifications.
     */
    distinct?: Enumerable<VerificationScalarFieldEnum>
  }

  /**
   * Verification findFirst
   */
  export interface VerificationFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends VerificationFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Verification findFirstOrThrow
   */
  export type VerificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VerificationInclude<ExtArgs> | null
    /**
     * Filter, which Verification to fetch.
     */
    where?: VerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Verifications to fetch.
     */
    orderBy?: Enumerable<VerificationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Verifications.
     */
    cursor?: VerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Verifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Verifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Verifications.
     */
    distinct?: Enumerable<VerificationScalarFieldEnum>
  }


  /**
   * Verification findMany
   */
  export type VerificationFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VerificationInclude<ExtArgs> | null
    /**
     * Filter, which Verifications to fetch.
     */
    where?: VerificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Verifications to fetch.
     */
    orderBy?: Enumerable<VerificationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Verifications.
     */
    cursor?: VerificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Verifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Verifications.
     */
    skip?: number
    distinct?: Enumerable<VerificationScalarFieldEnum>
  }


  /**
   * Verification create
   */
  export type VerificationCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VerificationInclude<ExtArgs> | null
    /**
     * The data needed to create a Verification.
     */
    data: XOR<VerificationCreateInput, VerificationUncheckedCreateInput>
  }


  /**
   * Verification createMany
   */
  export type VerificationCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Verifications.
     */
    data: Enumerable<VerificationCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Verification update
   */
  export type VerificationUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VerificationInclude<ExtArgs> | null
    /**
     * The data needed to update a Verification.
     */
    data: XOR<VerificationUpdateInput, VerificationUncheckedUpdateInput>
    /**
     * Choose, which Verification to update.
     */
    where: VerificationWhereUniqueInput
  }


  /**
   * Verification updateMany
   */
  export type VerificationUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Verifications.
     */
    data: XOR<VerificationUpdateManyMutationInput, VerificationUncheckedUpdateManyInput>
    /**
     * Filter which Verifications to update
     */
    where?: VerificationWhereInput
  }


  /**
   * Verification upsert
   */
  export type VerificationUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VerificationInclude<ExtArgs> | null
    /**
     * The filter to search for the Verification to update in case it exists.
     */
    where: VerificationWhereUniqueInput
    /**
     * In case the Verification found by the `where` argument doesn't exist, create a new Verification with this data.
     */
    create: XOR<VerificationCreateInput, VerificationUncheckedCreateInput>
    /**
     * In case the Verification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VerificationUpdateInput, VerificationUncheckedUpdateInput>
  }


  /**
   * Verification delete
   */
  export type VerificationDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VerificationInclude<ExtArgs> | null
    /**
     * Filter which Verification to delete.
     */
    where: VerificationWhereUniqueInput
  }


  /**
   * Verification deleteMany
   */
  export type VerificationDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Verifications to delete
     */
    where?: VerificationWhereInput
  }


  /**
   * Verification without action
   */
  export type VerificationArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Verification
     */
    select?: VerificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: VerificationInclude<ExtArgs> | null
  }



  /**
   * Model Batch
   */


  export type AggregateBatch = {
    _count: BatchCountAggregateOutputType | null
    _avg: BatchAvgAggregateOutputType | null
    _sum: BatchSumAggregateOutputType | null
    _min: BatchMinAggregateOutputType | null
    _max: BatchMaxAggregateOutputType | null
  }

  export type BatchAvgAggregateOutputType = {
    retryCount: number | null
    maxRetries: number | null
  }

  export type BatchSumAggregateOutputType = {
    retryCount: number | null
    maxRetries: number | null
  }

  export type BatchMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    processedAt: Date | null
    status: BatchStatus | null
    merkleRoot: string | null
    transactionHash: string | null
    tempWalletId: string | null
    gasUsed: string | null
    gasPrice: string | null
    totalCost: string | null
    retryCount: number | null
    maxRetries: number | null
  }

  export type BatchMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    processedAt: Date | null
    status: BatchStatus | null
    merkleRoot: string | null
    transactionHash: string | null
    tempWalletId: string | null
    gasUsed: string | null
    gasPrice: string | null
    totalCost: string | null
    retryCount: number | null
    maxRetries: number | null
  }

  export type BatchCountAggregateOutputType = {
    id: number
    createdAt: number
    processedAt: number
    status: number
    merkleRoot: number
    transactionHash: number
    tempWalletId: number
    gasUsed: number
    gasPrice: number
    totalCost: number
    retryCount: number
    maxRetries: number
    _all: number
  }


  export type BatchAvgAggregateInputType = {
    retryCount?: true
    maxRetries?: true
  }

  export type BatchSumAggregateInputType = {
    retryCount?: true
    maxRetries?: true
  }

  export type BatchMinAggregateInputType = {
    id?: true
    createdAt?: true
    processedAt?: true
    status?: true
    merkleRoot?: true
    transactionHash?: true
    tempWalletId?: true
    gasUsed?: true
    gasPrice?: true
    totalCost?: true
    retryCount?: true
    maxRetries?: true
  }

  export type BatchMaxAggregateInputType = {
    id?: true
    createdAt?: true
    processedAt?: true
    status?: true
    merkleRoot?: true
    transactionHash?: true
    tempWalletId?: true
    gasUsed?: true
    gasPrice?: true
    totalCost?: true
    retryCount?: true
    maxRetries?: true
  }

  export type BatchCountAggregateInputType = {
    id?: true
    createdAt?: true
    processedAt?: true
    status?: true
    merkleRoot?: true
    transactionHash?: true
    tempWalletId?: true
    gasUsed?: true
    gasPrice?: true
    totalCost?: true
    retryCount?: true
    maxRetries?: true
    _all?: true
  }

  export type BatchAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Batch to aggregate.
     */
    where?: BatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Batches to fetch.
     */
    orderBy?: Enumerable<BatchOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Batches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Batches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Batches
    **/
    _count?: true | BatchCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: BatchAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: BatchSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BatchMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BatchMaxAggregateInputType
  }

  export type GetBatchAggregateType<T extends BatchAggregateArgs> = {
        [P in keyof T & keyof AggregateBatch]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBatch[P]>
      : GetScalarType<T[P], AggregateBatch[P]>
  }




  export type BatchGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: BatchWhereInput
    orderBy?: Enumerable<BatchOrderByWithAggregationInput>
    by: BatchScalarFieldEnum[]
    having?: BatchScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BatchCountAggregateInputType | true
    _avg?: BatchAvgAggregateInputType
    _sum?: BatchSumAggregateInputType
    _min?: BatchMinAggregateInputType
    _max?: BatchMaxAggregateInputType
  }


  export type BatchGroupByOutputType = {
    id: string
    createdAt: Date
    processedAt: Date | null
    status: BatchStatus
    merkleRoot: string
    transactionHash: string | null
    tempWalletId: string
    gasUsed: string | null
    gasPrice: string | null
    totalCost: string | null
    retryCount: number
    maxRetries: number
    _count: BatchCountAggregateOutputType | null
    _avg: BatchAvgAggregateOutputType | null
    _sum: BatchSumAggregateOutputType | null
    _min: BatchMinAggregateOutputType | null
    _max: BatchMaxAggregateOutputType | null
  }

  type GetBatchGroupByPayload<T extends BatchGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<BatchGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BatchGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BatchGroupByOutputType[P]>
            : GetScalarType<T[P], BatchGroupByOutputType[P]>
        }
      >
    >


  export type BatchSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    processedAt?: boolean
    status?: boolean
    merkleRoot?: boolean
    transactionHash?: boolean
    tempWalletId?: boolean
    gasUsed?: boolean
    gasPrice?: boolean
    totalCost?: boolean
    retryCount?: boolean
    maxRetries?: boolean
    tempWallet?: boolean | WalletArgs<ExtArgs>
    proofs?: boolean | Batch$proofsArgs<ExtArgs>
    _count?: boolean | BatchCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["batch"]>

  export type BatchSelectScalar = {
    id?: boolean
    createdAt?: boolean
    processedAt?: boolean
    status?: boolean
    merkleRoot?: boolean
    transactionHash?: boolean
    tempWalletId?: boolean
    gasUsed?: boolean
    gasPrice?: boolean
    totalCost?: boolean
    retryCount?: boolean
    maxRetries?: boolean
  }

  export type BatchInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    tempWallet?: boolean | WalletArgs<ExtArgs>
    proofs?: boolean | Batch$proofsArgs<ExtArgs>
    _count?: boolean | BatchCountOutputTypeArgs<ExtArgs>
  }


  type BatchGetPayload<S extends boolean | null | undefined | BatchArgs> = $Types.GetResult<BatchPayload, S>

  type BatchCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<BatchFindManyArgs, 'select' | 'include'> & {
      select?: BatchCountAggregateInputType | true
    }

  export interface BatchDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Batch'], meta: { name: 'Batch' } }
    /**
     * Find zero or one Batch that matches the filter.
     * @param {BatchFindUniqueArgs} args - Arguments to find a Batch
     * @example
     * // Get one Batch
     * const batch = await prisma.batch.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BatchFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, BatchFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Batch'> extends True ? Prisma__BatchClient<$Types.GetResult<BatchPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__BatchClient<$Types.GetResult<BatchPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Batch that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {BatchFindUniqueOrThrowArgs} args - Arguments to find a Batch
     * @example
     * // Get one Batch
     * const batch = await prisma.batch.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BatchFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BatchFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__BatchClient<$Types.GetResult<BatchPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Batch that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BatchFindFirstArgs} args - Arguments to find a Batch
     * @example
     * // Get one Batch
     * const batch = await prisma.batch.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BatchFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, BatchFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Batch'> extends True ? Prisma__BatchClient<$Types.GetResult<BatchPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__BatchClient<$Types.GetResult<BatchPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Batch that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BatchFindFirstOrThrowArgs} args - Arguments to find a Batch
     * @example
     * // Get one Batch
     * const batch = await prisma.batch.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BatchFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BatchFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__BatchClient<$Types.GetResult<BatchPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Batches that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BatchFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Batches
     * const batches = await prisma.batch.findMany()
     * 
     * // Get first 10 Batches
     * const batches = await prisma.batch.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const batchWithIdOnly = await prisma.batch.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends BatchFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BatchFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<BatchPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Batch.
     * @param {BatchCreateArgs} args - Arguments to create a Batch.
     * @example
     * // Create one Batch
     * const Batch = await prisma.batch.create({
     *   data: {
     *     // ... data to create a Batch
     *   }
     * })
     * 
    **/
    create<T extends BatchCreateArgs<ExtArgs>>(
      args: SelectSubset<T, BatchCreateArgs<ExtArgs>>
    ): Prisma__BatchClient<$Types.GetResult<BatchPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Batches.
     *     @param {BatchCreateManyArgs} args - Arguments to create many Batches.
     *     @example
     *     // Create many Batches
     *     const batch = await prisma.batch.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BatchCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BatchCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Batch.
     * @param {BatchDeleteArgs} args - Arguments to delete one Batch.
     * @example
     * // Delete one Batch
     * const Batch = await prisma.batch.delete({
     *   where: {
     *     // ... filter to delete one Batch
     *   }
     * })
     * 
    **/
    delete<T extends BatchDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, BatchDeleteArgs<ExtArgs>>
    ): Prisma__BatchClient<$Types.GetResult<BatchPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Batch.
     * @param {BatchUpdateArgs} args - Arguments to update one Batch.
     * @example
     * // Update one Batch
     * const batch = await prisma.batch.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BatchUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, BatchUpdateArgs<ExtArgs>>
    ): Prisma__BatchClient<$Types.GetResult<BatchPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Batches.
     * @param {BatchDeleteManyArgs} args - Arguments to filter Batches to delete.
     * @example
     * // Delete a few Batches
     * const { count } = await prisma.batch.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BatchDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BatchDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Batches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BatchUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Batches
     * const batch = await prisma.batch.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BatchUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, BatchUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Batch.
     * @param {BatchUpsertArgs} args - Arguments to update or create a Batch.
     * @example
     * // Update or create a Batch
     * const batch = await prisma.batch.upsert({
     *   create: {
     *     // ... data to create a Batch
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Batch we want to update
     *   }
     * })
    **/
    upsert<T extends BatchUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, BatchUpsertArgs<ExtArgs>>
    ): Prisma__BatchClient<$Types.GetResult<BatchPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Batches.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BatchCountArgs} args - Arguments to filter Batches to count.
     * @example
     * // Count the number of Batches
     * const count = await prisma.batch.count({
     *   where: {
     *     // ... the filter for the Batches we want to count
     *   }
     * })
    **/
    count<T extends BatchCountArgs>(
      args?: Subset<T, BatchCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BatchCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Batch.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BatchAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BatchAggregateArgs>(args: Subset<T, BatchAggregateArgs>): Prisma.PrismaPromise<GetBatchAggregateType<T>>

    /**
     * Group by Batch.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BatchGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BatchGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BatchGroupByArgs['orderBy'] }
        : { orderBy?: BatchGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BatchGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBatchGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Batch.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__BatchClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    tempWallet<T extends WalletArgs<ExtArgs> = {}>(args?: Subset<T, WalletArgs<ExtArgs>>): Prisma__WalletClient<$Types.GetResult<WalletPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    proofs<T extends Batch$proofsArgs<ExtArgs> = {}>(args?: Subset<T, Batch$proofsArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<ProofPayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Batch base type for findUnique actions
   */
  export type BatchFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Batch
     */
    select?: BatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BatchInclude<ExtArgs> | null
    /**
     * Filter, which Batch to fetch.
     */
    where: BatchWhereUniqueInput
  }

  /**
   * Batch findUnique
   */
  export interface BatchFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends BatchFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Batch findUniqueOrThrow
   */
  export type BatchFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Batch
     */
    select?: BatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BatchInclude<ExtArgs> | null
    /**
     * Filter, which Batch to fetch.
     */
    where: BatchWhereUniqueInput
  }


  /**
   * Batch base type for findFirst actions
   */
  export type BatchFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Batch
     */
    select?: BatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BatchInclude<ExtArgs> | null
    /**
     * Filter, which Batch to fetch.
     */
    where?: BatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Batches to fetch.
     */
    orderBy?: Enumerable<BatchOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Batches.
     */
    cursor?: BatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Batches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Batches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Batches.
     */
    distinct?: Enumerable<BatchScalarFieldEnum>
  }

  /**
   * Batch findFirst
   */
  export interface BatchFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends BatchFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Batch findFirstOrThrow
   */
  export type BatchFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Batch
     */
    select?: BatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BatchInclude<ExtArgs> | null
    /**
     * Filter, which Batch to fetch.
     */
    where?: BatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Batches to fetch.
     */
    orderBy?: Enumerable<BatchOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Batches.
     */
    cursor?: BatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Batches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Batches.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Batches.
     */
    distinct?: Enumerable<BatchScalarFieldEnum>
  }


  /**
   * Batch findMany
   */
  export type BatchFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Batch
     */
    select?: BatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BatchInclude<ExtArgs> | null
    /**
     * Filter, which Batches to fetch.
     */
    where?: BatchWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Batches to fetch.
     */
    orderBy?: Enumerable<BatchOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Batches.
     */
    cursor?: BatchWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Batches from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Batches.
     */
    skip?: number
    distinct?: Enumerable<BatchScalarFieldEnum>
  }


  /**
   * Batch create
   */
  export type BatchCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Batch
     */
    select?: BatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BatchInclude<ExtArgs> | null
    /**
     * The data needed to create a Batch.
     */
    data: XOR<BatchCreateInput, BatchUncheckedCreateInput>
  }


  /**
   * Batch createMany
   */
  export type BatchCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Batches.
     */
    data: Enumerable<BatchCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Batch update
   */
  export type BatchUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Batch
     */
    select?: BatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BatchInclude<ExtArgs> | null
    /**
     * The data needed to update a Batch.
     */
    data: XOR<BatchUpdateInput, BatchUncheckedUpdateInput>
    /**
     * Choose, which Batch to update.
     */
    where: BatchWhereUniqueInput
  }


  /**
   * Batch updateMany
   */
  export type BatchUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Batches.
     */
    data: XOR<BatchUpdateManyMutationInput, BatchUncheckedUpdateManyInput>
    /**
     * Filter which Batches to update
     */
    where?: BatchWhereInput
  }


  /**
   * Batch upsert
   */
  export type BatchUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Batch
     */
    select?: BatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BatchInclude<ExtArgs> | null
    /**
     * The filter to search for the Batch to update in case it exists.
     */
    where: BatchWhereUniqueInput
    /**
     * In case the Batch found by the `where` argument doesn't exist, create a new Batch with this data.
     */
    create: XOR<BatchCreateInput, BatchUncheckedCreateInput>
    /**
     * In case the Batch was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BatchUpdateInput, BatchUncheckedUpdateInput>
  }


  /**
   * Batch delete
   */
  export type BatchDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Batch
     */
    select?: BatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BatchInclude<ExtArgs> | null
    /**
     * Filter which Batch to delete.
     */
    where: BatchWhereUniqueInput
  }


  /**
   * Batch deleteMany
   */
  export type BatchDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Batches to delete
     */
    where?: BatchWhereInput
  }


  /**
   * Batch.proofs
   */
  export type Batch$proofsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Proof
     */
    select?: ProofSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProofInclude<ExtArgs> | null
    where?: ProofWhereInput
    orderBy?: Enumerable<ProofOrderByWithRelationInput>
    cursor?: ProofWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ProofScalarFieldEnum>
  }


  /**
   * Batch without action
   */
  export type BatchArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Batch
     */
    select?: BatchSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: BatchInclude<ExtArgs> | null
  }



  /**
   * Model Organization
   */


  export type AggregateOrganization = {
    _count: OrganizationCountAggregateOutputType | null
    _min: OrganizationMinAggregateOutputType | null
    _max: OrganizationMaxAggregateOutputType | null
  }

  export type OrganizationMinAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
    apiKey: string | null
  }

  export type OrganizationMaxAggregateOutputType = {
    id: string | null
    name: string | null
    createdAt: Date | null
    updatedAt: Date | null
    apiKey: string | null
  }

  export type OrganizationCountAggregateOutputType = {
    id: number
    name: number
    createdAt: number
    updatedAt: number
    apiKey: number
    settings: number
    _all: number
  }


  export type OrganizationMinAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    apiKey?: true
  }

  export type OrganizationMaxAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    apiKey?: true
  }

  export type OrganizationCountAggregateInputType = {
    id?: true
    name?: true
    createdAt?: true
    updatedAt?: true
    apiKey?: true
    settings?: true
    _all?: true
  }

  export type OrganizationAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Organization to aggregate.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: Enumerable<OrganizationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Organizations
    **/
    _count?: true | OrganizationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrganizationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrganizationMaxAggregateInputType
  }

  export type GetOrganizationAggregateType<T extends OrganizationAggregateArgs> = {
        [P in keyof T & keyof AggregateOrganization]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrganization[P]>
      : GetScalarType<T[P], AggregateOrganization[P]>
  }




  export type OrganizationGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: OrganizationWhereInput
    orderBy?: Enumerable<OrganizationOrderByWithAggregationInput>
    by: OrganizationScalarFieldEnum[]
    having?: OrganizationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrganizationCountAggregateInputType | true
    _min?: OrganizationMinAggregateInputType
    _max?: OrganizationMaxAggregateInputType
  }


  export type OrganizationGroupByOutputType = {
    id: string
    name: string
    createdAt: Date
    updatedAt: Date
    apiKey: string | null
    settings: JsonValue
    _count: OrganizationCountAggregateOutputType | null
    _min: OrganizationMinAggregateOutputType | null
    _max: OrganizationMaxAggregateOutputType | null
  }

  type GetOrganizationGroupByPayload<T extends OrganizationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<OrganizationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrganizationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrganizationGroupByOutputType[P]>
            : GetScalarType<T[P], OrganizationGroupByOutputType[P]>
        }
      >
    >


  export type OrganizationSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    apiKey?: boolean
    settings?: boolean
    members?: boolean | Organization$membersArgs<ExtArgs>
    templates?: boolean | Organization$templatesArgs<ExtArgs>
    _count?: boolean | OrganizationCountOutputTypeArgs<ExtArgs>
  }, ExtArgs["result"]["organization"]>

  export type OrganizationSelectScalar = {
    id?: boolean
    name?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    apiKey?: boolean
    settings?: boolean
  }

  export type OrganizationInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    members?: boolean | Organization$membersArgs<ExtArgs>
    templates?: boolean | Organization$templatesArgs<ExtArgs>
    _count?: boolean | OrganizationCountOutputTypeArgs<ExtArgs>
  }


  type OrganizationGetPayload<S extends boolean | null | undefined | OrganizationArgs> = $Types.GetResult<OrganizationPayload, S>

  type OrganizationCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<OrganizationFindManyArgs, 'select' | 'include'> & {
      select?: OrganizationCountAggregateInputType | true
    }

  export interface OrganizationDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Organization'], meta: { name: 'Organization' } }
    /**
     * Find zero or one Organization that matches the filter.
     * @param {OrganizationFindUniqueArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends OrganizationFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, OrganizationFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'Organization'> extends True ? Prisma__OrganizationClient<$Types.GetResult<OrganizationPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__OrganizationClient<$Types.GetResult<OrganizationPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one Organization that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {OrganizationFindUniqueOrThrowArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends OrganizationFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, OrganizationFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__OrganizationClient<$Types.GetResult<OrganizationPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first Organization that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationFindFirstArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends OrganizationFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, OrganizationFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'Organization'> extends True ? Prisma__OrganizationClient<$Types.GetResult<OrganizationPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__OrganizationClient<$Types.GetResult<OrganizationPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first Organization that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationFindFirstOrThrowArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends OrganizationFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, OrganizationFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__OrganizationClient<$Types.GetResult<OrganizationPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more Organizations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Organizations
     * const organizations = await prisma.organization.findMany()
     * 
     * // Get first 10 Organizations
     * const organizations = await prisma.organization.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const organizationWithIdOnly = await prisma.organization.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends OrganizationFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OrganizationFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<OrganizationPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a Organization.
     * @param {OrganizationCreateArgs} args - Arguments to create a Organization.
     * @example
     * // Create one Organization
     * const Organization = await prisma.organization.create({
     *   data: {
     *     // ... data to create a Organization
     *   }
     * })
     * 
    **/
    create<T extends OrganizationCreateArgs<ExtArgs>>(
      args: SelectSubset<T, OrganizationCreateArgs<ExtArgs>>
    ): Prisma__OrganizationClient<$Types.GetResult<OrganizationPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many Organizations.
     *     @param {OrganizationCreateManyArgs} args - Arguments to create many Organizations.
     *     @example
     *     // Create many Organizations
     *     const organization = await prisma.organization.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends OrganizationCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OrganizationCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Organization.
     * @param {OrganizationDeleteArgs} args - Arguments to delete one Organization.
     * @example
     * // Delete one Organization
     * const Organization = await prisma.organization.delete({
     *   where: {
     *     // ... filter to delete one Organization
     *   }
     * })
     * 
    **/
    delete<T extends OrganizationDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, OrganizationDeleteArgs<ExtArgs>>
    ): Prisma__OrganizationClient<$Types.GetResult<OrganizationPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one Organization.
     * @param {OrganizationUpdateArgs} args - Arguments to update one Organization.
     * @example
     * // Update one Organization
     * const organization = await prisma.organization.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends OrganizationUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, OrganizationUpdateArgs<ExtArgs>>
    ): Prisma__OrganizationClient<$Types.GetResult<OrganizationPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more Organizations.
     * @param {OrganizationDeleteManyArgs} args - Arguments to filter Organizations to delete.
     * @example
     * // Delete a few Organizations
     * const { count } = await prisma.organization.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends OrganizationDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OrganizationDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Organizations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Organizations
     * const organization = await prisma.organization.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends OrganizationUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, OrganizationUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Organization.
     * @param {OrganizationUpsertArgs} args - Arguments to update or create a Organization.
     * @example
     * // Update or create a Organization
     * const organization = await prisma.organization.upsert({
     *   create: {
     *     // ... data to create a Organization
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Organization we want to update
     *   }
     * })
    **/
    upsert<T extends OrganizationUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, OrganizationUpsertArgs<ExtArgs>>
    ): Prisma__OrganizationClient<$Types.GetResult<OrganizationPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of Organizations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationCountArgs} args - Arguments to filter Organizations to count.
     * @example
     * // Count the number of Organizations
     * const count = await prisma.organization.count({
     *   where: {
     *     // ... the filter for the Organizations we want to count
     *   }
     * })
    **/
    count<T extends OrganizationCountArgs>(
      args?: Subset<T, OrganizationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrganizationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Organization.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrganizationAggregateArgs>(args: Subset<T, OrganizationAggregateArgs>): Prisma.PrismaPromise<GetOrganizationAggregateType<T>>

    /**
     * Group by Organization.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrganizationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrganizationGroupByArgs['orderBy'] }
        : { orderBy?: OrganizationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrganizationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrganizationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for Organization.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__OrganizationClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    members<T extends Organization$membersArgs<ExtArgs> = {}>(args?: Subset<T, Organization$membersArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<OrganizationUserPayload<ExtArgs>, T, 'findMany', never>| Null>;

    templates<T extends Organization$templatesArgs<ExtArgs> = {}>(args?: Subset<T, Organization$templatesArgs<ExtArgs>>): Prisma.PrismaPromise<$Types.GetResult<ProofTemplatePayload<ExtArgs>, T, 'findMany', never>| Null>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * Organization base type for findUnique actions
   */
  export type OrganizationFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organization to fetch.
     */
    where: OrganizationWhereUniqueInput
  }

  /**
   * Organization findUnique
   */
  export interface OrganizationFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends OrganizationFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Organization findUniqueOrThrow
   */
  export type OrganizationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organization to fetch.
     */
    where: OrganizationWhereUniqueInput
  }


  /**
   * Organization base type for findFirst actions
   */
  export type OrganizationFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organization to fetch.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: Enumerable<OrganizationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Organizations.
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Organizations.
     */
    distinct?: Enumerable<OrganizationScalarFieldEnum>
  }

  /**
   * Organization findFirst
   */
  export interface OrganizationFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends OrganizationFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * Organization findFirstOrThrow
   */
  export type OrganizationFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organization to fetch.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: Enumerable<OrganizationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Organizations.
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Organizations.
     */
    distinct?: Enumerable<OrganizationScalarFieldEnum>
  }


  /**
   * Organization findMany
   */
  export type OrganizationFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organizations to fetch.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: Enumerable<OrganizationOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Organizations.
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    distinct?: Enumerable<OrganizationScalarFieldEnum>
  }


  /**
   * Organization create
   */
  export type OrganizationCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * The data needed to create a Organization.
     */
    data: XOR<OrganizationCreateInput, OrganizationUncheckedCreateInput>
  }


  /**
   * Organization createMany
   */
  export type OrganizationCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Organizations.
     */
    data: Enumerable<OrganizationCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * Organization update
   */
  export type OrganizationUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * The data needed to update a Organization.
     */
    data: XOR<OrganizationUpdateInput, OrganizationUncheckedUpdateInput>
    /**
     * Choose, which Organization to update.
     */
    where: OrganizationWhereUniqueInput
  }


  /**
   * Organization updateMany
   */
  export type OrganizationUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Organizations.
     */
    data: XOR<OrganizationUpdateManyMutationInput, OrganizationUncheckedUpdateManyInput>
    /**
     * Filter which Organizations to update
     */
    where?: OrganizationWhereInput
  }


  /**
   * Organization upsert
   */
  export type OrganizationUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * The filter to search for the Organization to update in case it exists.
     */
    where: OrganizationWhereUniqueInput
    /**
     * In case the Organization found by the `where` argument doesn't exist, create a new Organization with this data.
     */
    create: XOR<OrganizationCreateInput, OrganizationUncheckedCreateInput>
    /**
     * In case the Organization was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrganizationUpdateInput, OrganizationUncheckedUpdateInput>
  }


  /**
   * Organization delete
   */
  export type OrganizationDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter which Organization to delete.
     */
    where: OrganizationWhereUniqueInput
  }


  /**
   * Organization deleteMany
   */
  export type OrganizationDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which Organizations to delete
     */
    where?: OrganizationWhereInput
  }


  /**
   * Organization.members
   */
  export type Organization$membersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrganizationUser
     */
    select?: OrganizationUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrganizationUserInclude<ExtArgs> | null
    where?: OrganizationUserWhereInput
    orderBy?: Enumerable<OrganizationUserOrderByWithRelationInput>
    cursor?: OrganizationUserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<OrganizationUserScalarFieldEnum>
  }


  /**
   * Organization.templates
   */
  export type Organization$templatesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProofTemplate
     */
    select?: ProofTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProofTemplateInclude<ExtArgs> | null
    where?: ProofTemplateWhereInput
    orderBy?: Enumerable<ProofTemplateOrderByWithRelationInput>
    cursor?: ProofTemplateWhereUniqueInput
    take?: number
    skip?: number
    distinct?: Enumerable<ProofTemplateScalarFieldEnum>
  }


  /**
   * Organization without action
   */
  export type OrganizationArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrganizationInclude<ExtArgs> | null
  }



  /**
   * Model OrganizationUser
   */


  export type AggregateOrganizationUser = {
    _count: OrganizationUserCountAggregateOutputType | null
    _min: OrganizationUserMinAggregateOutputType | null
    _max: OrganizationUserMaxAggregateOutputType | null
  }

  export type OrganizationUserMinAggregateOutputType = {
    id: string | null
    userId: string | null
    organizationId: string | null
    role: OrgRole | null
    joinedAt: Date | null
  }

  export type OrganizationUserMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    organizationId: string | null
    role: OrgRole | null
    joinedAt: Date | null
  }

  export type OrganizationUserCountAggregateOutputType = {
    id: number
    userId: number
    organizationId: number
    role: number
    joinedAt: number
    _all: number
  }


  export type OrganizationUserMinAggregateInputType = {
    id?: true
    userId?: true
    organizationId?: true
    role?: true
    joinedAt?: true
  }

  export type OrganizationUserMaxAggregateInputType = {
    id?: true
    userId?: true
    organizationId?: true
    role?: true
    joinedAt?: true
  }

  export type OrganizationUserCountAggregateInputType = {
    id?: true
    userId?: true
    organizationId?: true
    role?: true
    joinedAt?: true
    _all?: true
  }

  export type OrganizationUserAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrganizationUser to aggregate.
     */
    where?: OrganizationUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrganizationUsers to fetch.
     */
    orderBy?: Enumerable<OrganizationUserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrganizationUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrganizationUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrganizationUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OrganizationUsers
    **/
    _count?: true | OrganizationUserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrganizationUserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrganizationUserMaxAggregateInputType
  }

  export type GetOrganizationUserAggregateType<T extends OrganizationUserAggregateArgs> = {
        [P in keyof T & keyof AggregateOrganizationUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrganizationUser[P]>
      : GetScalarType<T[P], AggregateOrganizationUser[P]>
  }




  export type OrganizationUserGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: OrganizationUserWhereInput
    orderBy?: Enumerable<OrganizationUserOrderByWithAggregationInput>
    by: OrganizationUserScalarFieldEnum[]
    having?: OrganizationUserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrganizationUserCountAggregateInputType | true
    _min?: OrganizationUserMinAggregateInputType
    _max?: OrganizationUserMaxAggregateInputType
  }


  export type OrganizationUserGroupByOutputType = {
    id: string
    userId: string
    organizationId: string
    role: OrgRole
    joinedAt: Date
    _count: OrganizationUserCountAggregateOutputType | null
    _min: OrganizationUserMinAggregateOutputType | null
    _max: OrganizationUserMaxAggregateOutputType | null
  }

  type GetOrganizationUserGroupByPayload<T extends OrganizationUserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<OrganizationUserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrganizationUserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrganizationUserGroupByOutputType[P]>
            : GetScalarType<T[P], OrganizationUserGroupByOutputType[P]>
        }
      >
    >


  export type OrganizationUserSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    organizationId?: boolean
    role?: boolean
    joinedAt?: boolean
    user?: boolean | UserArgs<ExtArgs>
    organization?: boolean | OrganizationArgs<ExtArgs>
  }, ExtArgs["result"]["organizationUser"]>

  export type OrganizationUserSelectScalar = {
    id?: boolean
    userId?: boolean
    organizationId?: boolean
    role?: boolean
    joinedAt?: boolean
  }

  export type OrganizationUserInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | UserArgs<ExtArgs>
    organization?: boolean | OrganizationArgs<ExtArgs>
  }


  type OrganizationUserGetPayload<S extends boolean | null | undefined | OrganizationUserArgs> = $Types.GetResult<OrganizationUserPayload, S>

  type OrganizationUserCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<OrganizationUserFindManyArgs, 'select' | 'include'> & {
      select?: OrganizationUserCountAggregateInputType | true
    }

  export interface OrganizationUserDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OrganizationUser'], meta: { name: 'OrganizationUser' } }
    /**
     * Find zero or one OrganizationUser that matches the filter.
     * @param {OrganizationUserFindUniqueArgs} args - Arguments to find a OrganizationUser
     * @example
     * // Get one OrganizationUser
     * const organizationUser = await prisma.organizationUser.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends OrganizationUserFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, OrganizationUserFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'OrganizationUser'> extends True ? Prisma__OrganizationUserClient<$Types.GetResult<OrganizationUserPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__OrganizationUserClient<$Types.GetResult<OrganizationUserPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one OrganizationUser that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {OrganizationUserFindUniqueOrThrowArgs} args - Arguments to find a OrganizationUser
     * @example
     * // Get one OrganizationUser
     * const organizationUser = await prisma.organizationUser.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends OrganizationUserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, OrganizationUserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__OrganizationUserClient<$Types.GetResult<OrganizationUserPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first OrganizationUser that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationUserFindFirstArgs} args - Arguments to find a OrganizationUser
     * @example
     * // Get one OrganizationUser
     * const organizationUser = await prisma.organizationUser.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends OrganizationUserFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, OrganizationUserFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'OrganizationUser'> extends True ? Prisma__OrganizationUserClient<$Types.GetResult<OrganizationUserPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__OrganizationUserClient<$Types.GetResult<OrganizationUserPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first OrganizationUser that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationUserFindFirstOrThrowArgs} args - Arguments to find a OrganizationUser
     * @example
     * // Get one OrganizationUser
     * const organizationUser = await prisma.organizationUser.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends OrganizationUserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, OrganizationUserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__OrganizationUserClient<$Types.GetResult<OrganizationUserPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more OrganizationUsers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationUserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OrganizationUsers
     * const organizationUsers = await prisma.organizationUser.findMany()
     * 
     * // Get first 10 OrganizationUsers
     * const organizationUsers = await prisma.organizationUser.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const organizationUserWithIdOnly = await prisma.organizationUser.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends OrganizationUserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OrganizationUserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<OrganizationUserPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a OrganizationUser.
     * @param {OrganizationUserCreateArgs} args - Arguments to create a OrganizationUser.
     * @example
     * // Create one OrganizationUser
     * const OrganizationUser = await prisma.organizationUser.create({
     *   data: {
     *     // ... data to create a OrganizationUser
     *   }
     * })
     * 
    **/
    create<T extends OrganizationUserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, OrganizationUserCreateArgs<ExtArgs>>
    ): Prisma__OrganizationUserClient<$Types.GetResult<OrganizationUserPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many OrganizationUsers.
     *     @param {OrganizationUserCreateManyArgs} args - Arguments to create many OrganizationUsers.
     *     @example
     *     // Create many OrganizationUsers
     *     const organizationUser = await prisma.organizationUser.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends OrganizationUserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OrganizationUserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a OrganizationUser.
     * @param {OrganizationUserDeleteArgs} args - Arguments to delete one OrganizationUser.
     * @example
     * // Delete one OrganizationUser
     * const OrganizationUser = await prisma.organizationUser.delete({
     *   where: {
     *     // ... filter to delete one OrganizationUser
     *   }
     * })
     * 
    **/
    delete<T extends OrganizationUserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, OrganizationUserDeleteArgs<ExtArgs>>
    ): Prisma__OrganizationUserClient<$Types.GetResult<OrganizationUserPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one OrganizationUser.
     * @param {OrganizationUserUpdateArgs} args - Arguments to update one OrganizationUser.
     * @example
     * // Update one OrganizationUser
     * const organizationUser = await prisma.organizationUser.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends OrganizationUserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, OrganizationUserUpdateArgs<ExtArgs>>
    ): Prisma__OrganizationUserClient<$Types.GetResult<OrganizationUserPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more OrganizationUsers.
     * @param {OrganizationUserDeleteManyArgs} args - Arguments to filter OrganizationUsers to delete.
     * @example
     * // Delete a few OrganizationUsers
     * const { count } = await prisma.organizationUser.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends OrganizationUserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, OrganizationUserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OrganizationUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationUserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OrganizationUsers
     * const organizationUser = await prisma.organizationUser.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends OrganizationUserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, OrganizationUserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one OrganizationUser.
     * @param {OrganizationUserUpsertArgs} args - Arguments to update or create a OrganizationUser.
     * @example
     * // Update or create a OrganizationUser
     * const organizationUser = await prisma.organizationUser.upsert({
     *   create: {
     *     // ... data to create a OrganizationUser
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OrganizationUser we want to update
     *   }
     * })
    **/
    upsert<T extends OrganizationUserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, OrganizationUserUpsertArgs<ExtArgs>>
    ): Prisma__OrganizationUserClient<$Types.GetResult<OrganizationUserPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of OrganizationUsers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationUserCountArgs} args - Arguments to filter OrganizationUsers to count.
     * @example
     * // Count the number of OrganizationUsers
     * const count = await prisma.organizationUser.count({
     *   where: {
     *     // ... the filter for the OrganizationUsers we want to count
     *   }
     * })
    **/
    count<T extends OrganizationUserCountArgs>(
      args?: Subset<T, OrganizationUserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrganizationUserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OrganizationUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationUserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrganizationUserAggregateArgs>(args: Subset<T, OrganizationUserAggregateArgs>): Prisma.PrismaPromise<GetOrganizationUserAggregateType<T>>

    /**
     * Group by OrganizationUser.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationUserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrganizationUserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrganizationUserGroupByArgs['orderBy'] }
        : { orderBy?: OrganizationUserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrganizationUserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrganizationUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for OrganizationUser.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__OrganizationUserClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    user<T extends UserArgs<ExtArgs> = {}>(args?: Subset<T, UserArgs<ExtArgs>>): Prisma__UserClient<$Types.GetResult<UserPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    organization<T extends OrganizationArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationArgs<ExtArgs>>): Prisma__OrganizationClient<$Types.GetResult<OrganizationPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * OrganizationUser base type for findUnique actions
   */
  export type OrganizationUserFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrganizationUser
     */
    select?: OrganizationUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrganizationUserInclude<ExtArgs> | null
    /**
     * Filter, which OrganizationUser to fetch.
     */
    where: OrganizationUserWhereUniqueInput
  }

  /**
   * OrganizationUser findUnique
   */
  export interface OrganizationUserFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends OrganizationUserFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * OrganizationUser findUniqueOrThrow
   */
  export type OrganizationUserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrganizationUser
     */
    select?: OrganizationUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrganizationUserInclude<ExtArgs> | null
    /**
     * Filter, which OrganizationUser to fetch.
     */
    where: OrganizationUserWhereUniqueInput
  }


  /**
   * OrganizationUser base type for findFirst actions
   */
  export type OrganizationUserFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrganizationUser
     */
    select?: OrganizationUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrganizationUserInclude<ExtArgs> | null
    /**
     * Filter, which OrganizationUser to fetch.
     */
    where?: OrganizationUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrganizationUsers to fetch.
     */
    orderBy?: Enumerable<OrganizationUserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrganizationUsers.
     */
    cursor?: OrganizationUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrganizationUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrganizationUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrganizationUsers.
     */
    distinct?: Enumerable<OrganizationUserScalarFieldEnum>
  }

  /**
   * OrganizationUser findFirst
   */
  export interface OrganizationUserFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends OrganizationUserFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * OrganizationUser findFirstOrThrow
   */
  export type OrganizationUserFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrganizationUser
     */
    select?: OrganizationUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrganizationUserInclude<ExtArgs> | null
    /**
     * Filter, which OrganizationUser to fetch.
     */
    where?: OrganizationUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrganizationUsers to fetch.
     */
    orderBy?: Enumerable<OrganizationUserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OrganizationUsers.
     */
    cursor?: OrganizationUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrganizationUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrganizationUsers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OrganizationUsers.
     */
    distinct?: Enumerable<OrganizationUserScalarFieldEnum>
  }


  /**
   * OrganizationUser findMany
   */
  export type OrganizationUserFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrganizationUser
     */
    select?: OrganizationUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrganizationUserInclude<ExtArgs> | null
    /**
     * Filter, which OrganizationUsers to fetch.
     */
    where?: OrganizationUserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OrganizationUsers to fetch.
     */
    orderBy?: Enumerable<OrganizationUserOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OrganizationUsers.
     */
    cursor?: OrganizationUserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OrganizationUsers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OrganizationUsers.
     */
    skip?: number
    distinct?: Enumerable<OrganizationUserScalarFieldEnum>
  }


  /**
   * OrganizationUser create
   */
  export type OrganizationUserCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrganizationUser
     */
    select?: OrganizationUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrganizationUserInclude<ExtArgs> | null
    /**
     * The data needed to create a OrganizationUser.
     */
    data: XOR<OrganizationUserCreateInput, OrganizationUserUncheckedCreateInput>
  }


  /**
   * OrganizationUser createMany
   */
  export type OrganizationUserCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OrganizationUsers.
     */
    data: Enumerable<OrganizationUserCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * OrganizationUser update
   */
  export type OrganizationUserUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrganizationUser
     */
    select?: OrganizationUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrganizationUserInclude<ExtArgs> | null
    /**
     * The data needed to update a OrganizationUser.
     */
    data: XOR<OrganizationUserUpdateInput, OrganizationUserUncheckedUpdateInput>
    /**
     * Choose, which OrganizationUser to update.
     */
    where: OrganizationUserWhereUniqueInput
  }


  /**
   * OrganizationUser updateMany
   */
  export type OrganizationUserUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OrganizationUsers.
     */
    data: XOR<OrganizationUserUpdateManyMutationInput, OrganizationUserUncheckedUpdateManyInput>
    /**
     * Filter which OrganizationUsers to update
     */
    where?: OrganizationUserWhereInput
  }


  /**
   * OrganizationUser upsert
   */
  export type OrganizationUserUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrganizationUser
     */
    select?: OrganizationUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrganizationUserInclude<ExtArgs> | null
    /**
     * The filter to search for the OrganizationUser to update in case it exists.
     */
    where: OrganizationUserWhereUniqueInput
    /**
     * In case the OrganizationUser found by the `where` argument doesn't exist, create a new OrganizationUser with this data.
     */
    create: XOR<OrganizationUserCreateInput, OrganizationUserUncheckedCreateInput>
    /**
     * In case the OrganizationUser was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrganizationUserUpdateInput, OrganizationUserUncheckedUpdateInput>
  }


  /**
   * OrganizationUser delete
   */
  export type OrganizationUserDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrganizationUser
     */
    select?: OrganizationUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrganizationUserInclude<ExtArgs> | null
    /**
     * Filter which OrganizationUser to delete.
     */
    where: OrganizationUserWhereUniqueInput
  }


  /**
   * OrganizationUser deleteMany
   */
  export type OrganizationUserDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which OrganizationUsers to delete
     */
    where?: OrganizationUserWhereInput
  }


  /**
   * OrganizationUser without action
   */
  export type OrganizationUserArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrganizationUser
     */
    select?: OrganizationUserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: OrganizationUserInclude<ExtArgs> | null
  }



  /**
   * Model ProofTemplate
   */


  export type AggregateProofTemplate = {
    _count: ProofTemplateCountAggregateOutputType | null
    _avg: ProofTemplateAvgAggregateOutputType | null
    _sum: ProofTemplateSumAggregateOutputType | null
    _min: ProofTemplateMinAggregateOutputType | null
    _max: ProofTemplateMaxAggregateOutputType | null
  }

  export type ProofTemplateAvgAggregateOutputType = {
    expiryPeriod: number | null
  }

  export type ProofTemplateSumAggregateOutputType = {
    expiryPeriod: number | null
  }

  export type ProofTemplateMinAggregateOutputType = {
    id: string | null
    organizationId: string | null
    name: string | null
    description: string | null
    proofType: ProofType | null
    threshold: string | null
    expiryPeriod: number | null
    createdAt: Date | null
    updatedAt: Date | null
    isActive: boolean | null
  }

  export type ProofTemplateMaxAggregateOutputType = {
    id: string | null
    organizationId: string | null
    name: string | null
    description: string | null
    proofType: ProofType | null
    threshold: string | null
    expiryPeriod: number | null
    createdAt: Date | null
    updatedAt: Date | null
    isActive: boolean | null
  }

  export type ProofTemplateCountAggregateOutputType = {
    id: number
    organizationId: number
    name: number
    description: number
    proofType: number
    threshold: number
    expiryPeriod: number
    createdAt: number
    updatedAt: number
    isActive: number
    settings: number
    _all: number
  }


  export type ProofTemplateAvgAggregateInputType = {
    expiryPeriod?: true
  }

  export type ProofTemplateSumAggregateInputType = {
    expiryPeriod?: true
  }

  export type ProofTemplateMinAggregateInputType = {
    id?: true
    organizationId?: true
    name?: true
    description?: true
    proofType?: true
    threshold?: true
    expiryPeriod?: true
    createdAt?: true
    updatedAt?: true
    isActive?: true
  }

  export type ProofTemplateMaxAggregateInputType = {
    id?: true
    organizationId?: true
    name?: true
    description?: true
    proofType?: true
    threshold?: true
    expiryPeriod?: true
    createdAt?: true
    updatedAt?: true
    isActive?: true
  }

  export type ProofTemplateCountAggregateInputType = {
    id?: true
    organizationId?: true
    name?: true
    description?: true
    proofType?: true
    threshold?: true
    expiryPeriod?: true
    createdAt?: true
    updatedAt?: true
    isActive?: true
    settings?: true
    _all?: true
  }

  export type ProofTemplateAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProofTemplate to aggregate.
     */
    where?: ProofTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProofTemplates to fetch.
     */
    orderBy?: Enumerable<ProofTemplateOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProofTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProofTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProofTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProofTemplates
    **/
    _count?: true | ProofTemplateCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProofTemplateAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProofTemplateSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProofTemplateMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProofTemplateMaxAggregateInputType
  }

  export type GetProofTemplateAggregateType<T extends ProofTemplateAggregateArgs> = {
        [P in keyof T & keyof AggregateProofTemplate]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProofTemplate[P]>
      : GetScalarType<T[P], AggregateProofTemplate[P]>
  }




  export type ProofTemplateGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: ProofTemplateWhereInput
    orderBy?: Enumerable<ProofTemplateOrderByWithAggregationInput>
    by: ProofTemplateScalarFieldEnum[]
    having?: ProofTemplateScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProofTemplateCountAggregateInputType | true
    _avg?: ProofTemplateAvgAggregateInputType
    _sum?: ProofTemplateSumAggregateInputType
    _min?: ProofTemplateMinAggregateInputType
    _max?: ProofTemplateMaxAggregateInputType
  }


  export type ProofTemplateGroupByOutputType = {
    id: string
    organizationId: string
    name: string
    description: string | null
    proofType: ProofType
    threshold: string
    expiryPeriod: number
    createdAt: Date
    updatedAt: Date
    isActive: boolean
    settings: JsonValue
    _count: ProofTemplateCountAggregateOutputType | null
    _avg: ProofTemplateAvgAggregateOutputType | null
    _sum: ProofTemplateSumAggregateOutputType | null
    _min: ProofTemplateMinAggregateOutputType | null
    _max: ProofTemplateMaxAggregateOutputType | null
  }

  type GetProofTemplateGroupByPayload<T extends ProofTemplateGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<ProofTemplateGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProofTemplateGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProofTemplateGroupByOutputType[P]>
            : GetScalarType<T[P], ProofTemplateGroupByOutputType[P]>
        }
      >
    >


  export type ProofTemplateSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    organizationId?: boolean
    name?: boolean
    description?: boolean
    proofType?: boolean
    threshold?: boolean
    expiryPeriod?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isActive?: boolean
    settings?: boolean
    organization?: boolean | OrganizationArgs<ExtArgs>
  }, ExtArgs["result"]["proofTemplate"]>

  export type ProofTemplateSelectScalar = {
    id?: boolean
    organizationId?: boolean
    name?: boolean
    description?: boolean
    proofType?: boolean
    threshold?: boolean
    expiryPeriod?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isActive?: boolean
    settings?: boolean
  }

  export type ProofTemplateInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    organization?: boolean | OrganizationArgs<ExtArgs>
  }


  type ProofTemplateGetPayload<S extends boolean | null | undefined | ProofTemplateArgs> = $Types.GetResult<ProofTemplatePayload, S>

  type ProofTemplateCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<ProofTemplateFindManyArgs, 'select' | 'include'> & {
      select?: ProofTemplateCountAggregateInputType | true
    }

  export interface ProofTemplateDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProofTemplate'], meta: { name: 'ProofTemplate' } }
    /**
     * Find zero or one ProofTemplate that matches the filter.
     * @param {ProofTemplateFindUniqueArgs} args - Arguments to find a ProofTemplate
     * @example
     * // Get one ProofTemplate
     * const proofTemplate = await prisma.proofTemplate.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ProofTemplateFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, ProofTemplateFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'ProofTemplate'> extends True ? Prisma__ProofTemplateClient<$Types.GetResult<ProofTemplatePayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__ProofTemplateClient<$Types.GetResult<ProofTemplatePayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one ProofTemplate that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ProofTemplateFindUniqueOrThrowArgs} args - Arguments to find a ProofTemplate
     * @example
     * // Get one ProofTemplate
     * const proofTemplate = await prisma.proofTemplate.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ProofTemplateFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProofTemplateFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ProofTemplateClient<$Types.GetResult<ProofTemplatePayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first ProofTemplate that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProofTemplateFindFirstArgs} args - Arguments to find a ProofTemplate
     * @example
     * // Get one ProofTemplate
     * const proofTemplate = await prisma.proofTemplate.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ProofTemplateFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, ProofTemplateFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'ProofTemplate'> extends True ? Prisma__ProofTemplateClient<$Types.GetResult<ProofTemplatePayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__ProofTemplateClient<$Types.GetResult<ProofTemplatePayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first ProofTemplate that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProofTemplateFindFirstOrThrowArgs} args - Arguments to find a ProofTemplate
     * @example
     * // Get one ProofTemplate
     * const proofTemplate = await prisma.proofTemplate.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ProofTemplateFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ProofTemplateFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ProofTemplateClient<$Types.GetResult<ProofTemplatePayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more ProofTemplates that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProofTemplateFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProofTemplates
     * const proofTemplates = await prisma.proofTemplate.findMany()
     * 
     * // Get first 10 ProofTemplates
     * const proofTemplates = await prisma.proofTemplate.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const proofTemplateWithIdOnly = await prisma.proofTemplate.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ProofTemplateFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProofTemplateFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<ProofTemplatePayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a ProofTemplate.
     * @param {ProofTemplateCreateArgs} args - Arguments to create a ProofTemplate.
     * @example
     * // Create one ProofTemplate
     * const ProofTemplate = await prisma.proofTemplate.create({
     *   data: {
     *     // ... data to create a ProofTemplate
     *   }
     * })
     * 
    **/
    create<T extends ProofTemplateCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ProofTemplateCreateArgs<ExtArgs>>
    ): Prisma__ProofTemplateClient<$Types.GetResult<ProofTemplatePayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many ProofTemplates.
     *     @param {ProofTemplateCreateManyArgs} args - Arguments to create many ProofTemplates.
     *     @example
     *     // Create many ProofTemplates
     *     const proofTemplate = await prisma.proofTemplate.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ProofTemplateCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProofTemplateCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ProofTemplate.
     * @param {ProofTemplateDeleteArgs} args - Arguments to delete one ProofTemplate.
     * @example
     * // Delete one ProofTemplate
     * const ProofTemplate = await prisma.proofTemplate.delete({
     *   where: {
     *     // ... filter to delete one ProofTemplate
     *   }
     * })
     * 
    **/
    delete<T extends ProofTemplateDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ProofTemplateDeleteArgs<ExtArgs>>
    ): Prisma__ProofTemplateClient<$Types.GetResult<ProofTemplatePayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one ProofTemplate.
     * @param {ProofTemplateUpdateArgs} args - Arguments to update one ProofTemplate.
     * @example
     * // Update one ProofTemplate
     * const proofTemplate = await prisma.proofTemplate.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ProofTemplateUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ProofTemplateUpdateArgs<ExtArgs>>
    ): Prisma__ProofTemplateClient<$Types.GetResult<ProofTemplatePayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more ProofTemplates.
     * @param {ProofTemplateDeleteManyArgs} args - Arguments to filter ProofTemplates to delete.
     * @example
     * // Delete a few ProofTemplates
     * const { count } = await prisma.proofTemplate.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ProofTemplateDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ProofTemplateDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProofTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProofTemplateUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProofTemplates
     * const proofTemplate = await prisma.proofTemplate.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ProofTemplateUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ProofTemplateUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProofTemplate.
     * @param {ProofTemplateUpsertArgs} args - Arguments to update or create a ProofTemplate.
     * @example
     * // Update or create a ProofTemplate
     * const proofTemplate = await prisma.proofTemplate.upsert({
     *   create: {
     *     // ... data to create a ProofTemplate
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProofTemplate we want to update
     *   }
     * })
    **/
    upsert<T extends ProofTemplateUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ProofTemplateUpsertArgs<ExtArgs>>
    ): Prisma__ProofTemplateClient<$Types.GetResult<ProofTemplatePayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of ProofTemplates.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProofTemplateCountArgs} args - Arguments to filter ProofTemplates to count.
     * @example
     * // Count the number of ProofTemplates
     * const count = await prisma.proofTemplate.count({
     *   where: {
     *     // ... the filter for the ProofTemplates we want to count
     *   }
     * })
    **/
    count<T extends ProofTemplateCountArgs>(
      args?: Subset<T, ProofTemplateCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProofTemplateCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProofTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProofTemplateAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProofTemplateAggregateArgs>(args: Subset<T, ProofTemplateAggregateArgs>): Prisma.PrismaPromise<GetProofTemplateAggregateType<T>>

    /**
     * Group by ProofTemplate.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProofTemplateGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProofTemplateGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProofTemplateGroupByArgs['orderBy'] }
        : { orderBy?: ProofTemplateGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProofTemplateGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProofTemplateGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for ProofTemplate.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__ProofTemplateClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);

    organization<T extends OrganizationArgs<ExtArgs> = {}>(args?: Subset<T, OrganizationArgs<ExtArgs>>): Prisma__OrganizationClient<$Types.GetResult<OrganizationPayload<ExtArgs>, T, 'findUnique', never> | Null, never, ExtArgs>;

    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * ProofTemplate base type for findUnique actions
   */
  export type ProofTemplateFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProofTemplate
     */
    select?: ProofTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProofTemplateInclude<ExtArgs> | null
    /**
     * Filter, which ProofTemplate to fetch.
     */
    where: ProofTemplateWhereUniqueInput
  }

  /**
   * ProofTemplate findUnique
   */
  export interface ProofTemplateFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ProofTemplateFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ProofTemplate findUniqueOrThrow
   */
  export type ProofTemplateFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProofTemplate
     */
    select?: ProofTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProofTemplateInclude<ExtArgs> | null
    /**
     * Filter, which ProofTemplate to fetch.
     */
    where: ProofTemplateWhereUniqueInput
  }


  /**
   * ProofTemplate base type for findFirst actions
   */
  export type ProofTemplateFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProofTemplate
     */
    select?: ProofTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProofTemplateInclude<ExtArgs> | null
    /**
     * Filter, which ProofTemplate to fetch.
     */
    where?: ProofTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProofTemplates to fetch.
     */
    orderBy?: Enumerable<ProofTemplateOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProofTemplates.
     */
    cursor?: ProofTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProofTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProofTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProofTemplates.
     */
    distinct?: Enumerable<ProofTemplateScalarFieldEnum>
  }

  /**
   * ProofTemplate findFirst
   */
  export interface ProofTemplateFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends ProofTemplateFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * ProofTemplate findFirstOrThrow
   */
  export type ProofTemplateFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProofTemplate
     */
    select?: ProofTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProofTemplateInclude<ExtArgs> | null
    /**
     * Filter, which ProofTemplate to fetch.
     */
    where?: ProofTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProofTemplates to fetch.
     */
    orderBy?: Enumerable<ProofTemplateOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProofTemplates.
     */
    cursor?: ProofTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProofTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProofTemplates.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProofTemplates.
     */
    distinct?: Enumerable<ProofTemplateScalarFieldEnum>
  }


  /**
   * ProofTemplate findMany
   */
  export type ProofTemplateFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProofTemplate
     */
    select?: ProofTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProofTemplateInclude<ExtArgs> | null
    /**
     * Filter, which ProofTemplates to fetch.
     */
    where?: ProofTemplateWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProofTemplates to fetch.
     */
    orderBy?: Enumerable<ProofTemplateOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProofTemplates.
     */
    cursor?: ProofTemplateWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProofTemplates from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProofTemplates.
     */
    skip?: number
    distinct?: Enumerable<ProofTemplateScalarFieldEnum>
  }


  /**
   * ProofTemplate create
   */
  export type ProofTemplateCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProofTemplate
     */
    select?: ProofTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProofTemplateInclude<ExtArgs> | null
    /**
     * The data needed to create a ProofTemplate.
     */
    data: XOR<ProofTemplateCreateInput, ProofTemplateUncheckedCreateInput>
  }


  /**
   * ProofTemplate createMany
   */
  export type ProofTemplateCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProofTemplates.
     */
    data: Enumerable<ProofTemplateCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * ProofTemplate update
   */
  export type ProofTemplateUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProofTemplate
     */
    select?: ProofTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProofTemplateInclude<ExtArgs> | null
    /**
     * The data needed to update a ProofTemplate.
     */
    data: XOR<ProofTemplateUpdateInput, ProofTemplateUncheckedUpdateInput>
    /**
     * Choose, which ProofTemplate to update.
     */
    where: ProofTemplateWhereUniqueInput
  }


  /**
   * ProofTemplate updateMany
   */
  export type ProofTemplateUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProofTemplates.
     */
    data: XOR<ProofTemplateUpdateManyMutationInput, ProofTemplateUncheckedUpdateManyInput>
    /**
     * Filter which ProofTemplates to update
     */
    where?: ProofTemplateWhereInput
  }


  /**
   * ProofTemplate upsert
   */
  export type ProofTemplateUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProofTemplate
     */
    select?: ProofTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProofTemplateInclude<ExtArgs> | null
    /**
     * The filter to search for the ProofTemplate to update in case it exists.
     */
    where: ProofTemplateWhereUniqueInput
    /**
     * In case the ProofTemplate found by the `where` argument doesn't exist, create a new ProofTemplate with this data.
     */
    create: XOR<ProofTemplateCreateInput, ProofTemplateUncheckedCreateInput>
    /**
     * In case the ProofTemplate was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProofTemplateUpdateInput, ProofTemplateUncheckedUpdateInput>
  }


  /**
   * ProofTemplate delete
   */
  export type ProofTemplateDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProofTemplate
     */
    select?: ProofTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProofTemplateInclude<ExtArgs> | null
    /**
     * Filter which ProofTemplate to delete.
     */
    where: ProofTemplateWhereUniqueInput
  }


  /**
   * ProofTemplate deleteMany
   */
  export type ProofTemplateDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProofTemplates to delete
     */
    where?: ProofTemplateWhereInput
  }


  /**
   * ProofTemplate without action
   */
  export type ProofTemplateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProofTemplate
     */
    select?: ProofTemplateSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: ProofTemplateInclude<ExtArgs> | null
  }



  /**
   * Model AuditLog
   */


  export type AggregateAuditLog = {
    _count: AuditLogCountAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  export type AuditLogMinAggregateOutputType = {
    id: string | null
    action: string | null
    entityType: string | null
    entityId: string | null
    userId: string | null
    ipAddress: string | null
    userAgent: string | null
    timestamp: Date | null
  }

  export type AuditLogMaxAggregateOutputType = {
    id: string | null
    action: string | null
    entityType: string | null
    entityId: string | null
    userId: string | null
    ipAddress: string | null
    userAgent: string | null
    timestamp: Date | null
  }

  export type AuditLogCountAggregateOutputType = {
    id: number
    action: number
    entityType: number
    entityId: number
    userId: number
    ipAddress: number
    userAgent: number
    metadata: number
    timestamp: number
    _all: number
  }


  export type AuditLogMinAggregateInputType = {
    id?: true
    action?: true
    entityType?: true
    entityId?: true
    userId?: true
    ipAddress?: true
    userAgent?: true
    timestamp?: true
  }

  export type AuditLogMaxAggregateInputType = {
    id?: true
    action?: true
    entityType?: true
    entityId?: true
    userId?: true
    ipAddress?: true
    userAgent?: true
    timestamp?: true
  }

  export type AuditLogCountAggregateInputType = {
    id?: true
    action?: true
    entityType?: true
    entityId?: true
    userId?: true
    ipAddress?: true
    userAgent?: true
    metadata?: true
    timestamp?: true
    _all?: true
  }

  export type AuditLogAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLog to aggregate.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: Enumerable<AuditLogOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned AuditLogs
    **/
    _count?: true | AuditLogCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AuditLogMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AuditLogMaxAggregateInputType
  }

  export type GetAuditLogAggregateType<T extends AuditLogAggregateArgs> = {
        [P in keyof T & keyof AggregateAuditLog]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAuditLog[P]>
      : GetScalarType<T[P], AggregateAuditLog[P]>
  }




  export type AuditLogGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: AuditLogWhereInput
    orderBy?: Enumerable<AuditLogOrderByWithAggregationInput>
    by: AuditLogScalarFieldEnum[]
    having?: AuditLogScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AuditLogCountAggregateInputType | true
    _min?: AuditLogMinAggregateInputType
    _max?: AuditLogMaxAggregateInputType
  }


  export type AuditLogGroupByOutputType = {
    id: string
    action: string
    entityType: string
    entityId: string | null
    userId: string | null
    ipAddress: string | null
    userAgent: string | null
    metadata: JsonValue | null
    timestamp: Date
    _count: AuditLogCountAggregateOutputType | null
    _min: AuditLogMinAggregateOutputType | null
    _max: AuditLogMaxAggregateOutputType | null
  }

  type GetAuditLogGroupByPayload<T extends AuditLogGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickArray<AuditLogGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AuditLogGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
            : GetScalarType<T[P], AuditLogGroupByOutputType[P]>
        }
      >
    >


  export type AuditLogSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    action?: boolean
    entityType?: boolean
    entityId?: boolean
    userId?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    metadata?: boolean
    timestamp?: boolean
  }, ExtArgs["result"]["auditLog"]>

  export type AuditLogSelectScalar = {
    id?: boolean
    action?: boolean
    entityType?: boolean
    entityId?: boolean
    userId?: boolean
    ipAddress?: boolean
    userAgent?: boolean
    metadata?: boolean
    timestamp?: boolean
  }


  type AuditLogGetPayload<S extends boolean | null | undefined | AuditLogArgs> = $Types.GetResult<AuditLogPayload, S>

  type AuditLogCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<AuditLogFindManyArgs, 'select' | 'include'> & {
      select?: AuditLogCountAggregateInputType | true
    }

  export interface AuditLogDelegate<GlobalRejectSettings extends Prisma.RejectOnNotFound | Prisma.RejectPerOperation | false | undefined, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['AuditLog'], meta: { name: 'AuditLog' } }
    /**
     * Find zero or one AuditLog that matches the filter.
     * @param {AuditLogFindUniqueArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AuditLogFindUniqueArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args: SelectSubset<T, AuditLogFindUniqueArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findUnique', 'AuditLog'> extends True ? Prisma__AuditLogClient<$Types.GetResult<AuditLogPayload<ExtArgs>, T, 'findUnique', never>, never, ExtArgs> : Prisma__AuditLogClient<$Types.GetResult<AuditLogPayload<ExtArgs>, T, 'findUnique', never> | null, null, ExtArgs>

    /**
     * Find one AuditLog that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AuditLogFindUniqueOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AuditLogFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AuditLogFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AuditLogClient<$Types.GetResult<AuditLogPayload<ExtArgs>, T, 'findUniqueOrThrow', never>, never, ExtArgs>

    /**
     * Find the first AuditLog that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AuditLogFindFirstArgs<ExtArgs>, LocalRejectSettings = T["rejectOnNotFound"] extends RejectOnNotFound ? T['rejectOnNotFound'] : undefined>(
      args?: SelectSubset<T, AuditLogFindFirstArgs<ExtArgs>>
    ): HasReject<GlobalRejectSettings, LocalRejectSettings, 'findFirst', 'AuditLog'> extends True ? Prisma__AuditLogClient<$Types.GetResult<AuditLogPayload<ExtArgs>, T, 'findFirst', never>, never, ExtArgs> : Prisma__AuditLogClient<$Types.GetResult<AuditLogPayload<ExtArgs>, T, 'findFirst', never> | null, null, ExtArgs>

    /**
     * Find the first AuditLog that matches the filter or
     * throw `NotFoundError` if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindFirstOrThrowArgs} args - Arguments to find a AuditLog
     * @example
     * // Get one AuditLog
     * const auditLog = await prisma.auditLog.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AuditLogFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AuditLogFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AuditLogClient<$Types.GetResult<AuditLogPayload<ExtArgs>, T, 'findFirstOrThrow', never>, never, ExtArgs>

    /**
     * Find zero or more AuditLogs that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all AuditLogs
     * const auditLogs = await prisma.auditLog.findMany()
     * 
     * // Get first 10 AuditLogs
     * const auditLogs = await prisma.auditLog.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const auditLogWithIdOnly = await prisma.auditLog.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AuditLogFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AuditLogFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Types.GetResult<AuditLogPayload<ExtArgs>, T, 'findMany', never>>

    /**
     * Create a AuditLog.
     * @param {AuditLogCreateArgs} args - Arguments to create a AuditLog.
     * @example
     * // Create one AuditLog
     * const AuditLog = await prisma.auditLog.create({
     *   data: {
     *     // ... data to create a AuditLog
     *   }
     * })
     * 
    **/
    create<T extends AuditLogCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AuditLogCreateArgs<ExtArgs>>
    ): Prisma__AuditLogClient<$Types.GetResult<AuditLogPayload<ExtArgs>, T, 'create', never>, never, ExtArgs>

    /**
     * Create many AuditLogs.
     *     @param {AuditLogCreateManyArgs} args - Arguments to create many AuditLogs.
     *     @example
     *     // Create many AuditLogs
     *     const auditLog = await prisma.auditLog.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AuditLogCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AuditLogCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a AuditLog.
     * @param {AuditLogDeleteArgs} args - Arguments to delete one AuditLog.
     * @example
     * // Delete one AuditLog
     * const AuditLog = await prisma.auditLog.delete({
     *   where: {
     *     // ... filter to delete one AuditLog
     *   }
     * })
     * 
    **/
    delete<T extends AuditLogDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AuditLogDeleteArgs<ExtArgs>>
    ): Prisma__AuditLogClient<$Types.GetResult<AuditLogPayload<ExtArgs>, T, 'delete', never>, never, ExtArgs>

    /**
     * Update one AuditLog.
     * @param {AuditLogUpdateArgs} args - Arguments to update one AuditLog.
     * @example
     * // Update one AuditLog
     * const auditLog = await prisma.auditLog.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AuditLogUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AuditLogUpdateArgs<ExtArgs>>
    ): Prisma__AuditLogClient<$Types.GetResult<AuditLogPayload<ExtArgs>, T, 'update', never>, never, ExtArgs>

    /**
     * Delete zero or more AuditLogs.
     * @param {AuditLogDeleteManyArgs} args - Arguments to filter AuditLogs to delete.
     * @example
     * // Delete a few AuditLogs
     * const { count } = await prisma.auditLog.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AuditLogDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AuditLogDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many AuditLogs
     * const auditLog = await prisma.auditLog.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AuditLogUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AuditLogUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one AuditLog.
     * @param {AuditLogUpsertArgs} args - Arguments to update or create a AuditLog.
     * @example
     * // Update or create a AuditLog
     * const auditLog = await prisma.auditLog.upsert({
     *   create: {
     *     // ... data to create a AuditLog
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the AuditLog we want to update
     *   }
     * })
    **/
    upsert<T extends AuditLogUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AuditLogUpsertArgs<ExtArgs>>
    ): Prisma__AuditLogClient<$Types.GetResult<AuditLogPayload<ExtArgs>, T, 'upsert', never>, never, ExtArgs>

    /**
     * Count the number of AuditLogs.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogCountArgs} args - Arguments to filter AuditLogs to count.
     * @example
     * // Count the number of AuditLogs
     * const count = await prisma.auditLog.count({
     *   where: {
     *     // ... the filter for the AuditLogs we want to count
     *   }
     * })
    **/
    count<T extends AuditLogCountArgs>(
      args?: Subset<T, AuditLogCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AuditLogCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AuditLogAggregateArgs>(args: Subset<T, AuditLogAggregateArgs>): Prisma.PrismaPromise<GetAuditLogAggregateType<T>>

    /**
     * Group by AuditLog.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AuditLogGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AuditLogGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AuditLogGroupByArgs['orderBy'] }
        : { orderBy?: AuditLogGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends TupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AuditLogGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAuditLogGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>

  }

  /**
   * The delegate class that acts as a "Promise-like" for AuditLog.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export class Prisma__AuditLogClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> implements Prisma.PrismaPromise<T> {
    private readonly _dmmf;
    private readonly _queryType;
    private readonly _rootField;
    private readonly _clientMethod;
    private readonly _args;
    private readonly _dataPath;
    private readonly _errorFormat;
    private readonly _measurePerformance?;
    private _isList;
    private _callsite;
    private _requestPromise?;
    readonly [Symbol.toStringTag]: 'PrismaPromise';
    constructor(_dmmf: runtime.DMMFClass, _queryType: 'query' | 'mutation', _rootField: string, _clientMethod: string, _args: any, _dataPath: string[], _errorFormat: ErrorFormat, _measurePerformance?: boolean | undefined, _isList?: boolean);


    private get _document();
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): Promise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): Promise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): Promise<T>;
  }



  // Custom InputTypes

  /**
   * AuditLog base type for findUnique actions
   */
  export type AuditLogFindUniqueArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }

  /**
   * AuditLog findUnique
   */
  export interface AuditLogFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends AuditLogFindUniqueArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findUniqueOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * AuditLog findUniqueOrThrow
   */
  export type AuditLogFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where: AuditLogWhereUniqueInput
  }


  /**
   * AuditLog base type for findFirst actions
   */
  export type AuditLogFindFirstArgsBase<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: Enumerable<AuditLogOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: Enumerable<AuditLogScalarFieldEnum>
  }

  /**
   * AuditLog findFirst
   */
  export interface AuditLogFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends AuditLogFindFirstArgsBase<ExtArgs> {
   /**
    * Throw an Error if query returns no results
    * @deprecated since 4.0.0: use `findFirstOrThrow` method instead
    */
    rejectOnNotFound?: RejectOnNotFound
  }
      

  /**
   * AuditLog findFirstOrThrow
   */
  export type AuditLogFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Filter, which AuditLog to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: Enumerable<AuditLogOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of AuditLogs.
     */
    distinct?: Enumerable<AuditLogScalarFieldEnum>
  }


  /**
   * AuditLog findMany
   */
  export type AuditLogFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Filter, which AuditLogs to fetch.
     */
    where?: AuditLogWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of AuditLogs to fetch.
     */
    orderBy?: Enumerable<AuditLogOrderByWithRelationInput>
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing AuditLogs.
     */
    cursor?: AuditLogWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` AuditLogs from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` AuditLogs.
     */
    skip?: number
    distinct?: Enumerable<AuditLogScalarFieldEnum>
  }


  /**
   * AuditLog create
   */
  export type AuditLogCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * The data needed to create a AuditLog.
     */
    data: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
  }


  /**
   * AuditLog createMany
   */
  export type AuditLogCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many AuditLogs.
     */
    data: Enumerable<AuditLogCreateManyInput>
    skipDuplicates?: boolean
  }


  /**
   * AuditLog update
   */
  export type AuditLogUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * The data needed to update a AuditLog.
     */
    data: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
    /**
     * Choose, which AuditLog to update.
     */
    where: AuditLogWhereUniqueInput
  }


  /**
   * AuditLog updateMany
   */
  export type AuditLogUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update AuditLogs.
     */
    data: XOR<AuditLogUpdateManyMutationInput, AuditLogUncheckedUpdateManyInput>
    /**
     * Filter which AuditLogs to update
     */
    where?: AuditLogWhereInput
  }


  /**
   * AuditLog upsert
   */
  export type AuditLogUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * The filter to search for the AuditLog to update in case it exists.
     */
    where: AuditLogWhereUniqueInput
    /**
     * In case the AuditLog found by the `where` argument doesn't exist, create a new AuditLog with this data.
     */
    create: XOR<AuditLogCreateInput, AuditLogUncheckedCreateInput>
    /**
     * In case the AuditLog was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AuditLogUpdateInput, AuditLogUncheckedUpdateInput>
  }


  /**
   * AuditLog delete
   */
  export type AuditLogDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
    /**
     * Filter which AuditLog to delete.
     */
    where: AuditLogWhereUniqueInput
  }


  /**
   * AuditLog deleteMany
   */
  export type AuditLogDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which AuditLogs to delete
     */
    where?: AuditLogWhereInput
  }


  /**
   * AuditLog without action
   */
  export type AuditLogArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the AuditLog
     */
    select?: AuditLogSelect<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    address: 'address',
    createdAt: 'createdAt',
    lastLoginAt: 'lastLoginAt',
    isActive: 'isActive',
    permissions: 'permissions',
    settings: 'settings'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const WalletScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    address: 'address',
    chainId: 'chainId',
    type: 'type',
    encryptedPrivateKey: 'encryptedPrivateKey',
    keyId: 'keyId',
    createdAt: 'createdAt',
    lastUsedAt: 'lastUsedAt',
    isArchived: 'isArchived',
    balance: 'balance',
    nonce: 'nonce'
  };

  export type WalletScalarFieldEnum = (typeof WalletScalarFieldEnum)[keyof typeof WalletScalarFieldEnum]


  export const ProofScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    referenceId: 'referenceId',
    createdAt: 'createdAt',
    expiresAt: 'expiresAt',
    proofType: 'proofType',
    isRevoked: 'isRevoked',
    revokedAt: 'revokedAt',
    revocationReason: 'revocationReason',
    encryptedData: 'encryptedData',
    encryptionKeyId: 'encryptionKeyId',
    tempWalletId: 'tempWalletId',
    transactionHash: 'transactionHash',
    merkleRoot: 'merkleRoot',
    merklePath: 'merklePath',
    batchId: 'batchId',
    warningFlags: 'warningFlags',
    originalWallets: 'originalWallets',
    status: 'status'
  };

  export type ProofScalarFieldEnum = (typeof ProofScalarFieldEnum)[keyof typeof ProofScalarFieldEnum]


  export const VerificationScalarFieldEnum: {
    id: 'id',
    proofId: 'proofId',
    referenceId: 'referenceId',
    verifierAddress: 'verifierAddress',
    verifiedAt: 'verifiedAt',
    isSuccessful: 'isSuccessful',
    failureReason: 'failureReason',
    verificationResult: 'verificationResult'
  };

  export type VerificationScalarFieldEnum = (typeof VerificationScalarFieldEnum)[keyof typeof VerificationScalarFieldEnum]


  export const BatchScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    processedAt: 'processedAt',
    status: 'status',
    merkleRoot: 'merkleRoot',
    transactionHash: 'transactionHash',
    tempWalletId: 'tempWalletId',
    gasUsed: 'gasUsed',
    gasPrice: 'gasPrice',
    totalCost: 'totalCost',
    retryCount: 'retryCount',
    maxRetries: 'maxRetries'
  };

  export type BatchScalarFieldEnum = (typeof BatchScalarFieldEnum)[keyof typeof BatchScalarFieldEnum]


  export const OrganizationScalarFieldEnum: {
    id: 'id',
    name: 'name',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    apiKey: 'apiKey',
    settings: 'settings'
  };

  export type OrganizationScalarFieldEnum = (typeof OrganizationScalarFieldEnum)[keyof typeof OrganizationScalarFieldEnum]


  export const OrganizationUserScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    organizationId: 'organizationId',
    role: 'role',
    joinedAt: 'joinedAt'
  };

  export type OrganizationUserScalarFieldEnum = (typeof OrganizationUserScalarFieldEnum)[keyof typeof OrganizationUserScalarFieldEnum]


  export const ProofTemplateScalarFieldEnum: {
    id: 'id',
    organizationId: 'organizationId',
    name: 'name',
    description: 'description',
    proofType: 'proofType',
    threshold: 'threshold',
    expiryPeriod: 'expiryPeriod',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    isActive: 'isActive',
    settings: 'settings'
  };

  export type ProofTemplateScalarFieldEnum = (typeof ProofTemplateScalarFieldEnum)[keyof typeof ProofTemplateScalarFieldEnum]


  export const AuditLogScalarFieldEnum: {
    id: 'id',
    action: 'action',
    entityType: 'entityType',
    entityId: 'entityId',
    userId: 'userId',
    ipAddress: 'ipAddress',
    userAgent: 'userAgent',
    metadata: 'metadata',
    timestamp: 'timestamp'
  };

  export type AuditLogScalarFieldEnum = (typeof AuditLogScalarFieldEnum)[keyof typeof AuditLogScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const NullableJsonNullValueInput: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull
  };

  export type NullableJsonNullValueInput = (typeof NullableJsonNullValueInput)[keyof typeof NullableJsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: Enumerable<UserWhereInput>
    OR?: Enumerable<UserWhereInput>
    NOT?: Enumerable<UserWhereInput>
    id?: UuidFilter | string
    address?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    lastLoginAt?: DateTimeNullableFilter | Date | string | null
    isActive?: BoolFilter | boolean
    permissions?: StringNullableListFilter
    settings?: JsonFilter
    wallets?: WalletListRelationFilter
    proofs?: ProofListRelationFilter
    organizationUsers?: OrganizationUserListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    address?: SortOrder
    createdAt?: SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    isActive?: SortOrder
    permissions?: SortOrder
    settings?: SortOrder
    wallets?: WalletOrderByRelationAggregateInput
    proofs?: ProofOrderByRelationAggregateInput
    organizationUsers?: OrganizationUserOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = {
    id?: string
    address?: string
  }

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    address?: SortOrder
    createdAt?: SortOrder
    lastLoginAt?: SortOrderInput | SortOrder
    isActive?: SortOrder
    permissions?: SortOrder
    settings?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<UserScalarWhereWithAggregatesInput>
    OR?: Enumerable<UserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<UserScalarWhereWithAggregatesInput>
    id?: UuidWithAggregatesFilter | string
    address?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    lastLoginAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
    isActive?: BoolWithAggregatesFilter | boolean
    permissions?: StringNullableListFilter
    settings?: JsonWithAggregatesFilter
  }

  export type WalletWhereInput = {
    AND?: Enumerable<WalletWhereInput>
    OR?: Enumerable<WalletWhereInput>
    NOT?: Enumerable<WalletWhereInput>
    id?: UuidFilter | string
    userId?: UuidFilter | string
    address?: StringFilter | string
    chainId?: IntFilter | number
    type?: EnumWalletTypeFilter | WalletType
    encryptedPrivateKey?: StringNullableFilter | string | null
    keyId?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    lastUsedAt?: DateTimeFilter | Date | string
    isArchived?: BoolFilter | boolean
    balance?: StringNullableFilter | string | null
    nonce?: IntNullableFilter | number | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    proofs?: ProofListRelationFilter
    batches?: BatchListRelationFilter
  }

  export type WalletOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    address?: SortOrder
    chainId?: SortOrder
    type?: SortOrder
    encryptedPrivateKey?: SortOrderInput | SortOrder
    keyId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    lastUsedAt?: SortOrder
    isArchived?: SortOrder
    balance?: SortOrderInput | SortOrder
    nonce?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    proofs?: ProofOrderByRelationAggregateInput
    batches?: BatchOrderByRelationAggregateInput
  }

  export type WalletWhereUniqueInput = {
    id?: string
    address_chainId?: WalletAddressChainIdCompoundUniqueInput
  }

  export type WalletOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    address?: SortOrder
    chainId?: SortOrder
    type?: SortOrder
    encryptedPrivateKey?: SortOrderInput | SortOrder
    keyId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    lastUsedAt?: SortOrder
    isArchived?: SortOrder
    balance?: SortOrderInput | SortOrder
    nonce?: SortOrderInput | SortOrder
    _count?: WalletCountOrderByAggregateInput
    _avg?: WalletAvgOrderByAggregateInput
    _max?: WalletMaxOrderByAggregateInput
    _min?: WalletMinOrderByAggregateInput
    _sum?: WalletSumOrderByAggregateInput
  }

  export type WalletScalarWhereWithAggregatesInput = {
    AND?: Enumerable<WalletScalarWhereWithAggregatesInput>
    OR?: Enumerable<WalletScalarWhereWithAggregatesInput>
    NOT?: Enumerable<WalletScalarWhereWithAggregatesInput>
    id?: UuidWithAggregatesFilter | string
    userId?: UuidWithAggregatesFilter | string
    address?: StringWithAggregatesFilter | string
    chainId?: IntWithAggregatesFilter | number
    type?: EnumWalletTypeWithAggregatesFilter | WalletType
    encryptedPrivateKey?: StringNullableWithAggregatesFilter | string | null
    keyId?: StringNullableWithAggregatesFilter | string | null
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    lastUsedAt?: DateTimeWithAggregatesFilter | Date | string
    isArchived?: BoolWithAggregatesFilter | boolean
    balance?: StringNullableWithAggregatesFilter | string | null
    nonce?: IntNullableWithAggregatesFilter | number | null
  }

  export type ProofWhereInput = {
    AND?: Enumerable<ProofWhereInput>
    OR?: Enumerable<ProofWhereInput>
    NOT?: Enumerable<ProofWhereInput>
    id?: UuidFilter | string
    userId?: UuidFilter | string
    referenceId?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    expiresAt?: DateTimeFilter | Date | string
    proofType?: EnumProofTypeFilter | ProofType
    isRevoked?: BoolFilter | boolean
    revokedAt?: DateTimeNullableFilter | Date | string | null
    revocationReason?: StringNullableFilter | string | null
    encryptedData?: StringFilter | string
    encryptionKeyId?: StringFilter | string
    tempWalletId?: UuidFilter | string
    transactionHash?: StringNullableFilter | string | null
    merkleRoot?: StringNullableFilter | string | null
    merklePath?: JsonNullableFilter
    batchId?: UuidNullableFilter | string | null
    warningFlags?: StringNullableListFilter
    originalWallets?: StringNullableListFilter
    status?: EnumProofStatusFilter | ProofStatus
    user?: XOR<UserRelationFilter, UserWhereInput>
    tempWallet?: XOR<WalletRelationFilter, WalletWhereInput>
    batch?: XOR<BatchRelationFilter, BatchWhereInput> | null
    verifications?: VerificationListRelationFilter
  }

  export type ProofOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    referenceId?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    proofType?: SortOrder
    isRevoked?: SortOrder
    revokedAt?: SortOrderInput | SortOrder
    revocationReason?: SortOrderInput | SortOrder
    encryptedData?: SortOrder
    encryptionKeyId?: SortOrder
    tempWalletId?: SortOrder
    transactionHash?: SortOrderInput | SortOrder
    merkleRoot?: SortOrderInput | SortOrder
    merklePath?: SortOrderInput | SortOrder
    batchId?: SortOrderInput | SortOrder
    warningFlags?: SortOrder
    originalWallets?: SortOrder
    status?: SortOrder
    user?: UserOrderByWithRelationInput
    tempWallet?: WalletOrderByWithRelationInput
    batch?: BatchOrderByWithRelationInput
    verifications?: VerificationOrderByRelationAggregateInput
  }

  export type ProofWhereUniqueInput = {
    id?: string
    referenceId?: string
  }

  export type ProofOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    referenceId?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    proofType?: SortOrder
    isRevoked?: SortOrder
    revokedAt?: SortOrderInput | SortOrder
    revocationReason?: SortOrderInput | SortOrder
    encryptedData?: SortOrder
    encryptionKeyId?: SortOrder
    tempWalletId?: SortOrder
    transactionHash?: SortOrderInput | SortOrder
    merkleRoot?: SortOrderInput | SortOrder
    merklePath?: SortOrderInput | SortOrder
    batchId?: SortOrderInput | SortOrder
    warningFlags?: SortOrder
    originalWallets?: SortOrder
    status?: SortOrder
    _count?: ProofCountOrderByAggregateInput
    _max?: ProofMaxOrderByAggregateInput
    _min?: ProofMinOrderByAggregateInput
  }

  export type ProofScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ProofScalarWhereWithAggregatesInput>
    OR?: Enumerable<ProofScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ProofScalarWhereWithAggregatesInput>
    id?: UuidWithAggregatesFilter | string
    userId?: UuidWithAggregatesFilter | string
    referenceId?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    expiresAt?: DateTimeWithAggregatesFilter | Date | string
    proofType?: EnumProofTypeWithAggregatesFilter | ProofType
    isRevoked?: BoolWithAggregatesFilter | boolean
    revokedAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
    revocationReason?: StringNullableWithAggregatesFilter | string | null
    encryptedData?: StringWithAggregatesFilter | string
    encryptionKeyId?: StringWithAggregatesFilter | string
    tempWalletId?: UuidWithAggregatesFilter | string
    transactionHash?: StringNullableWithAggregatesFilter | string | null
    merkleRoot?: StringNullableWithAggregatesFilter | string | null
    merklePath?: JsonNullableWithAggregatesFilter
    batchId?: UuidNullableWithAggregatesFilter | string | null
    warningFlags?: StringNullableListFilter
    originalWallets?: StringNullableListFilter
    status?: EnumProofStatusWithAggregatesFilter | ProofStatus
  }

  export type VerificationWhereInput = {
    AND?: Enumerable<VerificationWhereInput>
    OR?: Enumerable<VerificationWhereInput>
    NOT?: Enumerable<VerificationWhereInput>
    id?: UuidFilter | string
    proofId?: UuidFilter | string
    referenceId?: StringFilter | string
    verifierAddress?: StringNullableFilter | string | null
    verifiedAt?: DateTimeFilter | Date | string
    isSuccessful?: BoolFilter | boolean
    failureReason?: StringNullableFilter | string | null
    verificationResult?: JsonFilter
    proof?: XOR<ProofRelationFilter, ProofWhereInput>
  }

  export type VerificationOrderByWithRelationInput = {
    id?: SortOrder
    proofId?: SortOrder
    referenceId?: SortOrder
    verifierAddress?: SortOrderInput | SortOrder
    verifiedAt?: SortOrder
    isSuccessful?: SortOrder
    failureReason?: SortOrderInput | SortOrder
    verificationResult?: SortOrder
    proof?: ProofOrderByWithRelationInput
  }

  export type VerificationWhereUniqueInput = {
    id?: string
  }

  export type VerificationOrderByWithAggregationInput = {
    id?: SortOrder
    proofId?: SortOrder
    referenceId?: SortOrder
    verifierAddress?: SortOrderInput | SortOrder
    verifiedAt?: SortOrder
    isSuccessful?: SortOrder
    failureReason?: SortOrderInput | SortOrder
    verificationResult?: SortOrder
    _count?: VerificationCountOrderByAggregateInput
    _max?: VerificationMaxOrderByAggregateInput
    _min?: VerificationMinOrderByAggregateInput
  }

  export type VerificationScalarWhereWithAggregatesInput = {
    AND?: Enumerable<VerificationScalarWhereWithAggregatesInput>
    OR?: Enumerable<VerificationScalarWhereWithAggregatesInput>
    NOT?: Enumerable<VerificationScalarWhereWithAggregatesInput>
    id?: UuidWithAggregatesFilter | string
    proofId?: UuidWithAggregatesFilter | string
    referenceId?: StringWithAggregatesFilter | string
    verifierAddress?: StringNullableWithAggregatesFilter | string | null
    verifiedAt?: DateTimeWithAggregatesFilter | Date | string
    isSuccessful?: BoolWithAggregatesFilter | boolean
    failureReason?: StringNullableWithAggregatesFilter | string | null
    verificationResult?: JsonWithAggregatesFilter
  }

  export type BatchWhereInput = {
    AND?: Enumerable<BatchWhereInput>
    OR?: Enumerable<BatchWhereInput>
    NOT?: Enumerable<BatchWhereInput>
    id?: UuidFilter | string
    createdAt?: DateTimeFilter | Date | string
    processedAt?: DateTimeNullableFilter | Date | string | null
    status?: EnumBatchStatusFilter | BatchStatus
    merkleRoot?: StringFilter | string
    transactionHash?: StringNullableFilter | string | null
    tempWalletId?: UuidFilter | string
    gasUsed?: StringNullableFilter | string | null
    gasPrice?: StringNullableFilter | string | null
    totalCost?: StringNullableFilter | string | null
    retryCount?: IntFilter | number
    maxRetries?: IntFilter | number
    tempWallet?: XOR<WalletRelationFilter, WalletWhereInput>
    proofs?: ProofListRelationFilter
  }

  export type BatchOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    processedAt?: SortOrderInput | SortOrder
    status?: SortOrder
    merkleRoot?: SortOrder
    transactionHash?: SortOrderInput | SortOrder
    tempWalletId?: SortOrder
    gasUsed?: SortOrderInput | SortOrder
    gasPrice?: SortOrderInput | SortOrder
    totalCost?: SortOrderInput | SortOrder
    retryCount?: SortOrder
    maxRetries?: SortOrder
    tempWallet?: WalletOrderByWithRelationInput
    proofs?: ProofOrderByRelationAggregateInput
  }

  export type BatchWhereUniqueInput = {
    id?: string
  }

  export type BatchOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    processedAt?: SortOrderInput | SortOrder
    status?: SortOrder
    merkleRoot?: SortOrder
    transactionHash?: SortOrderInput | SortOrder
    tempWalletId?: SortOrder
    gasUsed?: SortOrderInput | SortOrder
    gasPrice?: SortOrderInput | SortOrder
    totalCost?: SortOrderInput | SortOrder
    retryCount?: SortOrder
    maxRetries?: SortOrder
    _count?: BatchCountOrderByAggregateInput
    _avg?: BatchAvgOrderByAggregateInput
    _max?: BatchMaxOrderByAggregateInput
    _min?: BatchMinOrderByAggregateInput
    _sum?: BatchSumOrderByAggregateInput
  }

  export type BatchScalarWhereWithAggregatesInput = {
    AND?: Enumerable<BatchScalarWhereWithAggregatesInput>
    OR?: Enumerable<BatchScalarWhereWithAggregatesInput>
    NOT?: Enumerable<BatchScalarWhereWithAggregatesInput>
    id?: UuidWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    processedAt?: DateTimeNullableWithAggregatesFilter | Date | string | null
    status?: EnumBatchStatusWithAggregatesFilter | BatchStatus
    merkleRoot?: StringWithAggregatesFilter | string
    transactionHash?: StringNullableWithAggregatesFilter | string | null
    tempWalletId?: UuidWithAggregatesFilter | string
    gasUsed?: StringNullableWithAggregatesFilter | string | null
    gasPrice?: StringNullableWithAggregatesFilter | string | null
    totalCost?: StringNullableWithAggregatesFilter | string | null
    retryCount?: IntWithAggregatesFilter | number
    maxRetries?: IntWithAggregatesFilter | number
  }

  export type OrganizationWhereInput = {
    AND?: Enumerable<OrganizationWhereInput>
    OR?: Enumerable<OrganizationWhereInput>
    NOT?: Enumerable<OrganizationWhereInput>
    id?: UuidFilter | string
    name?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    apiKey?: StringNullableFilter | string | null
    settings?: JsonFilter
    members?: OrganizationUserListRelationFilter
    templates?: ProofTemplateListRelationFilter
  }

  export type OrganizationOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    apiKey?: SortOrderInput | SortOrder
    settings?: SortOrder
    members?: OrganizationUserOrderByRelationAggregateInput
    templates?: ProofTemplateOrderByRelationAggregateInput
  }

  export type OrganizationWhereUniqueInput = {
    id?: string
    apiKey?: string
  }

  export type OrganizationOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    apiKey?: SortOrderInput | SortOrder
    settings?: SortOrder
    _count?: OrganizationCountOrderByAggregateInput
    _max?: OrganizationMaxOrderByAggregateInput
    _min?: OrganizationMinOrderByAggregateInput
  }

  export type OrganizationScalarWhereWithAggregatesInput = {
    AND?: Enumerable<OrganizationScalarWhereWithAggregatesInput>
    OR?: Enumerable<OrganizationScalarWhereWithAggregatesInput>
    NOT?: Enumerable<OrganizationScalarWhereWithAggregatesInput>
    id?: UuidWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    apiKey?: StringNullableWithAggregatesFilter | string | null
    settings?: JsonWithAggregatesFilter
  }

  export type OrganizationUserWhereInput = {
    AND?: Enumerable<OrganizationUserWhereInput>
    OR?: Enumerable<OrganizationUserWhereInput>
    NOT?: Enumerable<OrganizationUserWhereInput>
    id?: UuidFilter | string
    userId?: UuidFilter | string
    organizationId?: UuidFilter | string
    role?: EnumOrgRoleFilter | OrgRole
    joinedAt?: DateTimeFilter | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    organization?: XOR<OrganizationRelationFilter, OrganizationWhereInput>
  }

  export type OrganizationUserOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    organizationId?: SortOrder
    role?: SortOrder
    joinedAt?: SortOrder
    user?: UserOrderByWithRelationInput
    organization?: OrganizationOrderByWithRelationInput
  }

  export type OrganizationUserWhereUniqueInput = {
    id?: string
    userId_organizationId?: OrganizationUserUserIdOrganizationIdCompoundUniqueInput
  }

  export type OrganizationUserOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    organizationId?: SortOrder
    role?: SortOrder
    joinedAt?: SortOrder
    _count?: OrganizationUserCountOrderByAggregateInput
    _max?: OrganizationUserMaxOrderByAggregateInput
    _min?: OrganizationUserMinOrderByAggregateInput
  }

  export type OrganizationUserScalarWhereWithAggregatesInput = {
    AND?: Enumerable<OrganizationUserScalarWhereWithAggregatesInput>
    OR?: Enumerable<OrganizationUserScalarWhereWithAggregatesInput>
    NOT?: Enumerable<OrganizationUserScalarWhereWithAggregatesInput>
    id?: UuidWithAggregatesFilter | string
    userId?: UuidWithAggregatesFilter | string
    organizationId?: UuidWithAggregatesFilter | string
    role?: EnumOrgRoleWithAggregatesFilter | OrgRole
    joinedAt?: DateTimeWithAggregatesFilter | Date | string
  }

  export type ProofTemplateWhereInput = {
    AND?: Enumerable<ProofTemplateWhereInput>
    OR?: Enumerable<ProofTemplateWhereInput>
    NOT?: Enumerable<ProofTemplateWhereInput>
    id?: UuidFilter | string
    organizationId?: UuidFilter | string
    name?: StringFilter | string
    description?: StringNullableFilter | string | null
    proofType?: EnumProofTypeFilter | ProofType
    threshold?: StringFilter | string
    expiryPeriod?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    isActive?: BoolFilter | boolean
    settings?: JsonFilter
    organization?: XOR<OrganizationRelationFilter, OrganizationWhereInput>
  }

  export type ProofTemplateOrderByWithRelationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    proofType?: SortOrder
    threshold?: SortOrder
    expiryPeriod?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isActive?: SortOrder
    settings?: SortOrder
    organization?: OrganizationOrderByWithRelationInput
  }

  export type ProofTemplateWhereUniqueInput = {
    id?: string
  }

  export type ProofTemplateOrderByWithAggregationInput = {
    id?: SortOrder
    organizationId?: SortOrder
    name?: SortOrder
    description?: SortOrderInput | SortOrder
    proofType?: SortOrder
    threshold?: SortOrder
    expiryPeriod?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isActive?: SortOrder
    settings?: SortOrder
    _count?: ProofTemplateCountOrderByAggregateInput
    _avg?: ProofTemplateAvgOrderByAggregateInput
    _max?: ProofTemplateMaxOrderByAggregateInput
    _min?: ProofTemplateMinOrderByAggregateInput
    _sum?: ProofTemplateSumOrderByAggregateInput
  }

  export type ProofTemplateScalarWhereWithAggregatesInput = {
    AND?: Enumerable<ProofTemplateScalarWhereWithAggregatesInput>
    OR?: Enumerable<ProofTemplateScalarWhereWithAggregatesInput>
    NOT?: Enumerable<ProofTemplateScalarWhereWithAggregatesInput>
    id?: UuidWithAggregatesFilter | string
    organizationId?: UuidWithAggregatesFilter | string
    name?: StringWithAggregatesFilter | string
    description?: StringNullableWithAggregatesFilter | string | null
    proofType?: EnumProofTypeWithAggregatesFilter | ProofType
    threshold?: StringWithAggregatesFilter | string
    expiryPeriod?: IntWithAggregatesFilter | number
    createdAt?: DateTimeWithAggregatesFilter | Date | string
    updatedAt?: DateTimeWithAggregatesFilter | Date | string
    isActive?: BoolWithAggregatesFilter | boolean
    settings?: JsonWithAggregatesFilter
  }

  export type AuditLogWhereInput = {
    AND?: Enumerable<AuditLogWhereInput>
    OR?: Enumerable<AuditLogWhereInput>
    NOT?: Enumerable<AuditLogWhereInput>
    id?: UuidFilter | string
    action?: StringFilter | string
    entityType?: StringFilter | string
    entityId?: StringNullableFilter | string | null
    userId?: UuidNullableFilter | string | null
    ipAddress?: StringNullableFilter | string | null
    userAgent?: StringNullableFilter | string | null
    metadata?: JsonNullableFilter
    timestamp?: DateTimeFilter | Date | string
  }

  export type AuditLogOrderByWithRelationInput = {
    id?: SortOrder
    action?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    timestamp?: SortOrder
  }

  export type AuditLogWhereUniqueInput = {
    id?: string
  }

  export type AuditLogOrderByWithAggregationInput = {
    id?: SortOrder
    action?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrderInput | SortOrder
    userId?: SortOrderInput | SortOrder
    ipAddress?: SortOrderInput | SortOrder
    userAgent?: SortOrderInput | SortOrder
    metadata?: SortOrderInput | SortOrder
    timestamp?: SortOrder
    _count?: AuditLogCountOrderByAggregateInput
    _max?: AuditLogMaxOrderByAggregateInput
    _min?: AuditLogMinOrderByAggregateInput
  }

  export type AuditLogScalarWhereWithAggregatesInput = {
    AND?: Enumerable<AuditLogScalarWhereWithAggregatesInput>
    OR?: Enumerable<AuditLogScalarWhereWithAggregatesInput>
    NOT?: Enumerable<AuditLogScalarWhereWithAggregatesInput>
    id?: UuidWithAggregatesFilter | string
    action?: StringWithAggregatesFilter | string
    entityType?: StringWithAggregatesFilter | string
    entityId?: StringNullableWithAggregatesFilter | string | null
    userId?: UuidNullableWithAggregatesFilter | string | null
    ipAddress?: StringNullableWithAggregatesFilter | string | null
    userAgent?: StringNullableWithAggregatesFilter | string | null
    metadata?: JsonNullableWithAggregatesFilter
    timestamp?: DateTimeWithAggregatesFilter | Date | string
  }

  export type UserCreateInput = {
    id?: string
    address: string
    createdAt?: Date | string
    lastLoginAt?: Date | string | null
    isActive?: boolean
    permissions?: UserCreatepermissionsInput | Enumerable<string>
    settings?: JsonNullValueInput | InputJsonValue
    wallets?: WalletCreateNestedManyWithoutUserInput
    proofs?: ProofCreateNestedManyWithoutUserInput
    organizationUsers?: OrganizationUserCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    address: string
    createdAt?: Date | string
    lastLoginAt?: Date | string | null
    isActive?: boolean
    permissions?: UserCreatepermissionsInput | Enumerable<string>
    settings?: JsonNullValueInput | InputJsonValue
    wallets?: WalletUncheckedCreateNestedManyWithoutUserInput
    proofs?: ProofUncheckedCreateNestedManyWithoutUserInput
    organizationUsers?: OrganizationUserUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    permissions?: UserUpdatepermissionsInput | Enumerable<string>
    settings?: JsonNullValueInput | InputJsonValue
    wallets?: WalletUpdateManyWithoutUserNestedInput
    proofs?: ProofUpdateManyWithoutUserNestedInput
    organizationUsers?: OrganizationUserUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    permissions?: UserUpdatepermissionsInput | Enumerable<string>
    settings?: JsonNullValueInput | InputJsonValue
    wallets?: WalletUncheckedUpdateManyWithoutUserNestedInput
    proofs?: ProofUncheckedUpdateManyWithoutUserNestedInput
    organizationUsers?: OrganizationUserUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    address: string
    createdAt?: Date | string
    lastLoginAt?: Date | string | null
    isActive?: boolean
    permissions?: UserCreatepermissionsInput | Enumerable<string>
    settings?: JsonNullValueInput | InputJsonValue
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    permissions?: UserUpdatepermissionsInput | Enumerable<string>
    settings?: JsonNullValueInput | InputJsonValue
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    permissions?: UserUpdatepermissionsInput | Enumerable<string>
    settings?: JsonNullValueInput | InputJsonValue
  }

  export type WalletCreateInput = {
    id?: string
    address: string
    chainId: number
    type: WalletType
    encryptedPrivateKey?: string | null
    keyId?: string | null
    createdAt?: Date | string
    lastUsedAt?: Date | string
    isArchived?: boolean
    balance?: string | null
    nonce?: number | null
    user: UserCreateNestedOneWithoutWalletsInput
    proofs?: ProofCreateNestedManyWithoutTempWalletInput
    batches?: BatchCreateNestedManyWithoutTempWalletInput
  }

  export type WalletUncheckedCreateInput = {
    id?: string
    userId: string
    address: string
    chainId: number
    type: WalletType
    encryptedPrivateKey?: string | null
    keyId?: string | null
    createdAt?: Date | string
    lastUsedAt?: Date | string
    isArchived?: boolean
    balance?: string | null
    nonce?: number | null
    proofs?: ProofUncheckedCreateNestedManyWithoutTempWalletInput
    batches?: BatchUncheckedCreateNestedManyWithoutTempWalletInput
  }

  export type WalletUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    chainId?: IntFieldUpdateOperationsInput | number
    type?: EnumWalletTypeFieldUpdateOperationsInput | WalletType
    encryptedPrivateKey?: NullableStringFieldUpdateOperationsInput | string | null
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUsedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    balance?: NullableStringFieldUpdateOperationsInput | string | null
    nonce?: NullableIntFieldUpdateOperationsInput | number | null
    user?: UserUpdateOneRequiredWithoutWalletsNestedInput
    proofs?: ProofUpdateManyWithoutTempWalletNestedInput
    batches?: BatchUpdateManyWithoutTempWalletNestedInput
  }

  export type WalletUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    chainId?: IntFieldUpdateOperationsInput | number
    type?: EnumWalletTypeFieldUpdateOperationsInput | WalletType
    encryptedPrivateKey?: NullableStringFieldUpdateOperationsInput | string | null
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUsedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    balance?: NullableStringFieldUpdateOperationsInput | string | null
    nonce?: NullableIntFieldUpdateOperationsInput | number | null
    proofs?: ProofUncheckedUpdateManyWithoutTempWalletNestedInput
    batches?: BatchUncheckedUpdateManyWithoutTempWalletNestedInput
  }

  export type WalletCreateManyInput = {
    id?: string
    userId: string
    address: string
    chainId: number
    type: WalletType
    encryptedPrivateKey?: string | null
    keyId?: string | null
    createdAt?: Date | string
    lastUsedAt?: Date | string
    isArchived?: boolean
    balance?: string | null
    nonce?: number | null
  }

  export type WalletUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    chainId?: IntFieldUpdateOperationsInput | number
    type?: EnumWalletTypeFieldUpdateOperationsInput | WalletType
    encryptedPrivateKey?: NullableStringFieldUpdateOperationsInput | string | null
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUsedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    balance?: NullableStringFieldUpdateOperationsInput | string | null
    nonce?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type WalletUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    chainId?: IntFieldUpdateOperationsInput | number
    type?: EnumWalletTypeFieldUpdateOperationsInput | WalletType
    encryptedPrivateKey?: NullableStringFieldUpdateOperationsInput | string | null
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUsedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    balance?: NullableStringFieldUpdateOperationsInput | string | null
    nonce?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ProofCreateInput = {
    id?: string
    referenceId: string
    createdAt?: Date | string
    expiresAt: Date | string
    proofType: ProofType
    isRevoked?: boolean
    revokedAt?: Date | string | null
    revocationReason?: string | null
    encryptedData: string
    encryptionKeyId: string
    transactionHash?: string | null
    merkleRoot?: string | null
    merklePath?: NullableJsonNullValueInput | InputJsonValue
    warningFlags?: ProofCreatewarningFlagsInput | Enumerable<string>
    originalWallets?: ProofCreateoriginalWalletsInput | Enumerable<string>
    status: ProofStatus
    user: UserCreateNestedOneWithoutProofsInput
    tempWallet: WalletCreateNestedOneWithoutProofsInput
    batch?: BatchCreateNestedOneWithoutProofsInput
    verifications?: VerificationCreateNestedManyWithoutProofInput
  }

  export type ProofUncheckedCreateInput = {
    id?: string
    userId: string
    referenceId: string
    createdAt?: Date | string
    expiresAt: Date | string
    proofType: ProofType
    isRevoked?: boolean
    revokedAt?: Date | string | null
    revocationReason?: string | null
    encryptedData: string
    encryptionKeyId: string
    tempWalletId: string
    transactionHash?: string | null
    merkleRoot?: string | null
    merklePath?: NullableJsonNullValueInput | InputJsonValue
    batchId?: string | null
    warningFlags?: ProofCreatewarningFlagsInput | Enumerable<string>
    originalWallets?: ProofCreateoriginalWalletsInput | Enumerable<string>
    status: ProofStatus
    verifications?: VerificationUncheckedCreateNestedManyWithoutProofInput
  }

  export type ProofUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    referenceId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    proofType?: EnumProofTypeFieldUpdateOperationsInput | ProofType
    isRevoked?: BoolFieldUpdateOperationsInput | boolean
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    revocationReason?: NullableStringFieldUpdateOperationsInput | string | null
    encryptedData?: StringFieldUpdateOperationsInput | string
    encryptionKeyId?: StringFieldUpdateOperationsInput | string
    transactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    merkleRoot?: NullableStringFieldUpdateOperationsInput | string | null
    merklePath?: NullableJsonNullValueInput | InputJsonValue
    warningFlags?: ProofUpdatewarningFlagsInput | Enumerable<string>
    originalWallets?: ProofUpdateoriginalWalletsInput | Enumerable<string>
    status?: EnumProofStatusFieldUpdateOperationsInput | ProofStatus
    user?: UserUpdateOneRequiredWithoutProofsNestedInput
    tempWallet?: WalletUpdateOneRequiredWithoutProofsNestedInput
    batch?: BatchUpdateOneWithoutProofsNestedInput
    verifications?: VerificationUpdateManyWithoutProofNestedInput
  }

  export type ProofUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    referenceId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    proofType?: EnumProofTypeFieldUpdateOperationsInput | ProofType
    isRevoked?: BoolFieldUpdateOperationsInput | boolean
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    revocationReason?: NullableStringFieldUpdateOperationsInput | string | null
    encryptedData?: StringFieldUpdateOperationsInput | string
    encryptionKeyId?: StringFieldUpdateOperationsInput | string
    tempWalletId?: StringFieldUpdateOperationsInput | string
    transactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    merkleRoot?: NullableStringFieldUpdateOperationsInput | string | null
    merklePath?: NullableJsonNullValueInput | InputJsonValue
    batchId?: NullableStringFieldUpdateOperationsInput | string | null
    warningFlags?: ProofUpdatewarningFlagsInput | Enumerable<string>
    originalWallets?: ProofUpdateoriginalWalletsInput | Enumerable<string>
    status?: EnumProofStatusFieldUpdateOperationsInput | ProofStatus
    verifications?: VerificationUncheckedUpdateManyWithoutProofNestedInput
  }

  export type ProofCreateManyInput = {
    id?: string
    userId: string
    referenceId: string
    createdAt?: Date | string
    expiresAt: Date | string
    proofType: ProofType
    isRevoked?: boolean
    revokedAt?: Date | string | null
    revocationReason?: string | null
    encryptedData: string
    encryptionKeyId: string
    tempWalletId: string
    transactionHash?: string | null
    merkleRoot?: string | null
    merklePath?: NullableJsonNullValueInput | InputJsonValue
    batchId?: string | null
    warningFlags?: ProofCreatewarningFlagsInput | Enumerable<string>
    originalWallets?: ProofCreateoriginalWalletsInput | Enumerable<string>
    status: ProofStatus
  }

  export type ProofUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    referenceId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    proofType?: EnumProofTypeFieldUpdateOperationsInput | ProofType
    isRevoked?: BoolFieldUpdateOperationsInput | boolean
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    revocationReason?: NullableStringFieldUpdateOperationsInput | string | null
    encryptedData?: StringFieldUpdateOperationsInput | string
    encryptionKeyId?: StringFieldUpdateOperationsInput | string
    transactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    merkleRoot?: NullableStringFieldUpdateOperationsInput | string | null
    merklePath?: NullableJsonNullValueInput | InputJsonValue
    warningFlags?: ProofUpdatewarningFlagsInput | Enumerable<string>
    originalWallets?: ProofUpdateoriginalWalletsInput | Enumerable<string>
    status?: EnumProofStatusFieldUpdateOperationsInput | ProofStatus
  }

  export type ProofUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    referenceId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    proofType?: EnumProofTypeFieldUpdateOperationsInput | ProofType
    isRevoked?: BoolFieldUpdateOperationsInput | boolean
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    revocationReason?: NullableStringFieldUpdateOperationsInput | string | null
    encryptedData?: StringFieldUpdateOperationsInput | string
    encryptionKeyId?: StringFieldUpdateOperationsInput | string
    tempWalletId?: StringFieldUpdateOperationsInput | string
    transactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    merkleRoot?: NullableStringFieldUpdateOperationsInput | string | null
    merklePath?: NullableJsonNullValueInput | InputJsonValue
    batchId?: NullableStringFieldUpdateOperationsInput | string | null
    warningFlags?: ProofUpdatewarningFlagsInput | Enumerable<string>
    originalWallets?: ProofUpdateoriginalWalletsInput | Enumerable<string>
    status?: EnumProofStatusFieldUpdateOperationsInput | ProofStatus
  }

  export type VerificationCreateInput = {
    id?: string
    referenceId: string
    verifierAddress?: string | null
    verifiedAt?: Date | string
    isSuccessful: boolean
    failureReason?: string | null
    verificationResult: JsonNullValueInput | InputJsonValue
    proof: ProofCreateNestedOneWithoutVerificationsInput
  }

  export type VerificationUncheckedCreateInput = {
    id?: string
    proofId: string
    referenceId: string
    verifierAddress?: string | null
    verifiedAt?: Date | string
    isSuccessful: boolean
    failureReason?: string | null
    verificationResult: JsonNullValueInput | InputJsonValue
  }

  export type VerificationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    referenceId?: StringFieldUpdateOperationsInput | string
    verifierAddress?: NullableStringFieldUpdateOperationsInput | string | null
    verifiedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isSuccessful?: BoolFieldUpdateOperationsInput | boolean
    failureReason?: NullableStringFieldUpdateOperationsInput | string | null
    verificationResult?: JsonNullValueInput | InputJsonValue
    proof?: ProofUpdateOneRequiredWithoutVerificationsNestedInput
  }

  export type VerificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    proofId?: StringFieldUpdateOperationsInput | string
    referenceId?: StringFieldUpdateOperationsInput | string
    verifierAddress?: NullableStringFieldUpdateOperationsInput | string | null
    verifiedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isSuccessful?: BoolFieldUpdateOperationsInput | boolean
    failureReason?: NullableStringFieldUpdateOperationsInput | string | null
    verificationResult?: JsonNullValueInput | InputJsonValue
  }

  export type VerificationCreateManyInput = {
    id?: string
    proofId: string
    referenceId: string
    verifierAddress?: string | null
    verifiedAt?: Date | string
    isSuccessful: boolean
    failureReason?: string | null
    verificationResult: JsonNullValueInput | InputJsonValue
  }

  export type VerificationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    referenceId?: StringFieldUpdateOperationsInput | string
    verifierAddress?: NullableStringFieldUpdateOperationsInput | string | null
    verifiedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isSuccessful?: BoolFieldUpdateOperationsInput | boolean
    failureReason?: NullableStringFieldUpdateOperationsInput | string | null
    verificationResult?: JsonNullValueInput | InputJsonValue
  }

  export type VerificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    proofId?: StringFieldUpdateOperationsInput | string
    referenceId?: StringFieldUpdateOperationsInput | string
    verifierAddress?: NullableStringFieldUpdateOperationsInput | string | null
    verifiedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isSuccessful?: BoolFieldUpdateOperationsInput | boolean
    failureReason?: NullableStringFieldUpdateOperationsInput | string | null
    verificationResult?: JsonNullValueInput | InputJsonValue
  }

  export type BatchCreateInput = {
    id?: string
    createdAt?: Date | string
    processedAt?: Date | string | null
    status: BatchStatus
    merkleRoot: string
    transactionHash?: string | null
    gasUsed?: string | null
    gasPrice?: string | null
    totalCost?: string | null
    retryCount?: number
    maxRetries?: number
    tempWallet: WalletCreateNestedOneWithoutBatchesInput
    proofs?: ProofCreateNestedManyWithoutBatchInput
  }

  export type BatchUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    processedAt?: Date | string | null
    status: BatchStatus
    merkleRoot: string
    transactionHash?: string | null
    tempWalletId: string
    gasUsed?: string | null
    gasPrice?: string | null
    totalCost?: string | null
    retryCount?: number
    maxRetries?: number
    proofs?: ProofUncheckedCreateNestedManyWithoutBatchInput
  }

  export type BatchUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumBatchStatusFieldUpdateOperationsInput | BatchStatus
    merkleRoot?: StringFieldUpdateOperationsInput | string
    transactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    gasUsed?: NullableStringFieldUpdateOperationsInput | string | null
    gasPrice?: NullableStringFieldUpdateOperationsInput | string | null
    totalCost?: NullableStringFieldUpdateOperationsInput | string | null
    retryCount?: IntFieldUpdateOperationsInput | number
    maxRetries?: IntFieldUpdateOperationsInput | number
    tempWallet?: WalletUpdateOneRequiredWithoutBatchesNestedInput
    proofs?: ProofUpdateManyWithoutBatchNestedInput
  }

  export type BatchUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumBatchStatusFieldUpdateOperationsInput | BatchStatus
    merkleRoot?: StringFieldUpdateOperationsInput | string
    transactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    tempWalletId?: StringFieldUpdateOperationsInput | string
    gasUsed?: NullableStringFieldUpdateOperationsInput | string | null
    gasPrice?: NullableStringFieldUpdateOperationsInput | string | null
    totalCost?: NullableStringFieldUpdateOperationsInput | string | null
    retryCount?: IntFieldUpdateOperationsInput | number
    maxRetries?: IntFieldUpdateOperationsInput | number
    proofs?: ProofUncheckedUpdateManyWithoutBatchNestedInput
  }

  export type BatchCreateManyInput = {
    id?: string
    createdAt?: Date | string
    processedAt?: Date | string | null
    status: BatchStatus
    merkleRoot: string
    transactionHash?: string | null
    tempWalletId: string
    gasUsed?: string | null
    gasPrice?: string | null
    totalCost?: string | null
    retryCount?: number
    maxRetries?: number
  }

  export type BatchUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumBatchStatusFieldUpdateOperationsInput | BatchStatus
    merkleRoot?: StringFieldUpdateOperationsInput | string
    transactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    gasUsed?: NullableStringFieldUpdateOperationsInput | string | null
    gasPrice?: NullableStringFieldUpdateOperationsInput | string | null
    totalCost?: NullableStringFieldUpdateOperationsInput | string | null
    retryCount?: IntFieldUpdateOperationsInput | number
    maxRetries?: IntFieldUpdateOperationsInput | number
  }

  export type BatchUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumBatchStatusFieldUpdateOperationsInput | BatchStatus
    merkleRoot?: StringFieldUpdateOperationsInput | string
    transactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    tempWalletId?: StringFieldUpdateOperationsInput | string
    gasUsed?: NullableStringFieldUpdateOperationsInput | string | null
    gasPrice?: NullableStringFieldUpdateOperationsInput | string | null
    totalCost?: NullableStringFieldUpdateOperationsInput | string | null
    retryCount?: IntFieldUpdateOperationsInput | number
    maxRetries?: IntFieldUpdateOperationsInput | number
  }

  export type OrganizationCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    apiKey?: string | null
    settings?: JsonNullValueInput | InputJsonValue
    members?: OrganizationUserCreateNestedManyWithoutOrganizationInput
    templates?: ProofTemplateCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    apiKey?: string | null
    settings?: JsonNullValueInput | InputJsonValue
    members?: OrganizationUserUncheckedCreateNestedManyWithoutOrganizationInput
    templates?: ProofTemplateUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    apiKey?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: JsonNullValueInput | InputJsonValue
    members?: OrganizationUserUpdateManyWithoutOrganizationNestedInput
    templates?: ProofTemplateUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    apiKey?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: JsonNullValueInput | InputJsonValue
    members?: OrganizationUserUncheckedUpdateManyWithoutOrganizationNestedInput
    templates?: ProofTemplateUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationCreateManyInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    apiKey?: string | null
    settings?: JsonNullValueInput | InputJsonValue
  }

  export type OrganizationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    apiKey?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: JsonNullValueInput | InputJsonValue
  }

  export type OrganizationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    apiKey?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: JsonNullValueInput | InputJsonValue
  }

  export type OrganizationUserCreateInput = {
    id?: string
    role?: OrgRole
    joinedAt?: Date | string
    user: UserCreateNestedOneWithoutOrganizationUsersInput
    organization: OrganizationCreateNestedOneWithoutMembersInput
  }

  export type OrganizationUserUncheckedCreateInput = {
    id?: string
    userId: string
    organizationId: string
    role?: OrgRole
    joinedAt?: Date | string
  }

  export type OrganizationUserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumOrgRoleFieldUpdateOperationsInput | OrgRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutOrganizationUsersNestedInput
    organization?: OrganizationUpdateOneRequiredWithoutMembersNestedInput
  }

  export type OrganizationUserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    role?: EnumOrgRoleFieldUpdateOperationsInput | OrgRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrganizationUserCreateManyInput = {
    id?: string
    userId: string
    organizationId: string
    role?: OrgRole
    joinedAt?: Date | string
  }

  export type OrganizationUserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumOrgRoleFieldUpdateOperationsInput | OrgRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrganizationUserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    role?: EnumOrgRoleFieldUpdateOperationsInput | OrgRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProofTemplateCreateInput = {
    id?: string
    name: string
    description?: string | null
    proofType: ProofType
    threshold: string
    expiryPeriod: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    settings?: JsonNullValueInput | InputJsonValue
    organization: OrganizationCreateNestedOneWithoutTemplatesInput
  }

  export type ProofTemplateUncheckedCreateInput = {
    id?: string
    organizationId: string
    name: string
    description?: string | null
    proofType: ProofType
    threshold: string
    expiryPeriod: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    settings?: JsonNullValueInput | InputJsonValue
  }

  export type ProofTemplateUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    proofType?: EnumProofTypeFieldUpdateOperationsInput | ProofType
    threshold?: StringFieldUpdateOperationsInput | string
    expiryPeriod?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    settings?: JsonNullValueInput | InputJsonValue
    organization?: OrganizationUpdateOneRequiredWithoutTemplatesNestedInput
  }

  export type ProofTemplateUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    proofType?: EnumProofTypeFieldUpdateOperationsInput | ProofType
    threshold?: StringFieldUpdateOperationsInput | string
    expiryPeriod?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    settings?: JsonNullValueInput | InputJsonValue
  }

  export type ProofTemplateCreateManyInput = {
    id?: string
    organizationId: string
    name: string
    description?: string | null
    proofType: ProofType
    threshold: string
    expiryPeriod: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    settings?: JsonNullValueInput | InputJsonValue
  }

  export type ProofTemplateUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    proofType?: EnumProofTypeFieldUpdateOperationsInput | ProofType
    threshold?: StringFieldUpdateOperationsInput | string
    expiryPeriod?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    settings?: JsonNullValueInput | InputJsonValue
  }

  export type ProofTemplateUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    proofType?: EnumProofTypeFieldUpdateOperationsInput | ProofType
    threshold?: StringFieldUpdateOperationsInput | string
    expiryPeriod?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    settings?: JsonNullValueInput | InputJsonValue
  }

  export type AuditLogCreateInput = {
    id?: string
    action: string
    entityType: string
    entityId?: string | null
    userId?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
  }

  export type AuditLogUncheckedCreateInput = {
    id?: string
    action: string
    entityType: string
    entityId?: string | null
    userId?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
  }

  export type AuditLogUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogCreateManyInput = {
    id?: string
    action: string
    entityType: string
    entityId?: string | null
    userId?: string | null
    ipAddress?: string | null
    userAgent?: string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: Date | string
  }

  export type AuditLogUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type AuditLogUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    entityType?: StringFieldUpdateOperationsInput | string
    entityId?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: NullableStringFieldUpdateOperationsInput | string | null
    ipAddress?: NullableStringFieldUpdateOperationsInput | string | null
    userAgent?: NullableStringFieldUpdateOperationsInput | string | null
    metadata?: NullableJsonNullValueInput | InputJsonValue
    timestamp?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UuidFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    mode?: QueryMode
    not?: NestedUuidFilter | string
  }

  export type StringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringFilter | string
  }

  export type DateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type DateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type BoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type StringNullableListFilter = {
    equals?: Enumerable<string> | null
    has?: string | null
    hasEvery?: Enumerable<string>
    hasSome?: Enumerable<string>
    isEmpty?: boolean
  }
  export type JsonFilter = 
    | PatchUndefined<
        Either<Required<JsonFilterBase>, Exclude<keyof Required<JsonFilterBase>, 'path'>>,
        Required<JsonFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase>, 'path'>>

  export type JsonFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: string[]
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
  }

  export type WalletListRelationFilter = {
    every?: WalletWhereInput
    some?: WalletWhereInput
    none?: WalletWhereInput
  }

  export type ProofListRelationFilter = {
    every?: ProofWhereInput
    some?: ProofWhereInput
    none?: ProofWhereInput
  }

  export type OrganizationUserListRelationFilter = {
    every?: OrganizationUserWhereInput
    some?: OrganizationUserWhereInput
    none?: OrganizationUserWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type WalletOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProofOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrganizationUserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    address?: SortOrder
    createdAt?: SortOrder
    lastLoginAt?: SortOrder
    isActive?: SortOrder
    permissions?: SortOrder
    settings?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    address?: SortOrder
    createdAt?: SortOrder
    lastLoginAt?: SortOrder
    isActive?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    address?: SortOrder
    createdAt?: SortOrder
    lastLoginAt?: SortOrder
    isActive?: SortOrder
  }

  export type UuidWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    mode?: QueryMode
    not?: NestedUuidWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type StringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type DateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type DateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type BoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }
  export type JsonWithAggregatesFilter = 
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase>, Exclude<keyof Required<JsonWithAggregatesFilterBase>, 'path'>>,
        Required<JsonWithAggregatesFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase>, 'path'>>

  export type JsonWithAggregatesFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: string[]
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
    _count?: NestedIntFilter
    _min?: NestedJsonFilter
    _max?: NestedJsonFilter
  }

  export type IntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type EnumWalletTypeFilter = {
    equals?: WalletType
    in?: Enumerable<WalletType>
    notIn?: Enumerable<WalletType>
    not?: NestedEnumWalletTypeFilter | WalletType
  }

  export type StringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableFilter | string | null
  }

  export type IntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type UserRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type BatchListRelationFilter = {
    every?: BatchWhereInput
    some?: BatchWhereInput
    none?: BatchWhereInput
  }

  export type BatchOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type WalletAddressChainIdCompoundUniqueInput = {
    address: string
    chainId: number
  }

  export type WalletCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    address?: SortOrder
    chainId?: SortOrder
    type?: SortOrder
    encryptedPrivateKey?: SortOrder
    keyId?: SortOrder
    createdAt?: SortOrder
    lastUsedAt?: SortOrder
    isArchived?: SortOrder
    balance?: SortOrder
    nonce?: SortOrder
  }

  export type WalletAvgOrderByAggregateInput = {
    chainId?: SortOrder
    nonce?: SortOrder
  }

  export type WalletMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    address?: SortOrder
    chainId?: SortOrder
    type?: SortOrder
    encryptedPrivateKey?: SortOrder
    keyId?: SortOrder
    createdAt?: SortOrder
    lastUsedAt?: SortOrder
    isArchived?: SortOrder
    balance?: SortOrder
    nonce?: SortOrder
  }

  export type WalletMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    address?: SortOrder
    chainId?: SortOrder
    type?: SortOrder
    encryptedPrivateKey?: SortOrder
    keyId?: SortOrder
    createdAt?: SortOrder
    lastUsedAt?: SortOrder
    isArchived?: SortOrder
    balance?: SortOrder
    nonce?: SortOrder
  }

  export type WalletSumOrderByAggregateInput = {
    chainId?: SortOrder
    nonce?: SortOrder
  }

  export type IntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type EnumWalletTypeWithAggregatesFilter = {
    equals?: WalletType
    in?: Enumerable<WalletType>
    notIn?: Enumerable<WalletType>
    not?: NestedEnumWalletTypeWithAggregatesFilter | WalletType
    _count?: NestedIntFilter
    _min?: NestedEnumWalletTypeFilter
    _max?: NestedEnumWalletTypeFilter
  }

  export type StringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type IntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type EnumProofTypeFilter = {
    equals?: ProofType
    in?: Enumerable<ProofType>
    notIn?: Enumerable<ProofType>
    not?: NestedEnumProofTypeFilter | ProofType
  }
  export type JsonNullableFilter = 
    | PatchUndefined<
        Either<Required<JsonNullableFilterBase>, Exclude<keyof Required<JsonNullableFilterBase>, 'path'>>,
        Required<JsonNullableFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonNullableFilterBase>, 'path'>>

  export type JsonNullableFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: string[]
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
  }

  export type UuidNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    mode?: QueryMode
    not?: NestedUuidNullableFilter | string | null
  }

  export type EnumProofStatusFilter = {
    equals?: ProofStatus
    in?: Enumerable<ProofStatus>
    notIn?: Enumerable<ProofStatus>
    not?: NestedEnumProofStatusFilter | ProofStatus
  }

  export type WalletRelationFilter = {
    is?: WalletWhereInput | null
    isNot?: WalletWhereInput | null
  }

  export type BatchRelationFilter = {
    is?: BatchWhereInput | null
    isNot?: BatchWhereInput | null
  }

  export type VerificationListRelationFilter = {
    every?: VerificationWhereInput
    some?: VerificationWhereInput
    none?: VerificationWhereInput
  }

  export type VerificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProofCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    referenceId?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    proofType?: SortOrder
    isRevoked?: SortOrder
    revokedAt?: SortOrder
    revocationReason?: SortOrder
    encryptedData?: SortOrder
    encryptionKeyId?: SortOrder
    tempWalletId?: SortOrder
    transactionHash?: SortOrder
    merkleRoot?: SortOrder
    merklePath?: SortOrder
    batchId?: SortOrder
    warningFlags?: SortOrder
    originalWallets?: SortOrder
    status?: SortOrder
  }

  export type ProofMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    referenceId?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    proofType?: SortOrder
    isRevoked?: SortOrder
    revokedAt?: SortOrder
    revocationReason?: SortOrder
    encryptedData?: SortOrder
    encryptionKeyId?: SortOrder
    tempWalletId?: SortOrder
    transactionHash?: SortOrder
    merkleRoot?: SortOrder
    batchId?: SortOrder
    status?: SortOrder
  }

  export type ProofMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    referenceId?: SortOrder
    createdAt?: SortOrder
    expiresAt?: SortOrder
    proofType?: SortOrder
    isRevoked?: SortOrder
    revokedAt?: SortOrder
    revocationReason?: SortOrder
    encryptedData?: SortOrder
    encryptionKeyId?: SortOrder
    tempWalletId?: SortOrder
    transactionHash?: SortOrder
    merkleRoot?: SortOrder
    batchId?: SortOrder
    status?: SortOrder
  }

  export type EnumProofTypeWithAggregatesFilter = {
    equals?: ProofType
    in?: Enumerable<ProofType>
    notIn?: Enumerable<ProofType>
    not?: NestedEnumProofTypeWithAggregatesFilter | ProofType
    _count?: NestedIntFilter
    _min?: NestedEnumProofTypeFilter
    _max?: NestedEnumProofTypeFilter
  }
  export type JsonNullableWithAggregatesFilter = 
    | PatchUndefined<
        Either<Required<JsonNullableWithAggregatesFilterBase>, Exclude<keyof Required<JsonNullableWithAggregatesFilterBase>, 'path'>>,
        Required<JsonNullableWithAggregatesFilterBase>
      >
    | OptionalFlat<Omit<Required<JsonNullableWithAggregatesFilterBase>, 'path'>>

  export type JsonNullableWithAggregatesFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: string[]
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
    _count?: NestedIntNullableFilter
    _min?: NestedJsonNullableFilter
    _max?: NestedJsonNullableFilter
  }

  export type UuidNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    mode?: QueryMode
    not?: NestedUuidNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type EnumProofStatusWithAggregatesFilter = {
    equals?: ProofStatus
    in?: Enumerable<ProofStatus>
    notIn?: Enumerable<ProofStatus>
    not?: NestedEnumProofStatusWithAggregatesFilter | ProofStatus
    _count?: NestedIntFilter
    _min?: NestedEnumProofStatusFilter
    _max?: NestedEnumProofStatusFilter
  }

  export type ProofRelationFilter = {
    is?: ProofWhereInput | null
    isNot?: ProofWhereInput | null
  }

  export type VerificationCountOrderByAggregateInput = {
    id?: SortOrder
    proofId?: SortOrder
    referenceId?: SortOrder
    verifierAddress?: SortOrder
    verifiedAt?: SortOrder
    isSuccessful?: SortOrder
    failureReason?: SortOrder
    verificationResult?: SortOrder
  }

  export type VerificationMaxOrderByAggregateInput = {
    id?: SortOrder
    proofId?: SortOrder
    referenceId?: SortOrder
    verifierAddress?: SortOrder
    verifiedAt?: SortOrder
    isSuccessful?: SortOrder
    failureReason?: SortOrder
  }

  export type VerificationMinOrderByAggregateInput = {
    id?: SortOrder
    proofId?: SortOrder
    referenceId?: SortOrder
    verifierAddress?: SortOrder
    verifiedAt?: SortOrder
    isSuccessful?: SortOrder
    failureReason?: SortOrder
  }

  export type EnumBatchStatusFilter = {
    equals?: BatchStatus
    in?: Enumerable<BatchStatus>
    notIn?: Enumerable<BatchStatus>
    not?: NestedEnumBatchStatusFilter | BatchStatus
  }

  export type BatchCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    processedAt?: SortOrder
    status?: SortOrder
    merkleRoot?: SortOrder
    transactionHash?: SortOrder
    tempWalletId?: SortOrder
    gasUsed?: SortOrder
    gasPrice?: SortOrder
    totalCost?: SortOrder
    retryCount?: SortOrder
    maxRetries?: SortOrder
  }

  export type BatchAvgOrderByAggregateInput = {
    retryCount?: SortOrder
    maxRetries?: SortOrder
  }

  export type BatchMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    processedAt?: SortOrder
    status?: SortOrder
    merkleRoot?: SortOrder
    transactionHash?: SortOrder
    tempWalletId?: SortOrder
    gasUsed?: SortOrder
    gasPrice?: SortOrder
    totalCost?: SortOrder
    retryCount?: SortOrder
    maxRetries?: SortOrder
  }

  export type BatchMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    processedAt?: SortOrder
    status?: SortOrder
    merkleRoot?: SortOrder
    transactionHash?: SortOrder
    tempWalletId?: SortOrder
    gasUsed?: SortOrder
    gasPrice?: SortOrder
    totalCost?: SortOrder
    retryCount?: SortOrder
    maxRetries?: SortOrder
  }

  export type BatchSumOrderByAggregateInput = {
    retryCount?: SortOrder
    maxRetries?: SortOrder
  }

  export type EnumBatchStatusWithAggregatesFilter = {
    equals?: BatchStatus
    in?: Enumerable<BatchStatus>
    notIn?: Enumerable<BatchStatus>
    not?: NestedEnumBatchStatusWithAggregatesFilter | BatchStatus
    _count?: NestedIntFilter
    _min?: NestedEnumBatchStatusFilter
    _max?: NestedEnumBatchStatusFilter
  }

  export type ProofTemplateListRelationFilter = {
    every?: ProofTemplateWhereInput
    some?: ProofTemplateWhereInput
    none?: ProofTemplateWhereInput
  }

  export type ProofTemplateOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrganizationCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    apiKey?: SortOrder
    settings?: SortOrder
  }

  export type OrganizationMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    apiKey?: SortOrder
  }

  export type OrganizationMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    apiKey?: SortOrder
  }

  export type EnumOrgRoleFilter = {
    equals?: OrgRole
    in?: Enumerable<OrgRole>
    notIn?: Enumerable<OrgRole>
    not?: NestedEnumOrgRoleFilter | OrgRole
  }

  export type OrganizationRelationFilter = {
    is?: OrganizationWhereInput | null
    isNot?: OrganizationWhereInput | null
  }

  export type OrganizationUserUserIdOrganizationIdCompoundUniqueInput = {
    userId: string
    organizationId: string
  }

  export type OrganizationUserCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    organizationId?: SortOrder
    role?: SortOrder
    joinedAt?: SortOrder
  }

  export type OrganizationUserMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    organizationId?: SortOrder
    role?: SortOrder
    joinedAt?: SortOrder
  }

  export type OrganizationUserMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    organizationId?: SortOrder
    role?: SortOrder
    joinedAt?: SortOrder
  }

  export type EnumOrgRoleWithAggregatesFilter = {
    equals?: OrgRole
    in?: Enumerable<OrgRole>
    notIn?: Enumerable<OrgRole>
    not?: NestedEnumOrgRoleWithAggregatesFilter | OrgRole
    _count?: NestedIntFilter
    _min?: NestedEnumOrgRoleFilter
    _max?: NestedEnumOrgRoleFilter
  }

  export type ProofTemplateCountOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    proofType?: SortOrder
    threshold?: SortOrder
    expiryPeriod?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isActive?: SortOrder
    settings?: SortOrder
  }

  export type ProofTemplateAvgOrderByAggregateInput = {
    expiryPeriod?: SortOrder
  }

  export type ProofTemplateMaxOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    proofType?: SortOrder
    threshold?: SortOrder
    expiryPeriod?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isActive?: SortOrder
  }

  export type ProofTemplateMinOrderByAggregateInput = {
    id?: SortOrder
    organizationId?: SortOrder
    name?: SortOrder
    description?: SortOrder
    proofType?: SortOrder
    threshold?: SortOrder
    expiryPeriod?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isActive?: SortOrder
  }

  export type ProofTemplateSumOrderByAggregateInput = {
    expiryPeriod?: SortOrder
  }

  export type AuditLogCountOrderByAggregateInput = {
    id?: SortOrder
    action?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    userId?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    metadata?: SortOrder
    timestamp?: SortOrder
  }

  export type AuditLogMaxOrderByAggregateInput = {
    id?: SortOrder
    action?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    userId?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    timestamp?: SortOrder
  }

  export type AuditLogMinOrderByAggregateInput = {
    id?: SortOrder
    action?: SortOrder
    entityType?: SortOrder
    entityId?: SortOrder
    userId?: SortOrder
    ipAddress?: SortOrder
    userAgent?: SortOrder
    timestamp?: SortOrder
  }

  export type UserCreatepermissionsInput = {
    set: Enumerable<string>
  }

  export type WalletCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<WalletCreateWithoutUserInput>, Enumerable<WalletUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<WalletCreateOrConnectWithoutUserInput>
    createMany?: WalletCreateManyUserInputEnvelope
    connect?: Enumerable<WalletWhereUniqueInput>
  }

  export type ProofCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ProofCreateWithoutUserInput>, Enumerable<ProofUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ProofCreateOrConnectWithoutUserInput>
    createMany?: ProofCreateManyUserInputEnvelope
    connect?: Enumerable<ProofWhereUniqueInput>
  }

  export type OrganizationUserCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<OrganizationUserCreateWithoutUserInput>, Enumerable<OrganizationUserUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<OrganizationUserCreateOrConnectWithoutUserInput>
    createMany?: OrganizationUserCreateManyUserInputEnvelope
    connect?: Enumerable<OrganizationUserWhereUniqueInput>
  }

  export type WalletUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<WalletCreateWithoutUserInput>, Enumerable<WalletUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<WalletCreateOrConnectWithoutUserInput>
    createMany?: WalletCreateManyUserInputEnvelope
    connect?: Enumerable<WalletWhereUniqueInput>
  }

  export type ProofUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<ProofCreateWithoutUserInput>, Enumerable<ProofUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ProofCreateOrConnectWithoutUserInput>
    createMany?: ProofCreateManyUserInputEnvelope
    connect?: Enumerable<ProofWhereUniqueInput>
  }

  export type OrganizationUserUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<Enumerable<OrganizationUserCreateWithoutUserInput>, Enumerable<OrganizationUserUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<OrganizationUserCreateOrConnectWithoutUserInput>
    createMany?: OrganizationUserCreateManyUserInputEnvelope
    connect?: Enumerable<OrganizationUserWhereUniqueInput>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdatepermissionsInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type WalletUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<WalletCreateWithoutUserInput>, Enumerable<WalletUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<WalletCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<WalletUpsertWithWhereUniqueWithoutUserInput>
    createMany?: WalletCreateManyUserInputEnvelope
    set?: Enumerable<WalletWhereUniqueInput>
    disconnect?: Enumerable<WalletWhereUniqueInput>
    delete?: Enumerable<WalletWhereUniqueInput>
    connect?: Enumerable<WalletWhereUniqueInput>
    update?: Enumerable<WalletUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<WalletUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<WalletScalarWhereInput>
  }

  export type ProofUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ProofCreateWithoutUserInput>, Enumerable<ProofUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ProofCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ProofUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ProofCreateManyUserInputEnvelope
    set?: Enumerable<ProofWhereUniqueInput>
    disconnect?: Enumerable<ProofWhereUniqueInput>
    delete?: Enumerable<ProofWhereUniqueInput>
    connect?: Enumerable<ProofWhereUniqueInput>
    update?: Enumerable<ProofUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ProofUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ProofScalarWhereInput>
  }

  export type OrganizationUserUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<OrganizationUserCreateWithoutUserInput>, Enumerable<OrganizationUserUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<OrganizationUserCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<OrganizationUserUpsertWithWhereUniqueWithoutUserInput>
    createMany?: OrganizationUserCreateManyUserInputEnvelope
    set?: Enumerable<OrganizationUserWhereUniqueInput>
    disconnect?: Enumerable<OrganizationUserWhereUniqueInput>
    delete?: Enumerable<OrganizationUserWhereUniqueInput>
    connect?: Enumerable<OrganizationUserWhereUniqueInput>
    update?: Enumerable<OrganizationUserUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<OrganizationUserUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<OrganizationUserScalarWhereInput>
  }

  export type WalletUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<WalletCreateWithoutUserInput>, Enumerable<WalletUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<WalletCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<WalletUpsertWithWhereUniqueWithoutUserInput>
    createMany?: WalletCreateManyUserInputEnvelope
    set?: Enumerable<WalletWhereUniqueInput>
    disconnect?: Enumerable<WalletWhereUniqueInput>
    delete?: Enumerable<WalletWhereUniqueInput>
    connect?: Enumerable<WalletWhereUniqueInput>
    update?: Enumerable<WalletUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<WalletUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<WalletScalarWhereInput>
  }

  export type ProofUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<ProofCreateWithoutUserInput>, Enumerable<ProofUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<ProofCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<ProofUpsertWithWhereUniqueWithoutUserInput>
    createMany?: ProofCreateManyUserInputEnvelope
    set?: Enumerable<ProofWhereUniqueInput>
    disconnect?: Enumerable<ProofWhereUniqueInput>
    delete?: Enumerable<ProofWhereUniqueInput>
    connect?: Enumerable<ProofWhereUniqueInput>
    update?: Enumerable<ProofUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<ProofUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<ProofScalarWhereInput>
  }

  export type OrganizationUserUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<Enumerable<OrganizationUserCreateWithoutUserInput>, Enumerable<OrganizationUserUncheckedCreateWithoutUserInput>>
    connectOrCreate?: Enumerable<OrganizationUserCreateOrConnectWithoutUserInput>
    upsert?: Enumerable<OrganizationUserUpsertWithWhereUniqueWithoutUserInput>
    createMany?: OrganizationUserCreateManyUserInputEnvelope
    set?: Enumerable<OrganizationUserWhereUniqueInput>
    disconnect?: Enumerable<OrganizationUserWhereUniqueInput>
    delete?: Enumerable<OrganizationUserWhereUniqueInput>
    connect?: Enumerable<OrganizationUserWhereUniqueInput>
    update?: Enumerable<OrganizationUserUpdateWithWhereUniqueWithoutUserInput>
    updateMany?: Enumerable<OrganizationUserUpdateManyWithWhereWithoutUserInput>
    deleteMany?: Enumerable<OrganizationUserScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutWalletsInput = {
    create?: XOR<UserCreateWithoutWalletsInput, UserUncheckedCreateWithoutWalletsInput>
    connectOrCreate?: UserCreateOrConnectWithoutWalletsInput
    connect?: UserWhereUniqueInput
  }

  export type ProofCreateNestedManyWithoutTempWalletInput = {
    create?: XOR<Enumerable<ProofCreateWithoutTempWalletInput>, Enumerable<ProofUncheckedCreateWithoutTempWalletInput>>
    connectOrCreate?: Enumerable<ProofCreateOrConnectWithoutTempWalletInput>
    createMany?: ProofCreateManyTempWalletInputEnvelope
    connect?: Enumerable<ProofWhereUniqueInput>
  }

  export type BatchCreateNestedManyWithoutTempWalletInput = {
    create?: XOR<Enumerable<BatchCreateWithoutTempWalletInput>, Enumerable<BatchUncheckedCreateWithoutTempWalletInput>>
    connectOrCreate?: Enumerable<BatchCreateOrConnectWithoutTempWalletInput>
    createMany?: BatchCreateManyTempWalletInputEnvelope
    connect?: Enumerable<BatchWhereUniqueInput>
  }

  export type ProofUncheckedCreateNestedManyWithoutTempWalletInput = {
    create?: XOR<Enumerable<ProofCreateWithoutTempWalletInput>, Enumerable<ProofUncheckedCreateWithoutTempWalletInput>>
    connectOrCreate?: Enumerable<ProofCreateOrConnectWithoutTempWalletInput>
    createMany?: ProofCreateManyTempWalletInputEnvelope
    connect?: Enumerable<ProofWhereUniqueInput>
  }

  export type BatchUncheckedCreateNestedManyWithoutTempWalletInput = {
    create?: XOR<Enumerable<BatchCreateWithoutTempWalletInput>, Enumerable<BatchUncheckedCreateWithoutTempWalletInput>>
    connectOrCreate?: Enumerable<BatchCreateOrConnectWithoutTempWalletInput>
    createMany?: BatchCreateManyTempWalletInputEnvelope
    connect?: Enumerable<BatchWhereUniqueInput>
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type EnumWalletTypeFieldUpdateOperationsInput = {
    set?: WalletType
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutWalletsNestedInput = {
    create?: XOR<UserCreateWithoutWalletsInput, UserUncheckedCreateWithoutWalletsInput>
    connectOrCreate?: UserCreateOrConnectWithoutWalletsInput
    upsert?: UserUpsertWithoutWalletsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutWalletsInput, UserUncheckedUpdateWithoutWalletsInput>
  }

  export type ProofUpdateManyWithoutTempWalletNestedInput = {
    create?: XOR<Enumerable<ProofCreateWithoutTempWalletInput>, Enumerable<ProofUncheckedCreateWithoutTempWalletInput>>
    connectOrCreate?: Enumerable<ProofCreateOrConnectWithoutTempWalletInput>
    upsert?: Enumerable<ProofUpsertWithWhereUniqueWithoutTempWalletInput>
    createMany?: ProofCreateManyTempWalletInputEnvelope
    set?: Enumerable<ProofWhereUniqueInput>
    disconnect?: Enumerable<ProofWhereUniqueInput>
    delete?: Enumerable<ProofWhereUniqueInput>
    connect?: Enumerable<ProofWhereUniqueInput>
    update?: Enumerable<ProofUpdateWithWhereUniqueWithoutTempWalletInput>
    updateMany?: Enumerable<ProofUpdateManyWithWhereWithoutTempWalletInput>
    deleteMany?: Enumerable<ProofScalarWhereInput>
  }

  export type BatchUpdateManyWithoutTempWalletNestedInput = {
    create?: XOR<Enumerable<BatchCreateWithoutTempWalletInput>, Enumerable<BatchUncheckedCreateWithoutTempWalletInput>>
    connectOrCreate?: Enumerable<BatchCreateOrConnectWithoutTempWalletInput>
    upsert?: Enumerable<BatchUpsertWithWhereUniqueWithoutTempWalletInput>
    createMany?: BatchCreateManyTempWalletInputEnvelope
    set?: Enumerable<BatchWhereUniqueInput>
    disconnect?: Enumerable<BatchWhereUniqueInput>
    delete?: Enumerable<BatchWhereUniqueInput>
    connect?: Enumerable<BatchWhereUniqueInput>
    update?: Enumerable<BatchUpdateWithWhereUniqueWithoutTempWalletInput>
    updateMany?: Enumerable<BatchUpdateManyWithWhereWithoutTempWalletInput>
    deleteMany?: Enumerable<BatchScalarWhereInput>
  }

  export type ProofUncheckedUpdateManyWithoutTempWalletNestedInput = {
    create?: XOR<Enumerable<ProofCreateWithoutTempWalletInput>, Enumerable<ProofUncheckedCreateWithoutTempWalletInput>>
    connectOrCreate?: Enumerable<ProofCreateOrConnectWithoutTempWalletInput>
    upsert?: Enumerable<ProofUpsertWithWhereUniqueWithoutTempWalletInput>
    createMany?: ProofCreateManyTempWalletInputEnvelope
    set?: Enumerable<ProofWhereUniqueInput>
    disconnect?: Enumerable<ProofWhereUniqueInput>
    delete?: Enumerable<ProofWhereUniqueInput>
    connect?: Enumerable<ProofWhereUniqueInput>
    update?: Enumerable<ProofUpdateWithWhereUniqueWithoutTempWalletInput>
    updateMany?: Enumerable<ProofUpdateManyWithWhereWithoutTempWalletInput>
    deleteMany?: Enumerable<ProofScalarWhereInput>
  }

  export type BatchUncheckedUpdateManyWithoutTempWalletNestedInput = {
    create?: XOR<Enumerable<BatchCreateWithoutTempWalletInput>, Enumerable<BatchUncheckedCreateWithoutTempWalletInput>>
    connectOrCreate?: Enumerable<BatchCreateOrConnectWithoutTempWalletInput>
    upsert?: Enumerable<BatchUpsertWithWhereUniqueWithoutTempWalletInput>
    createMany?: BatchCreateManyTempWalletInputEnvelope
    set?: Enumerable<BatchWhereUniqueInput>
    disconnect?: Enumerable<BatchWhereUniqueInput>
    delete?: Enumerable<BatchWhereUniqueInput>
    connect?: Enumerable<BatchWhereUniqueInput>
    update?: Enumerable<BatchUpdateWithWhereUniqueWithoutTempWalletInput>
    updateMany?: Enumerable<BatchUpdateManyWithWhereWithoutTempWalletInput>
    deleteMany?: Enumerable<BatchScalarWhereInput>
  }

  export type ProofCreatewarningFlagsInput = {
    set: Enumerable<string>
  }

  export type ProofCreateoriginalWalletsInput = {
    set: Enumerable<string>
  }

  export type UserCreateNestedOneWithoutProofsInput = {
    create?: XOR<UserCreateWithoutProofsInput, UserUncheckedCreateWithoutProofsInput>
    connectOrCreate?: UserCreateOrConnectWithoutProofsInput
    connect?: UserWhereUniqueInput
  }

  export type WalletCreateNestedOneWithoutProofsInput = {
    create?: XOR<WalletCreateWithoutProofsInput, WalletUncheckedCreateWithoutProofsInput>
    connectOrCreate?: WalletCreateOrConnectWithoutProofsInput
    connect?: WalletWhereUniqueInput
  }

  export type BatchCreateNestedOneWithoutProofsInput = {
    create?: XOR<BatchCreateWithoutProofsInput, BatchUncheckedCreateWithoutProofsInput>
    connectOrCreate?: BatchCreateOrConnectWithoutProofsInput
    connect?: BatchWhereUniqueInput
  }

  export type VerificationCreateNestedManyWithoutProofInput = {
    create?: XOR<Enumerable<VerificationCreateWithoutProofInput>, Enumerable<VerificationUncheckedCreateWithoutProofInput>>
    connectOrCreate?: Enumerable<VerificationCreateOrConnectWithoutProofInput>
    createMany?: VerificationCreateManyProofInputEnvelope
    connect?: Enumerable<VerificationWhereUniqueInput>
  }

  export type VerificationUncheckedCreateNestedManyWithoutProofInput = {
    create?: XOR<Enumerable<VerificationCreateWithoutProofInput>, Enumerable<VerificationUncheckedCreateWithoutProofInput>>
    connectOrCreate?: Enumerable<VerificationCreateOrConnectWithoutProofInput>
    createMany?: VerificationCreateManyProofInputEnvelope
    connect?: Enumerable<VerificationWhereUniqueInput>
  }

  export type EnumProofTypeFieldUpdateOperationsInput = {
    set?: ProofType
  }

  export type ProofUpdatewarningFlagsInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type ProofUpdateoriginalWalletsInput = {
    set?: Enumerable<string>
    push?: string | Enumerable<string>
  }

  export type EnumProofStatusFieldUpdateOperationsInput = {
    set?: ProofStatus
  }

  export type UserUpdateOneRequiredWithoutProofsNestedInput = {
    create?: XOR<UserCreateWithoutProofsInput, UserUncheckedCreateWithoutProofsInput>
    connectOrCreate?: UserCreateOrConnectWithoutProofsInput
    upsert?: UserUpsertWithoutProofsInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutProofsInput, UserUncheckedUpdateWithoutProofsInput>
  }

  export type WalletUpdateOneRequiredWithoutProofsNestedInput = {
    create?: XOR<WalletCreateWithoutProofsInput, WalletUncheckedCreateWithoutProofsInput>
    connectOrCreate?: WalletCreateOrConnectWithoutProofsInput
    upsert?: WalletUpsertWithoutProofsInput
    connect?: WalletWhereUniqueInput
    update?: XOR<WalletUpdateWithoutProofsInput, WalletUncheckedUpdateWithoutProofsInput>
  }

  export type BatchUpdateOneWithoutProofsNestedInput = {
    create?: XOR<BatchCreateWithoutProofsInput, BatchUncheckedCreateWithoutProofsInput>
    connectOrCreate?: BatchCreateOrConnectWithoutProofsInput
    upsert?: BatchUpsertWithoutProofsInput
    disconnect?: boolean
    delete?: boolean
    connect?: BatchWhereUniqueInput
    update?: XOR<BatchUpdateWithoutProofsInput, BatchUncheckedUpdateWithoutProofsInput>
  }

  export type VerificationUpdateManyWithoutProofNestedInput = {
    create?: XOR<Enumerable<VerificationCreateWithoutProofInput>, Enumerable<VerificationUncheckedCreateWithoutProofInput>>
    connectOrCreate?: Enumerable<VerificationCreateOrConnectWithoutProofInput>
    upsert?: Enumerable<VerificationUpsertWithWhereUniqueWithoutProofInput>
    createMany?: VerificationCreateManyProofInputEnvelope
    set?: Enumerable<VerificationWhereUniqueInput>
    disconnect?: Enumerable<VerificationWhereUniqueInput>
    delete?: Enumerable<VerificationWhereUniqueInput>
    connect?: Enumerable<VerificationWhereUniqueInput>
    update?: Enumerable<VerificationUpdateWithWhereUniqueWithoutProofInput>
    updateMany?: Enumerable<VerificationUpdateManyWithWhereWithoutProofInput>
    deleteMany?: Enumerable<VerificationScalarWhereInput>
  }

  export type VerificationUncheckedUpdateManyWithoutProofNestedInput = {
    create?: XOR<Enumerable<VerificationCreateWithoutProofInput>, Enumerable<VerificationUncheckedCreateWithoutProofInput>>
    connectOrCreate?: Enumerable<VerificationCreateOrConnectWithoutProofInput>
    upsert?: Enumerable<VerificationUpsertWithWhereUniqueWithoutProofInput>
    createMany?: VerificationCreateManyProofInputEnvelope
    set?: Enumerable<VerificationWhereUniqueInput>
    disconnect?: Enumerable<VerificationWhereUniqueInput>
    delete?: Enumerable<VerificationWhereUniqueInput>
    connect?: Enumerable<VerificationWhereUniqueInput>
    update?: Enumerable<VerificationUpdateWithWhereUniqueWithoutProofInput>
    updateMany?: Enumerable<VerificationUpdateManyWithWhereWithoutProofInput>
    deleteMany?: Enumerable<VerificationScalarWhereInput>
  }

  export type ProofCreateNestedOneWithoutVerificationsInput = {
    create?: XOR<ProofCreateWithoutVerificationsInput, ProofUncheckedCreateWithoutVerificationsInput>
    connectOrCreate?: ProofCreateOrConnectWithoutVerificationsInput
    connect?: ProofWhereUniqueInput
  }

  export type ProofUpdateOneRequiredWithoutVerificationsNestedInput = {
    create?: XOR<ProofCreateWithoutVerificationsInput, ProofUncheckedCreateWithoutVerificationsInput>
    connectOrCreate?: ProofCreateOrConnectWithoutVerificationsInput
    upsert?: ProofUpsertWithoutVerificationsInput
    connect?: ProofWhereUniqueInput
    update?: XOR<ProofUpdateWithoutVerificationsInput, ProofUncheckedUpdateWithoutVerificationsInput>
  }

  export type WalletCreateNestedOneWithoutBatchesInput = {
    create?: XOR<WalletCreateWithoutBatchesInput, WalletUncheckedCreateWithoutBatchesInput>
    connectOrCreate?: WalletCreateOrConnectWithoutBatchesInput
    connect?: WalletWhereUniqueInput
  }

  export type ProofCreateNestedManyWithoutBatchInput = {
    create?: XOR<Enumerable<ProofCreateWithoutBatchInput>, Enumerable<ProofUncheckedCreateWithoutBatchInput>>
    connectOrCreate?: Enumerable<ProofCreateOrConnectWithoutBatchInput>
    createMany?: ProofCreateManyBatchInputEnvelope
    connect?: Enumerable<ProofWhereUniqueInput>
  }

  export type ProofUncheckedCreateNestedManyWithoutBatchInput = {
    create?: XOR<Enumerable<ProofCreateWithoutBatchInput>, Enumerable<ProofUncheckedCreateWithoutBatchInput>>
    connectOrCreate?: Enumerable<ProofCreateOrConnectWithoutBatchInput>
    createMany?: ProofCreateManyBatchInputEnvelope
    connect?: Enumerable<ProofWhereUniqueInput>
  }

  export type EnumBatchStatusFieldUpdateOperationsInput = {
    set?: BatchStatus
  }

  export type WalletUpdateOneRequiredWithoutBatchesNestedInput = {
    create?: XOR<WalletCreateWithoutBatchesInput, WalletUncheckedCreateWithoutBatchesInput>
    connectOrCreate?: WalletCreateOrConnectWithoutBatchesInput
    upsert?: WalletUpsertWithoutBatchesInput
    connect?: WalletWhereUniqueInput
    update?: XOR<WalletUpdateWithoutBatchesInput, WalletUncheckedUpdateWithoutBatchesInput>
  }

  export type ProofUpdateManyWithoutBatchNestedInput = {
    create?: XOR<Enumerable<ProofCreateWithoutBatchInput>, Enumerable<ProofUncheckedCreateWithoutBatchInput>>
    connectOrCreate?: Enumerable<ProofCreateOrConnectWithoutBatchInput>
    upsert?: Enumerable<ProofUpsertWithWhereUniqueWithoutBatchInput>
    createMany?: ProofCreateManyBatchInputEnvelope
    set?: Enumerable<ProofWhereUniqueInput>
    disconnect?: Enumerable<ProofWhereUniqueInput>
    delete?: Enumerable<ProofWhereUniqueInput>
    connect?: Enumerable<ProofWhereUniqueInput>
    update?: Enumerable<ProofUpdateWithWhereUniqueWithoutBatchInput>
    updateMany?: Enumerable<ProofUpdateManyWithWhereWithoutBatchInput>
    deleteMany?: Enumerable<ProofScalarWhereInput>
  }

  export type ProofUncheckedUpdateManyWithoutBatchNestedInput = {
    create?: XOR<Enumerable<ProofCreateWithoutBatchInput>, Enumerable<ProofUncheckedCreateWithoutBatchInput>>
    connectOrCreate?: Enumerable<ProofCreateOrConnectWithoutBatchInput>
    upsert?: Enumerable<ProofUpsertWithWhereUniqueWithoutBatchInput>
    createMany?: ProofCreateManyBatchInputEnvelope
    set?: Enumerable<ProofWhereUniqueInput>
    disconnect?: Enumerable<ProofWhereUniqueInput>
    delete?: Enumerable<ProofWhereUniqueInput>
    connect?: Enumerable<ProofWhereUniqueInput>
    update?: Enumerable<ProofUpdateWithWhereUniqueWithoutBatchInput>
    updateMany?: Enumerable<ProofUpdateManyWithWhereWithoutBatchInput>
    deleteMany?: Enumerable<ProofScalarWhereInput>
  }

  export type OrganizationUserCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<Enumerable<OrganizationUserCreateWithoutOrganizationInput>, Enumerable<OrganizationUserUncheckedCreateWithoutOrganizationInput>>
    connectOrCreate?: Enumerable<OrganizationUserCreateOrConnectWithoutOrganizationInput>
    createMany?: OrganizationUserCreateManyOrganizationInputEnvelope
    connect?: Enumerable<OrganizationUserWhereUniqueInput>
  }

  export type ProofTemplateCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<Enumerable<ProofTemplateCreateWithoutOrganizationInput>, Enumerable<ProofTemplateUncheckedCreateWithoutOrganizationInput>>
    connectOrCreate?: Enumerable<ProofTemplateCreateOrConnectWithoutOrganizationInput>
    createMany?: ProofTemplateCreateManyOrganizationInputEnvelope
    connect?: Enumerable<ProofTemplateWhereUniqueInput>
  }

  export type OrganizationUserUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<Enumerable<OrganizationUserCreateWithoutOrganizationInput>, Enumerable<OrganizationUserUncheckedCreateWithoutOrganizationInput>>
    connectOrCreate?: Enumerable<OrganizationUserCreateOrConnectWithoutOrganizationInput>
    createMany?: OrganizationUserCreateManyOrganizationInputEnvelope
    connect?: Enumerable<OrganizationUserWhereUniqueInput>
  }

  export type ProofTemplateUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<Enumerable<ProofTemplateCreateWithoutOrganizationInput>, Enumerable<ProofTemplateUncheckedCreateWithoutOrganizationInput>>
    connectOrCreate?: Enumerable<ProofTemplateCreateOrConnectWithoutOrganizationInput>
    createMany?: ProofTemplateCreateManyOrganizationInputEnvelope
    connect?: Enumerable<ProofTemplateWhereUniqueInput>
  }

  export type OrganizationUserUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<Enumerable<OrganizationUserCreateWithoutOrganizationInput>, Enumerable<OrganizationUserUncheckedCreateWithoutOrganizationInput>>
    connectOrCreate?: Enumerable<OrganizationUserCreateOrConnectWithoutOrganizationInput>
    upsert?: Enumerable<OrganizationUserUpsertWithWhereUniqueWithoutOrganizationInput>
    createMany?: OrganizationUserCreateManyOrganizationInputEnvelope
    set?: Enumerable<OrganizationUserWhereUniqueInput>
    disconnect?: Enumerable<OrganizationUserWhereUniqueInput>
    delete?: Enumerable<OrganizationUserWhereUniqueInput>
    connect?: Enumerable<OrganizationUserWhereUniqueInput>
    update?: Enumerable<OrganizationUserUpdateWithWhereUniqueWithoutOrganizationInput>
    updateMany?: Enumerable<OrganizationUserUpdateManyWithWhereWithoutOrganizationInput>
    deleteMany?: Enumerable<OrganizationUserScalarWhereInput>
  }

  export type ProofTemplateUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<Enumerable<ProofTemplateCreateWithoutOrganizationInput>, Enumerable<ProofTemplateUncheckedCreateWithoutOrganizationInput>>
    connectOrCreate?: Enumerable<ProofTemplateCreateOrConnectWithoutOrganizationInput>
    upsert?: Enumerable<ProofTemplateUpsertWithWhereUniqueWithoutOrganizationInput>
    createMany?: ProofTemplateCreateManyOrganizationInputEnvelope
    set?: Enumerable<ProofTemplateWhereUniqueInput>
    disconnect?: Enumerable<ProofTemplateWhereUniqueInput>
    delete?: Enumerable<ProofTemplateWhereUniqueInput>
    connect?: Enumerable<ProofTemplateWhereUniqueInput>
    update?: Enumerable<ProofTemplateUpdateWithWhereUniqueWithoutOrganizationInput>
    updateMany?: Enumerable<ProofTemplateUpdateManyWithWhereWithoutOrganizationInput>
    deleteMany?: Enumerable<ProofTemplateScalarWhereInput>
  }

  export type OrganizationUserUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<Enumerable<OrganizationUserCreateWithoutOrganizationInput>, Enumerable<OrganizationUserUncheckedCreateWithoutOrganizationInput>>
    connectOrCreate?: Enumerable<OrganizationUserCreateOrConnectWithoutOrganizationInput>
    upsert?: Enumerable<OrganizationUserUpsertWithWhereUniqueWithoutOrganizationInput>
    createMany?: OrganizationUserCreateManyOrganizationInputEnvelope
    set?: Enumerable<OrganizationUserWhereUniqueInput>
    disconnect?: Enumerable<OrganizationUserWhereUniqueInput>
    delete?: Enumerable<OrganizationUserWhereUniqueInput>
    connect?: Enumerable<OrganizationUserWhereUniqueInput>
    update?: Enumerable<OrganizationUserUpdateWithWhereUniqueWithoutOrganizationInput>
    updateMany?: Enumerable<OrganizationUserUpdateManyWithWhereWithoutOrganizationInput>
    deleteMany?: Enumerable<OrganizationUserScalarWhereInput>
  }

  export type ProofTemplateUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<Enumerable<ProofTemplateCreateWithoutOrganizationInput>, Enumerable<ProofTemplateUncheckedCreateWithoutOrganizationInput>>
    connectOrCreate?: Enumerable<ProofTemplateCreateOrConnectWithoutOrganizationInput>
    upsert?: Enumerable<ProofTemplateUpsertWithWhereUniqueWithoutOrganizationInput>
    createMany?: ProofTemplateCreateManyOrganizationInputEnvelope
    set?: Enumerable<ProofTemplateWhereUniqueInput>
    disconnect?: Enumerable<ProofTemplateWhereUniqueInput>
    delete?: Enumerable<ProofTemplateWhereUniqueInput>
    connect?: Enumerable<ProofTemplateWhereUniqueInput>
    update?: Enumerable<ProofTemplateUpdateWithWhereUniqueWithoutOrganizationInput>
    updateMany?: Enumerable<ProofTemplateUpdateManyWithWhereWithoutOrganizationInput>
    deleteMany?: Enumerable<ProofTemplateScalarWhereInput>
  }

  export type UserCreateNestedOneWithoutOrganizationUsersInput = {
    create?: XOR<UserCreateWithoutOrganizationUsersInput, UserUncheckedCreateWithoutOrganizationUsersInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrganizationUsersInput
    connect?: UserWhereUniqueInput
  }

  export type OrganizationCreateNestedOneWithoutMembersInput = {
    create?: XOR<OrganizationCreateWithoutMembersInput, OrganizationUncheckedCreateWithoutMembersInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutMembersInput
    connect?: OrganizationWhereUniqueInput
  }

  export type EnumOrgRoleFieldUpdateOperationsInput = {
    set?: OrgRole
  }

  export type UserUpdateOneRequiredWithoutOrganizationUsersNestedInput = {
    create?: XOR<UserCreateWithoutOrganizationUsersInput, UserUncheckedCreateWithoutOrganizationUsersInput>
    connectOrCreate?: UserCreateOrConnectWithoutOrganizationUsersInput
    upsert?: UserUpsertWithoutOrganizationUsersInput
    connect?: UserWhereUniqueInput
    update?: XOR<UserUpdateWithoutOrganizationUsersInput, UserUncheckedUpdateWithoutOrganizationUsersInput>
  }

  export type OrganizationUpdateOneRequiredWithoutMembersNestedInput = {
    create?: XOR<OrganizationCreateWithoutMembersInput, OrganizationUncheckedCreateWithoutMembersInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutMembersInput
    upsert?: OrganizationUpsertWithoutMembersInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<OrganizationUpdateWithoutMembersInput, OrganizationUncheckedUpdateWithoutMembersInput>
  }

  export type OrganizationCreateNestedOneWithoutTemplatesInput = {
    create?: XOR<OrganizationCreateWithoutTemplatesInput, OrganizationUncheckedCreateWithoutTemplatesInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutTemplatesInput
    connect?: OrganizationWhereUniqueInput
  }

  export type OrganizationUpdateOneRequiredWithoutTemplatesNestedInput = {
    create?: XOR<OrganizationCreateWithoutTemplatesInput, OrganizationUncheckedCreateWithoutTemplatesInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutTemplatesInput
    upsert?: OrganizationUpsertWithoutTemplatesInput
    connect?: OrganizationWhereUniqueInput
    update?: XOR<OrganizationUpdateWithoutTemplatesInput, OrganizationUncheckedUpdateWithoutTemplatesInput>
  }

  export type NestedUuidFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    not?: NestedUuidFilter | string
  }

  export type NestedStringFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringFilter | string
  }

  export type NestedDateTimeFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeFilter | Date | string
  }

  export type NestedDateTimeNullableFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableFilter | Date | string | null
  }

  export type NestedBoolFilter = {
    equals?: boolean
    not?: NestedBoolFilter | boolean
  }

  export type NestedUuidWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    not?: NestedUuidWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedIntFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntFilter | number
  }

  export type NestedStringWithAggregatesFilter = {
    equals?: string
    in?: Enumerable<string> | string
    notIn?: Enumerable<string> | string
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringWithAggregatesFilter | string
    _count?: NestedIntFilter
    _min?: NestedStringFilter
    _max?: NestedStringFilter
  }

  export type NestedDateTimeWithAggregatesFilter = {
    equals?: Date | string
    in?: Enumerable<Date> | Enumerable<string> | Date | string
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeWithAggregatesFilter | Date | string
    _count?: NestedIntFilter
    _min?: NestedDateTimeFilter
    _max?: NestedDateTimeFilter
  }

  export type NestedDateTimeNullableWithAggregatesFilter = {
    equals?: Date | string | null
    in?: Enumerable<Date> | Enumerable<string> | Date | string | null
    notIn?: Enumerable<Date> | Enumerable<string> | Date | string | null
    lt?: Date | string
    lte?: Date | string
    gt?: Date | string
    gte?: Date | string
    not?: NestedDateTimeNullableWithAggregatesFilter | Date | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedDateTimeNullableFilter
    _max?: NestedDateTimeNullableFilter
  }

  export type NestedIntNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableFilter | number | null
  }

  export type NestedBoolWithAggregatesFilter = {
    equals?: boolean
    not?: NestedBoolWithAggregatesFilter | boolean
    _count?: NestedIntFilter
    _min?: NestedBoolFilter
    _max?: NestedBoolFilter
  }
  export type NestedJsonFilter = 
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase>, Exclude<keyof Required<NestedJsonFilterBase>, 'path'>>,
        Required<NestedJsonFilterBase>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase>, 'path'>>

  export type NestedJsonFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: string[]
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
  }

  export type NestedEnumWalletTypeFilter = {
    equals?: WalletType
    in?: Enumerable<WalletType>
    notIn?: Enumerable<WalletType>
    not?: NestedEnumWalletTypeFilter | WalletType
  }

  export type NestedStringNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableFilter | string | null
  }

  export type NestedIntWithAggregatesFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntWithAggregatesFilter | number
    _count?: NestedIntFilter
    _avg?: NestedFloatFilter
    _sum?: NestedIntFilter
    _min?: NestedIntFilter
    _max?: NestedIntFilter
  }

  export type NestedFloatFilter = {
    equals?: number
    in?: Enumerable<number> | number
    notIn?: Enumerable<number> | number
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatFilter | number
  }

  export type NestedEnumWalletTypeWithAggregatesFilter = {
    equals?: WalletType
    in?: Enumerable<WalletType>
    notIn?: Enumerable<WalletType>
    not?: NestedEnumWalletTypeWithAggregatesFilter | WalletType
    _count?: NestedIntFilter
    _min?: NestedEnumWalletTypeFilter
    _max?: NestedEnumWalletTypeFilter
  }

  export type NestedStringNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    contains?: string
    startsWith?: string
    endsWith?: string
    not?: NestedStringNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedIntNullableWithAggregatesFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedIntNullableWithAggregatesFilter | number | null
    _count?: NestedIntNullableFilter
    _avg?: NestedFloatNullableFilter
    _sum?: NestedIntNullableFilter
    _min?: NestedIntNullableFilter
    _max?: NestedIntNullableFilter
  }

  export type NestedFloatNullableFilter = {
    equals?: number | null
    in?: Enumerable<number> | number | null
    notIn?: Enumerable<number> | number | null
    lt?: number
    lte?: number
    gt?: number
    gte?: number
    not?: NestedFloatNullableFilter | number | null
  }

  export type NestedEnumProofTypeFilter = {
    equals?: ProofType
    in?: Enumerable<ProofType>
    notIn?: Enumerable<ProofType>
    not?: NestedEnumProofTypeFilter | ProofType
  }

  export type NestedUuidNullableFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    not?: NestedUuidNullableFilter | string | null
  }

  export type NestedEnumProofStatusFilter = {
    equals?: ProofStatus
    in?: Enumerable<ProofStatus>
    notIn?: Enumerable<ProofStatus>
    not?: NestedEnumProofStatusFilter | ProofStatus
  }

  export type NestedEnumProofTypeWithAggregatesFilter = {
    equals?: ProofType
    in?: Enumerable<ProofType>
    notIn?: Enumerable<ProofType>
    not?: NestedEnumProofTypeWithAggregatesFilter | ProofType
    _count?: NestedIntFilter
    _min?: NestedEnumProofTypeFilter
    _max?: NestedEnumProofTypeFilter
  }
  export type NestedJsonNullableFilter = 
    | PatchUndefined<
        Either<Required<NestedJsonNullableFilterBase>, Exclude<keyof Required<NestedJsonNullableFilterBase>, 'path'>>,
        Required<NestedJsonNullableFilterBase>
      >
    | OptionalFlat<Omit<Required<NestedJsonNullableFilterBase>, 'path'>>

  export type NestedJsonNullableFilterBase = {
    equals?: InputJsonValue | JsonNullValueFilter
    path?: string[]
    string_contains?: string
    string_starts_with?: string
    string_ends_with?: string
    array_contains?: InputJsonValue | null
    array_starts_with?: InputJsonValue | null
    array_ends_with?: InputJsonValue | null
    lt?: InputJsonValue
    lte?: InputJsonValue
    gt?: InputJsonValue
    gte?: InputJsonValue
    not?: InputJsonValue | JsonNullValueFilter
  }

  export type NestedUuidNullableWithAggregatesFilter = {
    equals?: string | null
    in?: Enumerable<string> | string | null
    notIn?: Enumerable<string> | string | null
    lt?: string
    lte?: string
    gt?: string
    gte?: string
    not?: NestedUuidNullableWithAggregatesFilter | string | null
    _count?: NestedIntNullableFilter
    _min?: NestedStringNullableFilter
    _max?: NestedStringNullableFilter
  }

  export type NestedEnumProofStatusWithAggregatesFilter = {
    equals?: ProofStatus
    in?: Enumerable<ProofStatus>
    notIn?: Enumerable<ProofStatus>
    not?: NestedEnumProofStatusWithAggregatesFilter | ProofStatus
    _count?: NestedIntFilter
    _min?: NestedEnumProofStatusFilter
    _max?: NestedEnumProofStatusFilter
  }

  export type NestedEnumBatchStatusFilter = {
    equals?: BatchStatus
    in?: Enumerable<BatchStatus>
    notIn?: Enumerable<BatchStatus>
    not?: NestedEnumBatchStatusFilter | BatchStatus
  }

  export type NestedEnumBatchStatusWithAggregatesFilter = {
    equals?: BatchStatus
    in?: Enumerable<BatchStatus>
    notIn?: Enumerable<BatchStatus>
    not?: NestedEnumBatchStatusWithAggregatesFilter | BatchStatus
    _count?: NestedIntFilter
    _min?: NestedEnumBatchStatusFilter
    _max?: NestedEnumBatchStatusFilter
  }

  export type NestedEnumOrgRoleFilter = {
    equals?: OrgRole
    in?: Enumerable<OrgRole>
    notIn?: Enumerable<OrgRole>
    not?: NestedEnumOrgRoleFilter | OrgRole
  }

  export type NestedEnumOrgRoleWithAggregatesFilter = {
    equals?: OrgRole
    in?: Enumerable<OrgRole>
    notIn?: Enumerable<OrgRole>
    not?: NestedEnumOrgRoleWithAggregatesFilter | OrgRole
    _count?: NestedIntFilter
    _min?: NestedEnumOrgRoleFilter
    _max?: NestedEnumOrgRoleFilter
  }

  export type WalletCreateWithoutUserInput = {
    id?: string
    address: string
    chainId: number
    type: WalletType
    encryptedPrivateKey?: string | null
    keyId?: string | null
    createdAt?: Date | string
    lastUsedAt?: Date | string
    isArchived?: boolean
    balance?: string | null
    nonce?: number | null
    proofs?: ProofCreateNestedManyWithoutTempWalletInput
    batches?: BatchCreateNestedManyWithoutTempWalletInput
  }

  export type WalletUncheckedCreateWithoutUserInput = {
    id?: string
    address: string
    chainId: number
    type: WalletType
    encryptedPrivateKey?: string | null
    keyId?: string | null
    createdAt?: Date | string
    lastUsedAt?: Date | string
    isArchived?: boolean
    balance?: string | null
    nonce?: number | null
    proofs?: ProofUncheckedCreateNestedManyWithoutTempWalletInput
    batches?: BatchUncheckedCreateNestedManyWithoutTempWalletInput
  }

  export type WalletCreateOrConnectWithoutUserInput = {
    where: WalletWhereUniqueInput
    create: XOR<WalletCreateWithoutUserInput, WalletUncheckedCreateWithoutUserInput>
  }

  export type WalletCreateManyUserInputEnvelope = {
    data: Enumerable<WalletCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type ProofCreateWithoutUserInput = {
    id?: string
    referenceId: string
    createdAt?: Date | string
    expiresAt: Date | string
    proofType: ProofType
    isRevoked?: boolean
    revokedAt?: Date | string | null
    revocationReason?: string | null
    encryptedData: string
    encryptionKeyId: string
    transactionHash?: string | null
    merkleRoot?: string | null
    merklePath?: NullableJsonNullValueInput | InputJsonValue
    warningFlags?: ProofCreatewarningFlagsInput | Enumerable<string>
    originalWallets?: ProofCreateoriginalWalletsInput | Enumerable<string>
    status: ProofStatus
    tempWallet: WalletCreateNestedOneWithoutProofsInput
    batch?: BatchCreateNestedOneWithoutProofsInput
    verifications?: VerificationCreateNestedManyWithoutProofInput
  }

  export type ProofUncheckedCreateWithoutUserInput = {
    id?: string
    referenceId: string
    createdAt?: Date | string
    expiresAt: Date | string
    proofType: ProofType
    isRevoked?: boolean
    revokedAt?: Date | string | null
    revocationReason?: string | null
    encryptedData: string
    encryptionKeyId: string
    tempWalletId: string
    transactionHash?: string | null
    merkleRoot?: string | null
    merklePath?: NullableJsonNullValueInput | InputJsonValue
    batchId?: string | null
    warningFlags?: ProofCreatewarningFlagsInput | Enumerable<string>
    originalWallets?: ProofCreateoriginalWalletsInput | Enumerable<string>
    status: ProofStatus
    verifications?: VerificationUncheckedCreateNestedManyWithoutProofInput
  }

  export type ProofCreateOrConnectWithoutUserInput = {
    where: ProofWhereUniqueInput
    create: XOR<ProofCreateWithoutUserInput, ProofUncheckedCreateWithoutUserInput>
  }

  export type ProofCreateManyUserInputEnvelope = {
    data: Enumerable<ProofCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type OrganizationUserCreateWithoutUserInput = {
    id?: string
    role?: OrgRole
    joinedAt?: Date | string
    organization: OrganizationCreateNestedOneWithoutMembersInput
  }

  export type OrganizationUserUncheckedCreateWithoutUserInput = {
    id?: string
    organizationId: string
    role?: OrgRole
    joinedAt?: Date | string
  }

  export type OrganizationUserCreateOrConnectWithoutUserInput = {
    where: OrganizationUserWhereUniqueInput
    create: XOR<OrganizationUserCreateWithoutUserInput, OrganizationUserUncheckedCreateWithoutUserInput>
  }

  export type OrganizationUserCreateManyUserInputEnvelope = {
    data: Enumerable<OrganizationUserCreateManyUserInput>
    skipDuplicates?: boolean
  }

  export type WalletUpsertWithWhereUniqueWithoutUserInput = {
    where: WalletWhereUniqueInput
    update: XOR<WalletUpdateWithoutUserInput, WalletUncheckedUpdateWithoutUserInput>
    create: XOR<WalletCreateWithoutUserInput, WalletUncheckedCreateWithoutUserInput>
  }

  export type WalletUpdateWithWhereUniqueWithoutUserInput = {
    where: WalletWhereUniqueInput
    data: XOR<WalletUpdateWithoutUserInput, WalletUncheckedUpdateWithoutUserInput>
  }

  export type WalletUpdateManyWithWhereWithoutUserInput = {
    where: WalletScalarWhereInput
    data: XOR<WalletUpdateManyMutationInput, WalletUncheckedUpdateManyWithoutWalletsInput>
  }

  export type WalletScalarWhereInput = {
    AND?: Enumerable<WalletScalarWhereInput>
    OR?: Enumerable<WalletScalarWhereInput>
    NOT?: Enumerable<WalletScalarWhereInput>
    id?: UuidFilter | string
    userId?: UuidFilter | string
    address?: StringFilter | string
    chainId?: IntFilter | number
    type?: EnumWalletTypeFilter | WalletType
    encryptedPrivateKey?: StringNullableFilter | string | null
    keyId?: StringNullableFilter | string | null
    createdAt?: DateTimeFilter | Date | string
    lastUsedAt?: DateTimeFilter | Date | string
    isArchived?: BoolFilter | boolean
    balance?: StringNullableFilter | string | null
    nonce?: IntNullableFilter | number | null
  }

  export type ProofUpsertWithWhereUniqueWithoutUserInput = {
    where: ProofWhereUniqueInput
    update: XOR<ProofUpdateWithoutUserInput, ProofUncheckedUpdateWithoutUserInput>
    create: XOR<ProofCreateWithoutUserInput, ProofUncheckedCreateWithoutUserInput>
  }

  export type ProofUpdateWithWhereUniqueWithoutUserInput = {
    where: ProofWhereUniqueInput
    data: XOR<ProofUpdateWithoutUserInput, ProofUncheckedUpdateWithoutUserInput>
  }

  export type ProofUpdateManyWithWhereWithoutUserInput = {
    where: ProofScalarWhereInput
    data: XOR<ProofUpdateManyMutationInput, ProofUncheckedUpdateManyWithoutProofsInput>
  }

  export type ProofScalarWhereInput = {
    AND?: Enumerable<ProofScalarWhereInput>
    OR?: Enumerable<ProofScalarWhereInput>
    NOT?: Enumerable<ProofScalarWhereInput>
    id?: UuidFilter | string
    userId?: UuidFilter | string
    referenceId?: StringFilter | string
    createdAt?: DateTimeFilter | Date | string
    expiresAt?: DateTimeFilter | Date | string
    proofType?: EnumProofTypeFilter | ProofType
    isRevoked?: BoolFilter | boolean
    revokedAt?: DateTimeNullableFilter | Date | string | null
    revocationReason?: StringNullableFilter | string | null
    encryptedData?: StringFilter | string
    encryptionKeyId?: StringFilter | string
    tempWalletId?: UuidFilter | string
    transactionHash?: StringNullableFilter | string | null
    merkleRoot?: StringNullableFilter | string | null
    merklePath?: JsonNullableFilter
    batchId?: UuidNullableFilter | string | null
    warningFlags?: StringNullableListFilter
    originalWallets?: StringNullableListFilter
    status?: EnumProofStatusFilter | ProofStatus
  }

  export type OrganizationUserUpsertWithWhereUniqueWithoutUserInput = {
    where: OrganizationUserWhereUniqueInput
    update: XOR<OrganizationUserUpdateWithoutUserInput, OrganizationUserUncheckedUpdateWithoutUserInput>
    create: XOR<OrganizationUserCreateWithoutUserInput, OrganizationUserUncheckedCreateWithoutUserInput>
  }

  export type OrganizationUserUpdateWithWhereUniqueWithoutUserInput = {
    where: OrganizationUserWhereUniqueInput
    data: XOR<OrganizationUserUpdateWithoutUserInput, OrganizationUserUncheckedUpdateWithoutUserInput>
  }

  export type OrganizationUserUpdateManyWithWhereWithoutUserInput = {
    where: OrganizationUserScalarWhereInput
    data: XOR<OrganizationUserUpdateManyMutationInput, OrganizationUserUncheckedUpdateManyWithoutOrganizationUsersInput>
  }

  export type OrganizationUserScalarWhereInput = {
    AND?: Enumerable<OrganizationUserScalarWhereInput>
    OR?: Enumerable<OrganizationUserScalarWhereInput>
    NOT?: Enumerable<OrganizationUserScalarWhereInput>
    id?: UuidFilter | string
    userId?: UuidFilter | string
    organizationId?: UuidFilter | string
    role?: EnumOrgRoleFilter | OrgRole
    joinedAt?: DateTimeFilter | Date | string
  }

  export type UserCreateWithoutWalletsInput = {
    id?: string
    address: string
    createdAt?: Date | string
    lastLoginAt?: Date | string | null
    isActive?: boolean
    permissions?: UserCreatepermissionsInput | Enumerable<string>
    settings?: JsonNullValueInput | InputJsonValue
    proofs?: ProofCreateNestedManyWithoutUserInput
    organizationUsers?: OrganizationUserCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutWalletsInput = {
    id?: string
    address: string
    createdAt?: Date | string
    lastLoginAt?: Date | string | null
    isActive?: boolean
    permissions?: UserCreatepermissionsInput | Enumerable<string>
    settings?: JsonNullValueInput | InputJsonValue
    proofs?: ProofUncheckedCreateNestedManyWithoutUserInput
    organizationUsers?: OrganizationUserUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutWalletsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutWalletsInput, UserUncheckedCreateWithoutWalletsInput>
  }

  export type ProofCreateWithoutTempWalletInput = {
    id?: string
    referenceId: string
    createdAt?: Date | string
    expiresAt: Date | string
    proofType: ProofType
    isRevoked?: boolean
    revokedAt?: Date | string | null
    revocationReason?: string | null
    encryptedData: string
    encryptionKeyId: string
    transactionHash?: string | null
    merkleRoot?: string | null
    merklePath?: NullableJsonNullValueInput | InputJsonValue
    warningFlags?: ProofCreatewarningFlagsInput | Enumerable<string>
    originalWallets?: ProofCreateoriginalWalletsInput | Enumerable<string>
    status: ProofStatus
    user: UserCreateNestedOneWithoutProofsInput
    batch?: BatchCreateNestedOneWithoutProofsInput
    verifications?: VerificationCreateNestedManyWithoutProofInput
  }

  export type ProofUncheckedCreateWithoutTempWalletInput = {
    id?: string
    userId: string
    referenceId: string
    createdAt?: Date | string
    expiresAt: Date | string
    proofType: ProofType
    isRevoked?: boolean
    revokedAt?: Date | string | null
    revocationReason?: string | null
    encryptedData: string
    encryptionKeyId: string
    transactionHash?: string | null
    merkleRoot?: string | null
    merklePath?: NullableJsonNullValueInput | InputJsonValue
    batchId?: string | null
    warningFlags?: ProofCreatewarningFlagsInput | Enumerable<string>
    originalWallets?: ProofCreateoriginalWalletsInput | Enumerable<string>
    status: ProofStatus
    verifications?: VerificationUncheckedCreateNestedManyWithoutProofInput
  }

  export type ProofCreateOrConnectWithoutTempWalletInput = {
    where: ProofWhereUniqueInput
    create: XOR<ProofCreateWithoutTempWalletInput, ProofUncheckedCreateWithoutTempWalletInput>
  }

  export type ProofCreateManyTempWalletInputEnvelope = {
    data: Enumerable<ProofCreateManyTempWalletInput>
    skipDuplicates?: boolean
  }

  export type BatchCreateWithoutTempWalletInput = {
    id?: string
    createdAt?: Date | string
    processedAt?: Date | string | null
    status: BatchStatus
    merkleRoot: string
    transactionHash?: string | null
    gasUsed?: string | null
    gasPrice?: string | null
    totalCost?: string | null
    retryCount?: number
    maxRetries?: number
    proofs?: ProofCreateNestedManyWithoutBatchInput
  }

  export type BatchUncheckedCreateWithoutTempWalletInput = {
    id?: string
    createdAt?: Date | string
    processedAt?: Date | string | null
    status: BatchStatus
    merkleRoot: string
    transactionHash?: string | null
    gasUsed?: string | null
    gasPrice?: string | null
    totalCost?: string | null
    retryCount?: number
    maxRetries?: number
    proofs?: ProofUncheckedCreateNestedManyWithoutBatchInput
  }

  export type BatchCreateOrConnectWithoutTempWalletInput = {
    where: BatchWhereUniqueInput
    create: XOR<BatchCreateWithoutTempWalletInput, BatchUncheckedCreateWithoutTempWalletInput>
  }

  export type BatchCreateManyTempWalletInputEnvelope = {
    data: Enumerable<BatchCreateManyTempWalletInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutWalletsInput = {
    update: XOR<UserUpdateWithoutWalletsInput, UserUncheckedUpdateWithoutWalletsInput>
    create: XOR<UserCreateWithoutWalletsInput, UserUncheckedCreateWithoutWalletsInput>
  }

  export type UserUpdateWithoutWalletsInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    permissions?: UserUpdatepermissionsInput | Enumerable<string>
    settings?: JsonNullValueInput | InputJsonValue
    proofs?: ProofUpdateManyWithoutUserNestedInput
    organizationUsers?: OrganizationUserUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutWalletsInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    permissions?: UserUpdatepermissionsInput | Enumerable<string>
    settings?: JsonNullValueInput | InputJsonValue
    proofs?: ProofUncheckedUpdateManyWithoutUserNestedInput
    organizationUsers?: OrganizationUserUncheckedUpdateManyWithoutUserNestedInput
  }

  export type ProofUpsertWithWhereUniqueWithoutTempWalletInput = {
    where: ProofWhereUniqueInput
    update: XOR<ProofUpdateWithoutTempWalletInput, ProofUncheckedUpdateWithoutTempWalletInput>
    create: XOR<ProofCreateWithoutTempWalletInput, ProofUncheckedCreateWithoutTempWalletInput>
  }

  export type ProofUpdateWithWhereUniqueWithoutTempWalletInput = {
    where: ProofWhereUniqueInput
    data: XOR<ProofUpdateWithoutTempWalletInput, ProofUncheckedUpdateWithoutTempWalletInput>
  }

  export type ProofUpdateManyWithWhereWithoutTempWalletInput = {
    where: ProofScalarWhereInput
    data: XOR<ProofUpdateManyMutationInput, ProofUncheckedUpdateManyWithoutProofsInput>
  }

  export type BatchUpsertWithWhereUniqueWithoutTempWalletInput = {
    where: BatchWhereUniqueInput
    update: XOR<BatchUpdateWithoutTempWalletInput, BatchUncheckedUpdateWithoutTempWalletInput>
    create: XOR<BatchCreateWithoutTempWalletInput, BatchUncheckedCreateWithoutTempWalletInput>
  }

  export type BatchUpdateWithWhereUniqueWithoutTempWalletInput = {
    where: BatchWhereUniqueInput
    data: XOR<BatchUpdateWithoutTempWalletInput, BatchUncheckedUpdateWithoutTempWalletInput>
  }

  export type BatchUpdateManyWithWhereWithoutTempWalletInput = {
    where: BatchScalarWhereInput
    data: XOR<BatchUpdateManyMutationInput, BatchUncheckedUpdateManyWithoutBatchesInput>
  }

  export type BatchScalarWhereInput = {
    AND?: Enumerable<BatchScalarWhereInput>
    OR?: Enumerable<BatchScalarWhereInput>
    NOT?: Enumerable<BatchScalarWhereInput>
    id?: UuidFilter | string
    createdAt?: DateTimeFilter | Date | string
    processedAt?: DateTimeNullableFilter | Date | string | null
    status?: EnumBatchStatusFilter | BatchStatus
    merkleRoot?: StringFilter | string
    transactionHash?: StringNullableFilter | string | null
    tempWalletId?: UuidFilter | string
    gasUsed?: StringNullableFilter | string | null
    gasPrice?: StringNullableFilter | string | null
    totalCost?: StringNullableFilter | string | null
    retryCount?: IntFilter | number
    maxRetries?: IntFilter | number
  }

  export type UserCreateWithoutProofsInput = {
    id?: string
    address: string
    createdAt?: Date | string
    lastLoginAt?: Date | string | null
    isActive?: boolean
    permissions?: UserCreatepermissionsInput | Enumerable<string>
    settings?: JsonNullValueInput | InputJsonValue
    wallets?: WalletCreateNestedManyWithoutUserInput
    organizationUsers?: OrganizationUserCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProofsInput = {
    id?: string
    address: string
    createdAt?: Date | string
    lastLoginAt?: Date | string | null
    isActive?: boolean
    permissions?: UserCreatepermissionsInput | Enumerable<string>
    settings?: JsonNullValueInput | InputJsonValue
    wallets?: WalletUncheckedCreateNestedManyWithoutUserInput
    organizationUsers?: OrganizationUserUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProofsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProofsInput, UserUncheckedCreateWithoutProofsInput>
  }

  export type WalletCreateWithoutProofsInput = {
    id?: string
    address: string
    chainId: number
    type: WalletType
    encryptedPrivateKey?: string | null
    keyId?: string | null
    createdAt?: Date | string
    lastUsedAt?: Date | string
    isArchived?: boolean
    balance?: string | null
    nonce?: number | null
    user: UserCreateNestedOneWithoutWalletsInput
    batches?: BatchCreateNestedManyWithoutTempWalletInput
  }

  export type WalletUncheckedCreateWithoutProofsInput = {
    id?: string
    userId: string
    address: string
    chainId: number
    type: WalletType
    encryptedPrivateKey?: string | null
    keyId?: string | null
    createdAt?: Date | string
    lastUsedAt?: Date | string
    isArchived?: boolean
    balance?: string | null
    nonce?: number | null
    batches?: BatchUncheckedCreateNestedManyWithoutTempWalletInput
  }

  export type WalletCreateOrConnectWithoutProofsInput = {
    where: WalletWhereUniqueInput
    create: XOR<WalletCreateWithoutProofsInput, WalletUncheckedCreateWithoutProofsInput>
  }

  export type BatchCreateWithoutProofsInput = {
    id?: string
    createdAt?: Date | string
    processedAt?: Date | string | null
    status: BatchStatus
    merkleRoot: string
    transactionHash?: string | null
    gasUsed?: string | null
    gasPrice?: string | null
    totalCost?: string | null
    retryCount?: number
    maxRetries?: number
    tempWallet: WalletCreateNestedOneWithoutBatchesInput
  }

  export type BatchUncheckedCreateWithoutProofsInput = {
    id?: string
    createdAt?: Date | string
    processedAt?: Date | string | null
    status: BatchStatus
    merkleRoot: string
    transactionHash?: string | null
    tempWalletId: string
    gasUsed?: string | null
    gasPrice?: string | null
    totalCost?: string | null
    retryCount?: number
    maxRetries?: number
  }

  export type BatchCreateOrConnectWithoutProofsInput = {
    where: BatchWhereUniqueInput
    create: XOR<BatchCreateWithoutProofsInput, BatchUncheckedCreateWithoutProofsInput>
  }

  export type VerificationCreateWithoutProofInput = {
    id?: string
    referenceId: string
    verifierAddress?: string | null
    verifiedAt?: Date | string
    isSuccessful: boolean
    failureReason?: string | null
    verificationResult: JsonNullValueInput | InputJsonValue
  }

  export type VerificationUncheckedCreateWithoutProofInput = {
    id?: string
    referenceId: string
    verifierAddress?: string | null
    verifiedAt?: Date | string
    isSuccessful: boolean
    failureReason?: string | null
    verificationResult: JsonNullValueInput | InputJsonValue
  }

  export type VerificationCreateOrConnectWithoutProofInput = {
    where: VerificationWhereUniqueInput
    create: XOR<VerificationCreateWithoutProofInput, VerificationUncheckedCreateWithoutProofInput>
  }

  export type VerificationCreateManyProofInputEnvelope = {
    data: Enumerable<VerificationCreateManyProofInput>
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutProofsInput = {
    update: XOR<UserUpdateWithoutProofsInput, UserUncheckedUpdateWithoutProofsInput>
    create: XOR<UserCreateWithoutProofsInput, UserUncheckedCreateWithoutProofsInput>
  }

  export type UserUpdateWithoutProofsInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    permissions?: UserUpdatepermissionsInput | Enumerable<string>
    settings?: JsonNullValueInput | InputJsonValue
    wallets?: WalletUpdateManyWithoutUserNestedInput
    organizationUsers?: OrganizationUserUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutProofsInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    permissions?: UserUpdatepermissionsInput | Enumerable<string>
    settings?: JsonNullValueInput | InputJsonValue
    wallets?: WalletUncheckedUpdateManyWithoutUserNestedInput
    organizationUsers?: OrganizationUserUncheckedUpdateManyWithoutUserNestedInput
  }

  export type WalletUpsertWithoutProofsInput = {
    update: XOR<WalletUpdateWithoutProofsInput, WalletUncheckedUpdateWithoutProofsInput>
    create: XOR<WalletCreateWithoutProofsInput, WalletUncheckedCreateWithoutProofsInput>
  }

  export type WalletUpdateWithoutProofsInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    chainId?: IntFieldUpdateOperationsInput | number
    type?: EnumWalletTypeFieldUpdateOperationsInput | WalletType
    encryptedPrivateKey?: NullableStringFieldUpdateOperationsInput | string | null
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUsedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    balance?: NullableStringFieldUpdateOperationsInput | string | null
    nonce?: NullableIntFieldUpdateOperationsInput | number | null
    user?: UserUpdateOneRequiredWithoutWalletsNestedInput
    batches?: BatchUpdateManyWithoutTempWalletNestedInput
  }

  export type WalletUncheckedUpdateWithoutProofsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    chainId?: IntFieldUpdateOperationsInput | number
    type?: EnumWalletTypeFieldUpdateOperationsInput | WalletType
    encryptedPrivateKey?: NullableStringFieldUpdateOperationsInput | string | null
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUsedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    balance?: NullableStringFieldUpdateOperationsInput | string | null
    nonce?: NullableIntFieldUpdateOperationsInput | number | null
    batches?: BatchUncheckedUpdateManyWithoutTempWalletNestedInput
  }

  export type BatchUpsertWithoutProofsInput = {
    update: XOR<BatchUpdateWithoutProofsInput, BatchUncheckedUpdateWithoutProofsInput>
    create: XOR<BatchCreateWithoutProofsInput, BatchUncheckedCreateWithoutProofsInput>
  }

  export type BatchUpdateWithoutProofsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumBatchStatusFieldUpdateOperationsInput | BatchStatus
    merkleRoot?: StringFieldUpdateOperationsInput | string
    transactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    gasUsed?: NullableStringFieldUpdateOperationsInput | string | null
    gasPrice?: NullableStringFieldUpdateOperationsInput | string | null
    totalCost?: NullableStringFieldUpdateOperationsInput | string | null
    retryCount?: IntFieldUpdateOperationsInput | number
    maxRetries?: IntFieldUpdateOperationsInput | number
    tempWallet?: WalletUpdateOneRequiredWithoutBatchesNestedInput
  }

  export type BatchUncheckedUpdateWithoutProofsInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumBatchStatusFieldUpdateOperationsInput | BatchStatus
    merkleRoot?: StringFieldUpdateOperationsInput | string
    transactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    tempWalletId?: StringFieldUpdateOperationsInput | string
    gasUsed?: NullableStringFieldUpdateOperationsInput | string | null
    gasPrice?: NullableStringFieldUpdateOperationsInput | string | null
    totalCost?: NullableStringFieldUpdateOperationsInput | string | null
    retryCount?: IntFieldUpdateOperationsInput | number
    maxRetries?: IntFieldUpdateOperationsInput | number
  }

  export type VerificationUpsertWithWhereUniqueWithoutProofInput = {
    where: VerificationWhereUniqueInput
    update: XOR<VerificationUpdateWithoutProofInput, VerificationUncheckedUpdateWithoutProofInput>
    create: XOR<VerificationCreateWithoutProofInput, VerificationUncheckedCreateWithoutProofInput>
  }

  export type VerificationUpdateWithWhereUniqueWithoutProofInput = {
    where: VerificationWhereUniqueInput
    data: XOR<VerificationUpdateWithoutProofInput, VerificationUncheckedUpdateWithoutProofInput>
  }

  export type VerificationUpdateManyWithWhereWithoutProofInput = {
    where: VerificationScalarWhereInput
    data: XOR<VerificationUpdateManyMutationInput, VerificationUncheckedUpdateManyWithoutVerificationsInput>
  }

  export type VerificationScalarWhereInput = {
    AND?: Enumerable<VerificationScalarWhereInput>
    OR?: Enumerable<VerificationScalarWhereInput>
    NOT?: Enumerable<VerificationScalarWhereInput>
    id?: UuidFilter | string
    proofId?: UuidFilter | string
    referenceId?: StringFilter | string
    verifierAddress?: StringNullableFilter | string | null
    verifiedAt?: DateTimeFilter | Date | string
    isSuccessful?: BoolFilter | boolean
    failureReason?: StringNullableFilter | string | null
    verificationResult?: JsonFilter
  }

  export type ProofCreateWithoutVerificationsInput = {
    id?: string
    referenceId: string
    createdAt?: Date | string
    expiresAt: Date | string
    proofType: ProofType
    isRevoked?: boolean
    revokedAt?: Date | string | null
    revocationReason?: string | null
    encryptedData: string
    encryptionKeyId: string
    transactionHash?: string | null
    merkleRoot?: string | null
    merklePath?: NullableJsonNullValueInput | InputJsonValue
    warningFlags?: ProofCreatewarningFlagsInput | Enumerable<string>
    originalWallets?: ProofCreateoriginalWalletsInput | Enumerable<string>
    status: ProofStatus
    user: UserCreateNestedOneWithoutProofsInput
    tempWallet: WalletCreateNestedOneWithoutProofsInput
    batch?: BatchCreateNestedOneWithoutProofsInput
  }

  export type ProofUncheckedCreateWithoutVerificationsInput = {
    id?: string
    userId: string
    referenceId: string
    createdAt?: Date | string
    expiresAt: Date | string
    proofType: ProofType
    isRevoked?: boolean
    revokedAt?: Date | string | null
    revocationReason?: string | null
    encryptedData: string
    encryptionKeyId: string
    tempWalletId: string
    transactionHash?: string | null
    merkleRoot?: string | null
    merklePath?: NullableJsonNullValueInput | InputJsonValue
    batchId?: string | null
    warningFlags?: ProofCreatewarningFlagsInput | Enumerable<string>
    originalWallets?: ProofCreateoriginalWalletsInput | Enumerable<string>
    status: ProofStatus
  }

  export type ProofCreateOrConnectWithoutVerificationsInput = {
    where: ProofWhereUniqueInput
    create: XOR<ProofCreateWithoutVerificationsInput, ProofUncheckedCreateWithoutVerificationsInput>
  }

  export type ProofUpsertWithoutVerificationsInput = {
    update: XOR<ProofUpdateWithoutVerificationsInput, ProofUncheckedUpdateWithoutVerificationsInput>
    create: XOR<ProofCreateWithoutVerificationsInput, ProofUncheckedCreateWithoutVerificationsInput>
  }

  export type ProofUpdateWithoutVerificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    referenceId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    proofType?: EnumProofTypeFieldUpdateOperationsInput | ProofType
    isRevoked?: BoolFieldUpdateOperationsInput | boolean
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    revocationReason?: NullableStringFieldUpdateOperationsInput | string | null
    encryptedData?: StringFieldUpdateOperationsInput | string
    encryptionKeyId?: StringFieldUpdateOperationsInput | string
    transactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    merkleRoot?: NullableStringFieldUpdateOperationsInput | string | null
    merklePath?: NullableJsonNullValueInput | InputJsonValue
    warningFlags?: ProofUpdatewarningFlagsInput | Enumerable<string>
    originalWallets?: ProofUpdateoriginalWalletsInput | Enumerable<string>
    status?: EnumProofStatusFieldUpdateOperationsInput | ProofStatus
    user?: UserUpdateOneRequiredWithoutProofsNestedInput
    tempWallet?: WalletUpdateOneRequiredWithoutProofsNestedInput
    batch?: BatchUpdateOneWithoutProofsNestedInput
  }

  export type ProofUncheckedUpdateWithoutVerificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    referenceId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    proofType?: EnumProofTypeFieldUpdateOperationsInput | ProofType
    isRevoked?: BoolFieldUpdateOperationsInput | boolean
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    revocationReason?: NullableStringFieldUpdateOperationsInput | string | null
    encryptedData?: StringFieldUpdateOperationsInput | string
    encryptionKeyId?: StringFieldUpdateOperationsInput | string
    tempWalletId?: StringFieldUpdateOperationsInput | string
    transactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    merkleRoot?: NullableStringFieldUpdateOperationsInput | string | null
    merklePath?: NullableJsonNullValueInput | InputJsonValue
    batchId?: NullableStringFieldUpdateOperationsInput | string | null
    warningFlags?: ProofUpdatewarningFlagsInput | Enumerable<string>
    originalWallets?: ProofUpdateoriginalWalletsInput | Enumerable<string>
    status?: EnumProofStatusFieldUpdateOperationsInput | ProofStatus
  }

  export type WalletCreateWithoutBatchesInput = {
    id?: string
    address: string
    chainId: number
    type: WalletType
    encryptedPrivateKey?: string | null
    keyId?: string | null
    createdAt?: Date | string
    lastUsedAt?: Date | string
    isArchived?: boolean
    balance?: string | null
    nonce?: number | null
    user: UserCreateNestedOneWithoutWalletsInput
    proofs?: ProofCreateNestedManyWithoutTempWalletInput
  }

  export type WalletUncheckedCreateWithoutBatchesInput = {
    id?: string
    userId: string
    address: string
    chainId: number
    type: WalletType
    encryptedPrivateKey?: string | null
    keyId?: string | null
    createdAt?: Date | string
    lastUsedAt?: Date | string
    isArchived?: boolean
    balance?: string | null
    nonce?: number | null
    proofs?: ProofUncheckedCreateNestedManyWithoutTempWalletInput
  }

  export type WalletCreateOrConnectWithoutBatchesInput = {
    where: WalletWhereUniqueInput
    create: XOR<WalletCreateWithoutBatchesInput, WalletUncheckedCreateWithoutBatchesInput>
  }

  export type ProofCreateWithoutBatchInput = {
    id?: string
    referenceId: string
    createdAt?: Date | string
    expiresAt: Date | string
    proofType: ProofType
    isRevoked?: boolean
    revokedAt?: Date | string | null
    revocationReason?: string | null
    encryptedData: string
    encryptionKeyId: string
    transactionHash?: string | null
    merkleRoot?: string | null
    merklePath?: NullableJsonNullValueInput | InputJsonValue
    warningFlags?: ProofCreatewarningFlagsInput | Enumerable<string>
    originalWallets?: ProofCreateoriginalWalletsInput | Enumerable<string>
    status: ProofStatus
    user: UserCreateNestedOneWithoutProofsInput
    tempWallet: WalletCreateNestedOneWithoutProofsInput
    verifications?: VerificationCreateNestedManyWithoutProofInput
  }

  export type ProofUncheckedCreateWithoutBatchInput = {
    id?: string
    userId: string
    referenceId: string
    createdAt?: Date | string
    expiresAt: Date | string
    proofType: ProofType
    isRevoked?: boolean
    revokedAt?: Date | string | null
    revocationReason?: string | null
    encryptedData: string
    encryptionKeyId: string
    tempWalletId: string
    transactionHash?: string | null
    merkleRoot?: string | null
    merklePath?: NullableJsonNullValueInput | InputJsonValue
    warningFlags?: ProofCreatewarningFlagsInput | Enumerable<string>
    originalWallets?: ProofCreateoriginalWalletsInput | Enumerable<string>
    status: ProofStatus
    verifications?: VerificationUncheckedCreateNestedManyWithoutProofInput
  }

  export type ProofCreateOrConnectWithoutBatchInput = {
    where: ProofWhereUniqueInput
    create: XOR<ProofCreateWithoutBatchInput, ProofUncheckedCreateWithoutBatchInput>
  }

  export type ProofCreateManyBatchInputEnvelope = {
    data: Enumerable<ProofCreateManyBatchInput>
    skipDuplicates?: boolean
  }

  export type WalletUpsertWithoutBatchesInput = {
    update: XOR<WalletUpdateWithoutBatchesInput, WalletUncheckedUpdateWithoutBatchesInput>
    create: XOR<WalletCreateWithoutBatchesInput, WalletUncheckedCreateWithoutBatchesInput>
  }

  export type WalletUpdateWithoutBatchesInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    chainId?: IntFieldUpdateOperationsInput | number
    type?: EnumWalletTypeFieldUpdateOperationsInput | WalletType
    encryptedPrivateKey?: NullableStringFieldUpdateOperationsInput | string | null
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUsedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    balance?: NullableStringFieldUpdateOperationsInput | string | null
    nonce?: NullableIntFieldUpdateOperationsInput | number | null
    user?: UserUpdateOneRequiredWithoutWalletsNestedInput
    proofs?: ProofUpdateManyWithoutTempWalletNestedInput
  }

  export type WalletUncheckedUpdateWithoutBatchesInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    chainId?: IntFieldUpdateOperationsInput | number
    type?: EnumWalletTypeFieldUpdateOperationsInput | WalletType
    encryptedPrivateKey?: NullableStringFieldUpdateOperationsInput | string | null
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUsedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    balance?: NullableStringFieldUpdateOperationsInput | string | null
    nonce?: NullableIntFieldUpdateOperationsInput | number | null
    proofs?: ProofUncheckedUpdateManyWithoutTempWalletNestedInput
  }

  export type ProofUpsertWithWhereUniqueWithoutBatchInput = {
    where: ProofWhereUniqueInput
    update: XOR<ProofUpdateWithoutBatchInput, ProofUncheckedUpdateWithoutBatchInput>
    create: XOR<ProofCreateWithoutBatchInput, ProofUncheckedCreateWithoutBatchInput>
  }

  export type ProofUpdateWithWhereUniqueWithoutBatchInput = {
    where: ProofWhereUniqueInput
    data: XOR<ProofUpdateWithoutBatchInput, ProofUncheckedUpdateWithoutBatchInput>
  }

  export type ProofUpdateManyWithWhereWithoutBatchInput = {
    where: ProofScalarWhereInput
    data: XOR<ProofUpdateManyMutationInput, ProofUncheckedUpdateManyWithoutProofsInput>
  }

  export type OrganizationUserCreateWithoutOrganizationInput = {
    id?: string
    role?: OrgRole
    joinedAt?: Date | string
    user: UserCreateNestedOneWithoutOrganizationUsersInput
  }

  export type OrganizationUserUncheckedCreateWithoutOrganizationInput = {
    id?: string
    userId: string
    role?: OrgRole
    joinedAt?: Date | string
  }

  export type OrganizationUserCreateOrConnectWithoutOrganizationInput = {
    where: OrganizationUserWhereUniqueInput
    create: XOR<OrganizationUserCreateWithoutOrganizationInput, OrganizationUserUncheckedCreateWithoutOrganizationInput>
  }

  export type OrganizationUserCreateManyOrganizationInputEnvelope = {
    data: Enumerable<OrganizationUserCreateManyOrganizationInput>
    skipDuplicates?: boolean
  }

  export type ProofTemplateCreateWithoutOrganizationInput = {
    id?: string
    name: string
    description?: string | null
    proofType: ProofType
    threshold: string
    expiryPeriod: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    settings?: JsonNullValueInput | InputJsonValue
  }

  export type ProofTemplateUncheckedCreateWithoutOrganizationInput = {
    id?: string
    name: string
    description?: string | null
    proofType: ProofType
    threshold: string
    expiryPeriod: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    settings?: JsonNullValueInput | InputJsonValue
  }

  export type ProofTemplateCreateOrConnectWithoutOrganizationInput = {
    where: ProofTemplateWhereUniqueInput
    create: XOR<ProofTemplateCreateWithoutOrganizationInput, ProofTemplateUncheckedCreateWithoutOrganizationInput>
  }

  export type ProofTemplateCreateManyOrganizationInputEnvelope = {
    data: Enumerable<ProofTemplateCreateManyOrganizationInput>
    skipDuplicates?: boolean
  }

  export type OrganizationUserUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: OrganizationUserWhereUniqueInput
    update: XOR<OrganizationUserUpdateWithoutOrganizationInput, OrganizationUserUncheckedUpdateWithoutOrganizationInput>
    create: XOR<OrganizationUserCreateWithoutOrganizationInput, OrganizationUserUncheckedCreateWithoutOrganizationInput>
  }

  export type OrganizationUserUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: OrganizationUserWhereUniqueInput
    data: XOR<OrganizationUserUpdateWithoutOrganizationInput, OrganizationUserUncheckedUpdateWithoutOrganizationInput>
  }

  export type OrganizationUserUpdateManyWithWhereWithoutOrganizationInput = {
    where: OrganizationUserScalarWhereInput
    data: XOR<OrganizationUserUpdateManyMutationInput, OrganizationUserUncheckedUpdateManyWithoutMembersInput>
  }

  export type ProofTemplateUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: ProofTemplateWhereUniqueInput
    update: XOR<ProofTemplateUpdateWithoutOrganizationInput, ProofTemplateUncheckedUpdateWithoutOrganizationInput>
    create: XOR<ProofTemplateCreateWithoutOrganizationInput, ProofTemplateUncheckedCreateWithoutOrganizationInput>
  }

  export type ProofTemplateUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: ProofTemplateWhereUniqueInput
    data: XOR<ProofTemplateUpdateWithoutOrganizationInput, ProofTemplateUncheckedUpdateWithoutOrganizationInput>
  }

  export type ProofTemplateUpdateManyWithWhereWithoutOrganizationInput = {
    where: ProofTemplateScalarWhereInput
    data: XOR<ProofTemplateUpdateManyMutationInput, ProofTemplateUncheckedUpdateManyWithoutTemplatesInput>
  }

  export type ProofTemplateScalarWhereInput = {
    AND?: Enumerable<ProofTemplateScalarWhereInput>
    OR?: Enumerable<ProofTemplateScalarWhereInput>
    NOT?: Enumerable<ProofTemplateScalarWhereInput>
    id?: UuidFilter | string
    organizationId?: UuidFilter | string
    name?: StringFilter | string
    description?: StringNullableFilter | string | null
    proofType?: EnumProofTypeFilter | ProofType
    threshold?: StringFilter | string
    expiryPeriod?: IntFilter | number
    createdAt?: DateTimeFilter | Date | string
    updatedAt?: DateTimeFilter | Date | string
    isActive?: BoolFilter | boolean
    settings?: JsonFilter
  }

  export type UserCreateWithoutOrganizationUsersInput = {
    id?: string
    address: string
    createdAt?: Date | string
    lastLoginAt?: Date | string | null
    isActive?: boolean
    permissions?: UserCreatepermissionsInput | Enumerable<string>
    settings?: JsonNullValueInput | InputJsonValue
    wallets?: WalletCreateNestedManyWithoutUserInput
    proofs?: ProofCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutOrganizationUsersInput = {
    id?: string
    address: string
    createdAt?: Date | string
    lastLoginAt?: Date | string | null
    isActive?: boolean
    permissions?: UserCreatepermissionsInput | Enumerable<string>
    settings?: JsonNullValueInput | InputJsonValue
    wallets?: WalletUncheckedCreateNestedManyWithoutUserInput
    proofs?: ProofUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutOrganizationUsersInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOrganizationUsersInput, UserUncheckedCreateWithoutOrganizationUsersInput>
  }

  export type OrganizationCreateWithoutMembersInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    apiKey?: string | null
    settings?: JsonNullValueInput | InputJsonValue
    templates?: ProofTemplateCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutMembersInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    apiKey?: string | null
    settings?: JsonNullValueInput | InputJsonValue
    templates?: ProofTemplateUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutMembersInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutMembersInput, OrganizationUncheckedCreateWithoutMembersInput>
  }

  export type UserUpsertWithoutOrganizationUsersInput = {
    update: XOR<UserUpdateWithoutOrganizationUsersInput, UserUncheckedUpdateWithoutOrganizationUsersInput>
    create: XOR<UserCreateWithoutOrganizationUsersInput, UserUncheckedCreateWithoutOrganizationUsersInput>
  }

  export type UserUpdateWithoutOrganizationUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    permissions?: UserUpdatepermissionsInput | Enumerable<string>
    settings?: JsonNullValueInput | InputJsonValue
    wallets?: WalletUpdateManyWithoutUserNestedInput
    proofs?: ProofUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutOrganizationUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastLoginAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    isActive?: BoolFieldUpdateOperationsInput | boolean
    permissions?: UserUpdatepermissionsInput | Enumerable<string>
    settings?: JsonNullValueInput | InputJsonValue
    wallets?: WalletUncheckedUpdateManyWithoutUserNestedInput
    proofs?: ProofUncheckedUpdateManyWithoutUserNestedInput
  }

  export type OrganizationUpsertWithoutMembersInput = {
    update: XOR<OrganizationUpdateWithoutMembersInput, OrganizationUncheckedUpdateWithoutMembersInput>
    create: XOR<OrganizationCreateWithoutMembersInput, OrganizationUncheckedCreateWithoutMembersInput>
  }

  export type OrganizationUpdateWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    apiKey?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: JsonNullValueInput | InputJsonValue
    templates?: ProofTemplateUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    apiKey?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: JsonNullValueInput | InputJsonValue
    templates?: ProofTemplateUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationCreateWithoutTemplatesInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    apiKey?: string | null
    settings?: JsonNullValueInput | InputJsonValue
    members?: OrganizationUserCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutTemplatesInput = {
    id?: string
    name: string
    createdAt?: Date | string
    updatedAt?: Date | string
    apiKey?: string | null
    settings?: JsonNullValueInput | InputJsonValue
    members?: OrganizationUserUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutTemplatesInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutTemplatesInput, OrganizationUncheckedCreateWithoutTemplatesInput>
  }

  export type OrganizationUpsertWithoutTemplatesInput = {
    update: XOR<OrganizationUpdateWithoutTemplatesInput, OrganizationUncheckedUpdateWithoutTemplatesInput>
    create: XOR<OrganizationCreateWithoutTemplatesInput, OrganizationUncheckedCreateWithoutTemplatesInput>
  }

  export type OrganizationUpdateWithoutTemplatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    apiKey?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: JsonNullValueInput | InputJsonValue
    members?: OrganizationUserUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutTemplatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    apiKey?: NullableStringFieldUpdateOperationsInput | string | null
    settings?: JsonNullValueInput | InputJsonValue
    members?: OrganizationUserUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type WalletCreateManyUserInput = {
    id?: string
    address: string
    chainId: number
    type: WalletType
    encryptedPrivateKey?: string | null
    keyId?: string | null
    createdAt?: Date | string
    lastUsedAt?: Date | string
    isArchived?: boolean
    balance?: string | null
    nonce?: number | null
  }

  export type ProofCreateManyUserInput = {
    id?: string
    referenceId: string
    createdAt?: Date | string
    expiresAt: Date | string
    proofType: ProofType
    isRevoked?: boolean
    revokedAt?: Date | string | null
    revocationReason?: string | null
    encryptedData: string
    encryptionKeyId: string
    tempWalletId: string
    transactionHash?: string | null
    merkleRoot?: string | null
    merklePath?: NullableJsonNullValueInput | InputJsonValue
    batchId?: string | null
    warningFlags?: ProofCreatewarningFlagsInput | Enumerable<string>
    originalWallets?: ProofCreateoriginalWalletsInput | Enumerable<string>
    status: ProofStatus
  }

  export type OrganizationUserCreateManyUserInput = {
    id?: string
    organizationId: string
    role?: OrgRole
    joinedAt?: Date | string
  }

  export type WalletUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    chainId?: IntFieldUpdateOperationsInput | number
    type?: EnumWalletTypeFieldUpdateOperationsInput | WalletType
    encryptedPrivateKey?: NullableStringFieldUpdateOperationsInput | string | null
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUsedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    balance?: NullableStringFieldUpdateOperationsInput | string | null
    nonce?: NullableIntFieldUpdateOperationsInput | number | null
    proofs?: ProofUpdateManyWithoutTempWalletNestedInput
    batches?: BatchUpdateManyWithoutTempWalletNestedInput
  }

  export type WalletUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    chainId?: IntFieldUpdateOperationsInput | number
    type?: EnumWalletTypeFieldUpdateOperationsInput | WalletType
    encryptedPrivateKey?: NullableStringFieldUpdateOperationsInput | string | null
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUsedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    balance?: NullableStringFieldUpdateOperationsInput | string | null
    nonce?: NullableIntFieldUpdateOperationsInput | number | null
    proofs?: ProofUncheckedUpdateManyWithoutTempWalletNestedInput
    batches?: BatchUncheckedUpdateManyWithoutTempWalletNestedInput
  }

  export type WalletUncheckedUpdateManyWithoutWalletsInput = {
    id?: StringFieldUpdateOperationsInput | string
    address?: StringFieldUpdateOperationsInput | string
    chainId?: IntFieldUpdateOperationsInput | number
    type?: EnumWalletTypeFieldUpdateOperationsInput | WalletType
    encryptedPrivateKey?: NullableStringFieldUpdateOperationsInput | string | null
    keyId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    lastUsedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isArchived?: BoolFieldUpdateOperationsInput | boolean
    balance?: NullableStringFieldUpdateOperationsInput | string | null
    nonce?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type ProofUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    referenceId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    proofType?: EnumProofTypeFieldUpdateOperationsInput | ProofType
    isRevoked?: BoolFieldUpdateOperationsInput | boolean
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    revocationReason?: NullableStringFieldUpdateOperationsInput | string | null
    encryptedData?: StringFieldUpdateOperationsInput | string
    encryptionKeyId?: StringFieldUpdateOperationsInput | string
    transactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    merkleRoot?: NullableStringFieldUpdateOperationsInput | string | null
    merklePath?: NullableJsonNullValueInput | InputJsonValue
    warningFlags?: ProofUpdatewarningFlagsInput | Enumerable<string>
    originalWallets?: ProofUpdateoriginalWalletsInput | Enumerable<string>
    status?: EnumProofStatusFieldUpdateOperationsInput | ProofStatus
    tempWallet?: WalletUpdateOneRequiredWithoutProofsNestedInput
    batch?: BatchUpdateOneWithoutProofsNestedInput
    verifications?: VerificationUpdateManyWithoutProofNestedInput
  }

  export type ProofUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    referenceId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    proofType?: EnumProofTypeFieldUpdateOperationsInput | ProofType
    isRevoked?: BoolFieldUpdateOperationsInput | boolean
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    revocationReason?: NullableStringFieldUpdateOperationsInput | string | null
    encryptedData?: StringFieldUpdateOperationsInput | string
    encryptionKeyId?: StringFieldUpdateOperationsInput | string
    tempWalletId?: StringFieldUpdateOperationsInput | string
    transactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    merkleRoot?: NullableStringFieldUpdateOperationsInput | string | null
    merklePath?: NullableJsonNullValueInput | InputJsonValue
    batchId?: NullableStringFieldUpdateOperationsInput | string | null
    warningFlags?: ProofUpdatewarningFlagsInput | Enumerable<string>
    originalWallets?: ProofUpdateoriginalWalletsInput | Enumerable<string>
    status?: EnumProofStatusFieldUpdateOperationsInput | ProofStatus
    verifications?: VerificationUncheckedUpdateManyWithoutProofNestedInput
  }

  export type ProofUncheckedUpdateManyWithoutProofsInput = {
    id?: StringFieldUpdateOperationsInput | string
    referenceId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    proofType?: EnumProofTypeFieldUpdateOperationsInput | ProofType
    isRevoked?: BoolFieldUpdateOperationsInput | boolean
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    revocationReason?: NullableStringFieldUpdateOperationsInput | string | null
    encryptedData?: StringFieldUpdateOperationsInput | string
    encryptionKeyId?: StringFieldUpdateOperationsInput | string
    tempWalletId?: StringFieldUpdateOperationsInput | string
    transactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    merkleRoot?: NullableStringFieldUpdateOperationsInput | string | null
    merklePath?: NullableJsonNullValueInput | InputJsonValue
    batchId?: NullableStringFieldUpdateOperationsInput | string | null
    warningFlags?: ProofUpdatewarningFlagsInput | Enumerable<string>
    originalWallets?: ProofUpdateoriginalWalletsInput | Enumerable<string>
    status?: EnumProofStatusFieldUpdateOperationsInput | ProofStatus
  }

  export type OrganizationUserUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumOrgRoleFieldUpdateOperationsInput | OrgRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    organization?: OrganizationUpdateOneRequiredWithoutMembersNestedInput
  }

  export type OrganizationUserUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    role?: EnumOrgRoleFieldUpdateOperationsInput | OrgRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrganizationUserUncheckedUpdateManyWithoutOrganizationUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    organizationId?: StringFieldUpdateOperationsInput | string
    role?: EnumOrgRoleFieldUpdateOperationsInput | OrgRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProofCreateManyTempWalletInput = {
    id?: string
    userId: string
    referenceId: string
    createdAt?: Date | string
    expiresAt: Date | string
    proofType: ProofType
    isRevoked?: boolean
    revokedAt?: Date | string | null
    revocationReason?: string | null
    encryptedData: string
    encryptionKeyId: string
    transactionHash?: string | null
    merkleRoot?: string | null
    merklePath?: NullableJsonNullValueInput | InputJsonValue
    batchId?: string | null
    warningFlags?: ProofCreatewarningFlagsInput | Enumerable<string>
    originalWallets?: ProofCreateoriginalWalletsInput | Enumerable<string>
    status: ProofStatus
  }

  export type BatchCreateManyTempWalletInput = {
    id?: string
    createdAt?: Date | string
    processedAt?: Date | string | null
    status: BatchStatus
    merkleRoot: string
    transactionHash?: string | null
    gasUsed?: string | null
    gasPrice?: string | null
    totalCost?: string | null
    retryCount?: number
    maxRetries?: number
  }

  export type ProofUpdateWithoutTempWalletInput = {
    id?: StringFieldUpdateOperationsInput | string
    referenceId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    proofType?: EnumProofTypeFieldUpdateOperationsInput | ProofType
    isRevoked?: BoolFieldUpdateOperationsInput | boolean
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    revocationReason?: NullableStringFieldUpdateOperationsInput | string | null
    encryptedData?: StringFieldUpdateOperationsInput | string
    encryptionKeyId?: StringFieldUpdateOperationsInput | string
    transactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    merkleRoot?: NullableStringFieldUpdateOperationsInput | string | null
    merklePath?: NullableJsonNullValueInput | InputJsonValue
    warningFlags?: ProofUpdatewarningFlagsInput | Enumerable<string>
    originalWallets?: ProofUpdateoriginalWalletsInput | Enumerable<string>
    status?: EnumProofStatusFieldUpdateOperationsInput | ProofStatus
    user?: UserUpdateOneRequiredWithoutProofsNestedInput
    batch?: BatchUpdateOneWithoutProofsNestedInput
    verifications?: VerificationUpdateManyWithoutProofNestedInput
  }

  export type ProofUncheckedUpdateWithoutTempWalletInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    referenceId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    proofType?: EnumProofTypeFieldUpdateOperationsInput | ProofType
    isRevoked?: BoolFieldUpdateOperationsInput | boolean
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    revocationReason?: NullableStringFieldUpdateOperationsInput | string | null
    encryptedData?: StringFieldUpdateOperationsInput | string
    encryptionKeyId?: StringFieldUpdateOperationsInput | string
    transactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    merkleRoot?: NullableStringFieldUpdateOperationsInput | string | null
    merklePath?: NullableJsonNullValueInput | InputJsonValue
    batchId?: NullableStringFieldUpdateOperationsInput | string | null
    warningFlags?: ProofUpdatewarningFlagsInput | Enumerable<string>
    originalWallets?: ProofUpdateoriginalWalletsInput | Enumerable<string>
    status?: EnumProofStatusFieldUpdateOperationsInput | ProofStatus
    verifications?: VerificationUncheckedUpdateManyWithoutProofNestedInput
  }

  export type BatchUpdateWithoutTempWalletInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumBatchStatusFieldUpdateOperationsInput | BatchStatus
    merkleRoot?: StringFieldUpdateOperationsInput | string
    transactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    gasUsed?: NullableStringFieldUpdateOperationsInput | string | null
    gasPrice?: NullableStringFieldUpdateOperationsInput | string | null
    totalCost?: NullableStringFieldUpdateOperationsInput | string | null
    retryCount?: IntFieldUpdateOperationsInput | number
    maxRetries?: IntFieldUpdateOperationsInput | number
    proofs?: ProofUpdateManyWithoutBatchNestedInput
  }

  export type BatchUncheckedUpdateWithoutTempWalletInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumBatchStatusFieldUpdateOperationsInput | BatchStatus
    merkleRoot?: StringFieldUpdateOperationsInput | string
    transactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    gasUsed?: NullableStringFieldUpdateOperationsInput | string | null
    gasPrice?: NullableStringFieldUpdateOperationsInput | string | null
    totalCost?: NullableStringFieldUpdateOperationsInput | string | null
    retryCount?: IntFieldUpdateOperationsInput | number
    maxRetries?: IntFieldUpdateOperationsInput | number
    proofs?: ProofUncheckedUpdateManyWithoutBatchNestedInput
  }

  export type BatchUncheckedUpdateManyWithoutBatchesInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    processedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    status?: EnumBatchStatusFieldUpdateOperationsInput | BatchStatus
    merkleRoot?: StringFieldUpdateOperationsInput | string
    transactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    gasUsed?: NullableStringFieldUpdateOperationsInput | string | null
    gasPrice?: NullableStringFieldUpdateOperationsInput | string | null
    totalCost?: NullableStringFieldUpdateOperationsInput | string | null
    retryCount?: IntFieldUpdateOperationsInput | number
    maxRetries?: IntFieldUpdateOperationsInput | number
  }

  export type VerificationCreateManyProofInput = {
    id?: string
    referenceId: string
    verifierAddress?: string | null
    verifiedAt?: Date | string
    isSuccessful: boolean
    failureReason?: string | null
    verificationResult: JsonNullValueInput | InputJsonValue
  }

  export type VerificationUpdateWithoutProofInput = {
    id?: StringFieldUpdateOperationsInput | string
    referenceId?: StringFieldUpdateOperationsInput | string
    verifierAddress?: NullableStringFieldUpdateOperationsInput | string | null
    verifiedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isSuccessful?: BoolFieldUpdateOperationsInput | boolean
    failureReason?: NullableStringFieldUpdateOperationsInput | string | null
    verificationResult?: JsonNullValueInput | InputJsonValue
  }

  export type VerificationUncheckedUpdateWithoutProofInput = {
    id?: StringFieldUpdateOperationsInput | string
    referenceId?: StringFieldUpdateOperationsInput | string
    verifierAddress?: NullableStringFieldUpdateOperationsInput | string | null
    verifiedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isSuccessful?: BoolFieldUpdateOperationsInput | boolean
    failureReason?: NullableStringFieldUpdateOperationsInput | string | null
    verificationResult?: JsonNullValueInput | InputJsonValue
  }

  export type VerificationUncheckedUpdateManyWithoutVerificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    referenceId?: StringFieldUpdateOperationsInput | string
    verifierAddress?: NullableStringFieldUpdateOperationsInput | string | null
    verifiedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isSuccessful?: BoolFieldUpdateOperationsInput | boolean
    failureReason?: NullableStringFieldUpdateOperationsInput | string | null
    verificationResult?: JsonNullValueInput | InputJsonValue
  }

  export type ProofCreateManyBatchInput = {
    id?: string
    userId: string
    referenceId: string
    createdAt?: Date | string
    expiresAt: Date | string
    proofType: ProofType
    isRevoked?: boolean
    revokedAt?: Date | string | null
    revocationReason?: string | null
    encryptedData: string
    encryptionKeyId: string
    tempWalletId: string
    transactionHash?: string | null
    merkleRoot?: string | null
    merklePath?: NullableJsonNullValueInput | InputJsonValue
    warningFlags?: ProofCreatewarningFlagsInput | Enumerable<string>
    originalWallets?: ProofCreateoriginalWalletsInput | Enumerable<string>
    status: ProofStatus
  }

  export type ProofUpdateWithoutBatchInput = {
    id?: StringFieldUpdateOperationsInput | string
    referenceId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    proofType?: EnumProofTypeFieldUpdateOperationsInput | ProofType
    isRevoked?: BoolFieldUpdateOperationsInput | boolean
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    revocationReason?: NullableStringFieldUpdateOperationsInput | string | null
    encryptedData?: StringFieldUpdateOperationsInput | string
    encryptionKeyId?: StringFieldUpdateOperationsInput | string
    transactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    merkleRoot?: NullableStringFieldUpdateOperationsInput | string | null
    merklePath?: NullableJsonNullValueInput | InputJsonValue
    warningFlags?: ProofUpdatewarningFlagsInput | Enumerable<string>
    originalWallets?: ProofUpdateoriginalWalletsInput | Enumerable<string>
    status?: EnumProofStatusFieldUpdateOperationsInput | ProofStatus
    user?: UserUpdateOneRequiredWithoutProofsNestedInput
    tempWallet?: WalletUpdateOneRequiredWithoutProofsNestedInput
    verifications?: VerificationUpdateManyWithoutProofNestedInput
  }

  export type ProofUncheckedUpdateWithoutBatchInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    referenceId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    expiresAt?: DateTimeFieldUpdateOperationsInput | Date | string
    proofType?: EnumProofTypeFieldUpdateOperationsInput | ProofType
    isRevoked?: BoolFieldUpdateOperationsInput | boolean
    revokedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    revocationReason?: NullableStringFieldUpdateOperationsInput | string | null
    encryptedData?: StringFieldUpdateOperationsInput | string
    encryptionKeyId?: StringFieldUpdateOperationsInput | string
    tempWalletId?: StringFieldUpdateOperationsInput | string
    transactionHash?: NullableStringFieldUpdateOperationsInput | string | null
    merkleRoot?: NullableStringFieldUpdateOperationsInput | string | null
    merklePath?: NullableJsonNullValueInput | InputJsonValue
    warningFlags?: ProofUpdatewarningFlagsInput | Enumerable<string>
    originalWallets?: ProofUpdateoriginalWalletsInput | Enumerable<string>
    status?: EnumProofStatusFieldUpdateOperationsInput | ProofStatus
    verifications?: VerificationUncheckedUpdateManyWithoutProofNestedInput
  }

  export type OrganizationUserCreateManyOrganizationInput = {
    id?: string
    userId: string
    role?: OrgRole
    joinedAt?: Date | string
  }

  export type ProofTemplateCreateManyOrganizationInput = {
    id?: string
    name: string
    description?: string | null
    proofType: ProofType
    threshold: string
    expiryPeriod: number
    createdAt?: Date | string
    updatedAt?: Date | string
    isActive?: boolean
    settings?: JsonNullValueInput | InputJsonValue
  }

  export type OrganizationUserUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    role?: EnumOrgRoleFieldUpdateOperationsInput | OrgRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutOrganizationUsersNestedInput
  }

  export type OrganizationUserUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumOrgRoleFieldUpdateOperationsInput | OrgRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type OrganizationUserUncheckedUpdateManyWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumOrgRoleFieldUpdateOperationsInput | OrgRole
    joinedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ProofTemplateUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    proofType?: EnumProofTypeFieldUpdateOperationsInput | ProofType
    threshold?: StringFieldUpdateOperationsInput | string
    expiryPeriod?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    settings?: JsonNullValueInput | InputJsonValue
  }

  export type ProofTemplateUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    proofType?: EnumProofTypeFieldUpdateOperationsInput | ProofType
    threshold?: StringFieldUpdateOperationsInput | string
    expiryPeriod?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    settings?: JsonNullValueInput | InputJsonValue
  }

  export type ProofTemplateUncheckedUpdateManyWithoutTemplatesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    proofType?: EnumProofTypeFieldUpdateOperationsInput | ProofType
    threshold?: StringFieldUpdateOperationsInput | string
    expiryPeriod?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    settings?: JsonNullValueInput | InputJsonValue
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}